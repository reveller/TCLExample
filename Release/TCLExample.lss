
TCLExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  000055d4  00005668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000055d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  0080027a  0080027a  000057e2  2**0
                  ALLOC
  3 .debug_aranges 00000f38  00000000  00000000  000057e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002c2e  00000000  00000000  0000671a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000102b5  00000000  00000000  00009348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000038fa  00000000  00000000  000195fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008ffe  00000000  00000000  0001cef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001ab0  00000000  00000000  00025ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000478e  00000000  00000000  000279a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007471  00000000  00000000  0002c136  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ee8  00000000  00000000  000335a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
       0:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__dtors_end>

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
       4:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
       8:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

  pinMode(_busy_pin, OUTPUT);
  digitalWrite(_rw_pin, LOW);
}

char OLEDFourBit::readChar(void){
       c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	TCNT4 = 0;
	TIMSK4 = (1<<TOIE4);
#endif
}

void MsTimer2::stop() {
      10:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	}
}

BeerTempController::~BeerTempController() {
	// TODO Auto-generated destructor stub
}
      14:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	pinMode(_pin, INPUT);
}

Button::~Button() {
	// TODO Auto-generated destructor stub
}
      18:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
//	strcpy(Cmd,cmd);
//	Params = (char *)malloc(strlen(params)+1);
//	strcpy(Params,params);
//}
//
ComMessage::~ComMessage() {
      1c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

Command::~Command()
{


}
      20:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	_stateChange = true;
}

Display::~Display() {
	// TODO Auto-generated destructor stub
}
      24:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__vector_9>
	}
}

FridgeTempController::~FridgeTempController() {
	// TODO Auto-generated destructor stub
}
      28:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
}

//Returns false if it does NOT perform a state change
bool Relay::GetState(){
	return _state;
}
      2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
#include "Settings.h"

Settings::Settings() {
	// TODO Auto-generated constructor stub

}
      30:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	_timer        = 0;
}

TempControl::~TempControl() {
	// TODO Auto-generated destructor stub
}
      34:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	_sensors->setResolution(_resolution);
}

TempSensors::~TempSensors() {
	// TODO Auto-generated destructor stub
}
      38:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      3c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      40:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_16>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
      44:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      48:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__vector_18>
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
      4c:	0c 94 92 22 	jmp	0x4524	; 0x4524 <__vector_19>
      50:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      54:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      58:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      5c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      60:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>
      64:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__bad_interrupt>

00000068 <_ZL11dscrc_table>:
      68:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      78:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
      88:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
      98:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
      a8:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
      b8:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
      c8:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
      d8:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
      e8:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
      f8:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     108:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     118:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     128:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     138:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     148:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     158:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000172 <port_to_output_PGM>:
     172:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000017c <port_to_input_PGM>:
     17c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000186 <digital_pin_to_port_PGM>:
     186:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     196:	03 03 03 03                                         ....

0000019a <digital_pin_to_bit_mask_PGM>:
     19a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1aa:	04 08 10 20                                         ... 

000001ae <digital_pin_to_timer_PGM>:
     1ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     1be:	00 00 00 00                                         ....

000001c2 <__ctors_start>:
     1c2:	3a 17       	cp	r19, r26
     1c4:	a3 21       	and	r26, r3
     1c6:	f8 23       	and	r31, r24

000001c8 <__ctors_end>:
     1c8:	33 17       	cp	r19, r19

000001ca <__dtors_end>:
     1ca:	11 24       	eor	r1, r1
     1cc:	1f be       	out	0x3f, r1	; 63
     1ce:	cf ef       	ldi	r28, 0xFF	; 255
     1d0:	d8 e0       	ldi	r29, 0x08	; 8
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	cd bf       	out	0x3d, r28	; 61

000001d6 <__do_copy_data>:
     1d6:	12 e0       	ldi	r17, 0x02	; 2
     1d8:	a0 e0       	ldi	r26, 0x00	; 0
     1da:	b1 e0       	ldi	r27, 0x01	; 1
     1dc:	e4 ed       	ldi	r30, 0xD4	; 212
     1de:	f5 e5       	ldi	r31, 0x55	; 85
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <.do_copy_data_start>

000001e2 <.do_copy_data_loop>:
     1e2:	05 90       	lpm	r0, Z+
     1e4:	0d 92       	st	X+, r0

000001e6 <.do_copy_data_start>:
     1e6:	aa 37       	cpi	r26, 0x7A	; 122
     1e8:	b1 07       	cpc	r27, r17
     1ea:	d9 f7       	brne	.-10     	; 0x1e2 <.do_copy_data_loop>

000001ec <__do_clear_bss>:
     1ec:	13 e0       	ldi	r17, 0x03	; 3
     1ee:	aa e7       	ldi	r26, 0x7A	; 122
     1f0:	b2 e0       	ldi	r27, 0x02	; 2
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <.do_clear_bss_start>

000001f4 <.do_clear_bss_loop>:
     1f4:	1d 92       	st	X+, r1

000001f6 <.do_clear_bss_start>:
     1f6:	a8 3a       	cpi	r26, 0xA8	; 168
     1f8:	b1 07       	cpc	r27, r17
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <.do_clear_bss_loop>

000001fc <__do_global_ctors>:
     1fc:	11 e0       	ldi	r17, 0x01	; 1
     1fe:	c8 ec       	ldi	r28, 0xC8	; 200
     200:	d1 e0       	ldi	r29, 0x01	; 1
     202:	04 c0       	rjmp	.+8      	; 0x20c <.do_global_ctors_start>

00000204 <.do_global_ctors_loop>:
     204:	22 97       	sbiw	r28, 0x02	; 2
     206:	fe 01       	movw	r30, r28
     208:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__tablejump__>

0000020c <.do_global_ctors_start>:
     20c:	c2 3c       	cpi	r28, 0xC2	; 194
     20e:	d1 07       	cpc	r29, r17
     210:	c9 f7       	brne	.-14     	; 0x204 <.do_global_ctors_loop>
     212:	0e 94 40 26 	call	0x4c80	; 0x4c80 <main>
     216:	0c 94 dd 2a 	jmp	0x55ba	; 0x55ba <__do_global_dtors>

0000021a <__bad_interrupt>:
     21a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021e <malloc>:
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	bc 01       	movw	r22, r24
     224:	82 30       	cpi	r24, 0x02	; 2
     226:	91 05       	cpc	r25, r1
     228:	10 f4       	brcc	.+4      	; 0x22e <malloc+0x10>
     22a:	62 e0       	ldi	r22, 0x02	; 2
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	a0 91 a6 03 	lds	r26, 0x03A6
     232:	b0 91 a7 03 	lds	r27, 0x03A7
     236:	ed 01       	movw	r28, r26
     238:	e0 e0       	ldi	r30, 0x00	; 0
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	21 c0       	rjmp	.+66     	; 0x284 <malloc+0x66>
     242:	88 81       	ld	r24, Y
     244:	99 81       	ldd	r25, Y+1	; 0x01
     246:	86 17       	cp	r24, r22
     248:	97 07       	cpc	r25, r23
     24a:	69 f4       	brne	.+26     	; 0x266 <malloc+0x48>
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	9b 81       	ldd	r25, Y+3	; 0x03
     250:	30 97       	sbiw	r30, 0x00	; 0
     252:	19 f0       	breq	.+6      	; 0x25a <malloc+0x3c>
     254:	93 83       	std	Z+3, r25	; 0x03
     256:	82 83       	std	Z+2, r24	; 0x02
     258:	04 c0       	rjmp	.+8      	; 0x262 <malloc+0x44>
     25a:	90 93 a7 03 	sts	0x03A7, r25
     25e:	80 93 a6 03 	sts	0x03A6, r24
     262:	fe 01       	movw	r30, r28
     264:	34 c0       	rjmp	.+104    	; 0x2ce <malloc+0xb0>
     266:	68 17       	cp	r22, r24
     268:	79 07       	cpc	r23, r25
     26a:	38 f4       	brcc	.+14     	; 0x27a <malloc+0x5c>
     26c:	41 15       	cp	r20, r1
     26e:	51 05       	cpc	r21, r1
     270:	19 f0       	breq	.+6      	; 0x278 <malloc+0x5a>
     272:	84 17       	cp	r24, r20
     274:	95 07       	cpc	r25, r21
     276:	08 f4       	brcc	.+2      	; 0x27a <malloc+0x5c>
     278:	ac 01       	movw	r20, r24
     27a:	fe 01       	movw	r30, r28
     27c:	8a 81       	ldd	r24, Y+2	; 0x02
     27e:	9b 81       	ldd	r25, Y+3	; 0x03
     280:	9c 01       	movw	r18, r24
     282:	e9 01       	movw	r28, r18
     284:	20 97       	sbiw	r28, 0x00	; 0
     286:	e9 f6       	brne	.-70     	; 0x242 <malloc+0x24>
     288:	41 15       	cp	r20, r1
     28a:	51 05       	cpc	r21, r1
     28c:	a9 f1       	breq	.+106    	; 0x2f8 <malloc+0xda>
     28e:	ca 01       	movw	r24, r20
     290:	86 1b       	sub	r24, r22
     292:	97 0b       	sbc	r25, r23
     294:	04 97       	sbiw	r24, 0x04	; 4
     296:	08 f4       	brcc	.+2      	; 0x29a <malloc+0x7c>
     298:	ba 01       	movw	r22, r20
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	2a c0       	rjmp	.+84     	; 0x2f4 <malloc+0xd6>
     2a0:	8d 91       	ld	r24, X+
     2a2:	9c 91       	ld	r25, X
     2a4:	11 97       	sbiw	r26, 0x01	; 1
     2a6:	84 17       	cp	r24, r20
     2a8:	95 07       	cpc	r25, r21
     2aa:	f9 f4       	brne	.+62     	; 0x2ea <malloc+0xcc>
     2ac:	64 17       	cp	r22, r20
     2ae:	75 07       	cpc	r23, r21
     2b0:	81 f4       	brne	.+32     	; 0x2d2 <malloc+0xb4>
     2b2:	12 96       	adiw	r26, 0x02	; 2
     2b4:	8d 91       	ld	r24, X+
     2b6:	9c 91       	ld	r25, X
     2b8:	13 97       	sbiw	r26, 0x03	; 3
     2ba:	30 97       	sbiw	r30, 0x00	; 0
     2bc:	19 f0       	breq	.+6      	; 0x2c4 <malloc+0xa6>
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	82 83       	std	Z+2, r24	; 0x02
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <malloc+0xae>
     2c4:	90 93 a7 03 	sts	0x03A7, r25
     2c8:	80 93 a6 03 	sts	0x03A6, r24
     2cc:	fd 01       	movw	r30, r26
     2ce:	32 96       	adiw	r30, 0x02	; 2
     2d0:	4c c0       	rjmp	.+152    	; 0x36a <malloc+0x14c>
     2d2:	ca 01       	movw	r24, r20
     2d4:	86 1b       	sub	r24, r22
     2d6:	97 0b       	sbc	r25, r23
     2d8:	fd 01       	movw	r30, r26
     2da:	e8 0f       	add	r30, r24
     2dc:	f9 1f       	adc	r31, r25
     2de:	61 93       	st	Z+, r22
     2e0:	71 93       	st	Z+, r23
     2e2:	02 97       	sbiw	r24, 0x02	; 2
     2e4:	8d 93       	st	X+, r24
     2e6:	9c 93       	st	X, r25
     2e8:	40 c0       	rjmp	.+128    	; 0x36a <malloc+0x14c>
     2ea:	fd 01       	movw	r30, r26
     2ec:	82 81       	ldd	r24, Z+2	; 0x02
     2ee:	93 81       	ldd	r25, Z+3	; 0x03
     2f0:	9c 01       	movw	r18, r24
     2f2:	d9 01       	movw	r26, r18
     2f4:	10 97       	sbiw	r26, 0x00	; 0
     2f6:	a1 f6       	brne	.-88     	; 0x2a0 <malloc+0x82>
     2f8:	80 91 a4 03 	lds	r24, 0x03A4
     2fc:	90 91 a5 03 	lds	r25, 0x03A5
     300:	89 2b       	or	r24, r25
     302:	41 f4       	brne	.+16     	; 0x314 <malloc+0xf6>
     304:	80 91 25 02 	lds	r24, 0x0225
     308:	90 91 26 02 	lds	r25, 0x0226
     30c:	90 93 a5 03 	sts	0x03A5, r25
     310:	80 93 a4 03 	sts	0x03A4, r24
     314:	40 91 27 02 	lds	r20, 0x0227
     318:	50 91 28 02 	lds	r21, 0x0228
     31c:	41 15       	cp	r20, r1
     31e:	51 05       	cpc	r21, r1
     320:	41 f4       	brne	.+16     	; 0x332 <malloc+0x114>
     322:	4d b7       	in	r20, 0x3d	; 61
     324:	5e b7       	in	r21, 0x3e	; 62
     326:	80 91 23 02 	lds	r24, 0x0223
     32a:	90 91 24 02 	lds	r25, 0x0224
     32e:	48 1b       	sub	r20, r24
     330:	59 0b       	sbc	r21, r25
     332:	20 91 a4 03 	lds	r18, 0x03A4
     336:	30 91 a5 03 	lds	r19, 0x03A5
     33a:	ca 01       	movw	r24, r20
     33c:	82 1b       	sub	r24, r18
     33e:	93 0b       	sbc	r25, r19
     340:	86 17       	cp	r24, r22
     342:	97 07       	cpc	r25, r23
     344:	80 f0       	brcs	.+32     	; 0x366 <malloc+0x148>
     346:	ab 01       	movw	r20, r22
     348:	4e 5f       	subi	r20, 0xFE	; 254
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	84 17       	cp	r24, r20
     34e:	95 07       	cpc	r25, r21
     350:	50 f0       	brcs	.+20     	; 0x366 <malloc+0x148>
     352:	42 0f       	add	r20, r18
     354:	53 1f       	adc	r21, r19
     356:	50 93 a5 03 	sts	0x03A5, r21
     35a:	40 93 a4 03 	sts	0x03A4, r20
     35e:	f9 01       	movw	r30, r18
     360:	61 93       	st	Z+, r22
     362:	71 93       	st	Z+, r23
     364:	02 c0       	rjmp	.+4      	; 0x36a <malloc+0x14c>
     366:	e0 e0       	ldi	r30, 0x00	; 0
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	cf 01       	movw	r24, r30
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <free>:
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	00 97       	sbiw	r24, 0x00	; 0
     378:	09 f4       	brne	.+2      	; 0x37c <free+0xa>
     37a:	50 c0       	rjmp	.+160    	; 0x41c <free+0xaa>
     37c:	ec 01       	movw	r28, r24
     37e:	22 97       	sbiw	r28, 0x02	; 2
     380:	1b 82       	std	Y+3, r1	; 0x03
     382:	1a 82       	std	Y+2, r1	; 0x02
     384:	a0 91 a6 03 	lds	r26, 0x03A6
     388:	b0 91 a7 03 	lds	r27, 0x03A7
     38c:	10 97       	sbiw	r26, 0x00	; 0
     38e:	09 f1       	breq	.+66     	; 0x3d2 <free+0x60>
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	ac 17       	cp	r26, r28
     396:	bd 07       	cpc	r27, r29
     398:	08 f1       	brcs	.+66     	; 0x3dc <free+0x6a>
     39a:	bb 83       	std	Y+3, r27	; 0x03
     39c:	aa 83       	std	Y+2, r26	; 0x02
     39e:	fe 01       	movw	r30, r28
     3a0:	21 91       	ld	r18, Z+
     3a2:	31 91       	ld	r19, Z+
     3a4:	e2 0f       	add	r30, r18
     3a6:	f3 1f       	adc	r31, r19
     3a8:	ae 17       	cp	r26, r30
     3aa:	bf 07       	cpc	r27, r31
     3ac:	79 f4       	brne	.+30     	; 0x3cc <free+0x5a>
     3ae:	8d 91       	ld	r24, X+
     3b0:	9c 91       	ld	r25, X
     3b2:	11 97       	sbiw	r26, 0x01	; 1
     3b4:	28 0f       	add	r18, r24
     3b6:	39 1f       	adc	r19, r25
     3b8:	2e 5f       	subi	r18, 0xFE	; 254
     3ba:	3f 4f       	sbci	r19, 0xFF	; 255
     3bc:	39 83       	std	Y+1, r19	; 0x01
     3be:	28 83       	st	Y, r18
     3c0:	12 96       	adiw	r26, 0x02	; 2
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	13 97       	sbiw	r26, 0x03	; 3
     3c8:	9b 83       	std	Y+3, r25	; 0x03
     3ca:	8a 83       	std	Y+2, r24	; 0x02
     3cc:	41 15       	cp	r20, r1
     3ce:	51 05       	cpc	r21, r1
     3d0:	71 f4       	brne	.+28     	; 0x3ee <free+0x7c>
     3d2:	d0 93 a7 03 	sts	0x03A7, r29
     3d6:	c0 93 a6 03 	sts	0x03A6, r28
     3da:	20 c0       	rjmp	.+64     	; 0x41c <free+0xaa>
     3dc:	12 96       	adiw	r26, 0x02	; 2
     3de:	8d 91       	ld	r24, X+
     3e0:	9c 91       	ld	r25, X
     3e2:	13 97       	sbiw	r26, 0x03	; 3
     3e4:	ad 01       	movw	r20, r26
     3e6:	00 97       	sbiw	r24, 0x00	; 0
     3e8:	11 f0       	breq	.+4      	; 0x3ee <free+0x7c>
     3ea:	dc 01       	movw	r26, r24
     3ec:	d3 cf       	rjmp	.-90     	; 0x394 <free+0x22>
     3ee:	fa 01       	movw	r30, r20
     3f0:	d3 83       	std	Z+3, r29	; 0x03
     3f2:	c2 83       	std	Z+2, r28	; 0x02
     3f4:	21 91       	ld	r18, Z+
     3f6:	31 91       	ld	r19, Z+
     3f8:	e2 0f       	add	r30, r18
     3fa:	f3 1f       	adc	r31, r19
     3fc:	ce 17       	cp	r28, r30
     3fe:	df 07       	cpc	r29, r31
     400:	69 f4       	brne	.+26     	; 0x41c <free+0xaa>
     402:	88 81       	ld	r24, Y
     404:	99 81       	ldd	r25, Y+1	; 0x01
     406:	28 0f       	add	r18, r24
     408:	39 1f       	adc	r19, r25
     40a:	2e 5f       	subi	r18, 0xFE	; 254
     40c:	3f 4f       	sbci	r19, 0xFF	; 255
     40e:	fa 01       	movw	r30, r20
     410:	31 83       	std	Z+1, r19	; 0x01
     412:	20 83       	st	Z, r18
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	93 83       	std	Z+3, r25	; 0x03
     41a:	82 83       	std	Z+2, r24	; 0x02
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <strtok>:
     422:	4a e7       	ldi	r20, 0x7A	; 122
     424:	52 e0       	ldi	r21, 0x02	; 2
     426:	0e 94 35 02 	call	0x46a	; 0x46a <strtok_r>
     42a:	08 95       	ret

0000042c <strcmp>:
     42c:	fb 01       	movw	r30, r22
     42e:	dc 01       	movw	r26, r24
     430:	8d 91       	ld	r24, X+
     432:	01 90       	ld	r0, Z+
     434:	80 19       	sub	r24, r0
     436:	01 10       	cpse	r0, r1
     438:	d9 f3       	breq	.-10     	; 0x430 <strcmp+0x4>
     43a:	99 0b       	sbc	r25, r25
     43c:	08 95       	ret

0000043e <strcpy>:
     43e:	fb 01       	movw	r30, r22
     440:	dc 01       	movw	r26, r24
     442:	01 90       	ld	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	00 20       	and	r0, r0
     448:	e1 f7       	brne	.-8      	; 0x442 <strcpy+0x4>
     44a:	08 95       	ret

0000044c <strncpy>:
     44c:	fb 01       	movw	r30, r22
     44e:	dc 01       	movw	r26, r24
     450:	41 50       	subi	r20, 0x01	; 1
     452:	50 40       	sbci	r21, 0x00	; 0
     454:	48 f0       	brcs	.+18     	; 0x468 <strncpy+0x1c>
     456:	01 90       	ld	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	00 20       	and	r0, r0
     45c:	c9 f7       	brne	.-14     	; 0x450 <strncpy+0x4>
     45e:	01 c0       	rjmp	.+2      	; 0x462 <strncpy+0x16>
     460:	1d 92       	st	X+, r1
     462:	41 50       	subi	r20, 0x01	; 1
     464:	50 40       	sbci	r21, 0x00	; 0
     466:	e0 f7       	brcc	.-8      	; 0x460 <strncpy+0x14>
     468:	08 95       	ret

0000046a <strtok_r>:
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	31 f4       	brne	.+12     	; 0x47a <strtok_r+0x10>
     46e:	da 01       	movw	r26, r20
     470:	8d 91       	ld	r24, X+
     472:	9c 91       	ld	r25, X
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	09 f4       	brne	.+2      	; 0x47a <strtok_r+0x10>
     478:	0e c0       	rjmp	.+28     	; 0x496 <strtok_r+0x2c>
     47a:	dc 01       	movw	r26, r24
     47c:	fb 01       	movw	r30, r22
     47e:	3d 91       	ld	r19, X+
     480:	21 91       	ld	r18, Z+
     482:	22 23       	and	r18, r18
     484:	19 f0       	breq	.+6      	; 0x48c <strtok_r+0x22>
     486:	32 17       	cp	r19, r18
     488:	c9 f3       	breq	.-14     	; 0x47c <strtok_r+0x12>
     48a:	fa cf       	rjmp	.-12     	; 0x480 <strtok_r+0x16>
     48c:	33 23       	and	r19, r19
     48e:	31 f4       	brne	.+12     	; 0x49c <strtok_r+0x32>
     490:	da 01       	movw	r26, r20
     492:	1d 92       	st	X+, r1
     494:	1c 92       	st	X, r1
     496:	88 27       	eor	r24, r24
     498:	99 27       	eor	r25, r25
     49a:	08 95       	ret
     49c:	11 97       	sbiw	r26, 0x01	; 1
     49e:	af 93       	push	r26
     4a0:	bf 93       	push	r27
     4a2:	fb 01       	movw	r30, r22
     4a4:	3d 91       	ld	r19, X+
     4a6:	21 91       	ld	r18, Z+
     4a8:	32 17       	cp	r19, r18
     4aa:	71 f4       	brne	.+28     	; 0x4c8 <strtok_r+0x5e>
     4ac:	33 23       	and	r19, r19
     4ae:	21 f4       	brne	.+8      	; 0x4b8 <strtok_r+0x4e>
     4b0:	88 27       	eor	r24, r24
     4b2:	99 27       	eor	r25, r25
     4b4:	11 97       	sbiw	r26, 0x01	; 1
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <strtok_r+0x52>
     4b8:	1e 92       	st	-X, r1
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	fa 01       	movw	r30, r20
     4be:	a1 93       	st	Z+, r26
     4c0:	b0 83       	st	Z, r27
     4c2:	9f 91       	pop	r25
     4c4:	8f 91       	pop	r24
     4c6:	08 95       	ret
     4c8:	22 23       	and	r18, r18
     4ca:	69 f7       	brne	.-38     	; 0x4a6 <strtok_r+0x3c>
     4cc:	ea cf       	rjmp	.-44     	; 0x4a2 <strtok_r+0x38>

000004ce <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
     4ce:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
     4d0:	8d e2       	ldi	r24, 0x2D	; 45
     4d2:	93 e0       	ldi	r25, 0x03	; 3
     4d4:	92 8b       	std	Z+18, r25	; 0x12
     4d6:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
     4d8:	76 83       	std	Z+6, r23	; 0x06
     4da:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
     4dc:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
     4de:	10 82       	st	Z, r1
  bitResolution = 9;
     4e0:	89 e0       	ldi	r24, 0x09	; 9
     4e2:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
     4e8:	83 83       	std	Z+3, r24	; 0x03
}
     4ea:	08 95       	ret

000004ec <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	fb 01       	movw	r30, r22
     50a:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
     50c:	99 81       	ldd	r25, Y+1	; 0x01
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	28 81       	ld	r18, Y
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	28 2b       	or	r18, r24
     516:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
     518:	e0 81       	ld	r30, Z
     51a:	e2 32       	cpi	r30, 0x22	; 34
     51c:	31 f0       	breq	.+12     	; 0x52a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
     51e:	e8 32       	cpi	r30, 0x28	; 40
     520:	21 f0       	breq	.+8      	; 0x52a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
     522:	e0 31       	cpi	r30, 0x10	; 16
     524:	09 f0       	breq	.+2      	; 0x528 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
     526:	84 c0       	rjmp	.+264    	; 0x630 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     528:	4b c0       	rjmp	.+150    	; 0x5c0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
     52a:	4c 81       	ldd	r20, Y+4	; 0x04
     52c:	4f 33       	cpi	r20, 0x3F	; 63
     52e:	29 f1       	breq	.+74     	; 0x57a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
     530:	40 34       	cpi	r20, 0x40	; 64
     532:	20 f4       	brcc	.+8      	; 0x53c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
     534:	4f 31       	cpi	r20, 0x1F	; 31
     536:	09 f0       	breq	.+2      	; 0x53a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
     538:	7b c0       	rjmp	.+246    	; 0x630 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     53a:	2f c0       	rjmp	.+94     	; 0x59a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
     53c:	4f 35       	cpi	r20, 0x5F	; 95
     53e:	79 f0       	breq	.+30     	; 0x55e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
     540:	4f 37       	cpi	r20, 0x7F	; 127
     542:	09 f0       	breq	.+2      	; 0x546 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
     544:	75 c0       	rjmp	.+234    	; 0x630 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
     546:	b9 01       	movw	r22, r18
     548:	88 27       	eor	r24, r24
     54a:	77 fd       	sbrc	r23, 7
     54c:	80 95       	com	r24
     54e:	98 2f       	mov	r25, r24
     550:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e8       	ldi	r20, 0x80	; 128
     55a:	5d e3       	ldi	r21, 0x3D	; 61
     55c:	2e c0       	rjmp	.+92     	; 0x5ba <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
     55e:	35 95       	asr	r19
     560:	27 95       	ror	r18
     562:	b9 01       	movw	r22, r18
     564:	88 27       	eor	r24, r24
     566:	77 fd       	sbrc	r23, 7
     568:	80 95       	com	r24
     56a:	98 2f       	mov	r25, r24
     56c:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	5e e3       	ldi	r21, 0x3E	; 62
     578:	20 c0       	rjmp	.+64     	; 0x5ba <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
     57a:	35 95       	asr	r19
     57c:	27 95       	ror	r18
     57e:	35 95       	asr	r19
     580:	27 95       	ror	r18
     582:	b9 01       	movw	r22, r18
     584:	88 27       	eor	r24, r24
     586:	77 fd       	sbrc	r23, 7
     588:	80 95       	com	r24
     58a:	98 2f       	mov	r25, r24
     58c:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e8       	ldi	r20, 0x80	; 128
     596:	5e e3       	ldi	r21, 0x3E	; 62
     598:	10 c0       	rjmp	.+32     	; 0x5ba <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	35 95       	asr	r19
     59e:	27 95       	ror	r18
     5a0:	9a 95       	dec	r25
     5a2:	e1 f7       	brne	.-8      	; 0x59c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
     5a4:	b9 01       	movw	r22, r18
     5a6:	88 27       	eor	r24, r24
     5a8:	77 fd       	sbrc	r23, 7
     5aa:	80 95       	com	r24
     5ac:	98 2f       	mov	r25, r24
     5ae:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	5f e3       	ldi	r21, 0x3F	; 63
     5ba:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
     5be:	32 c0       	rjmp	.+100    	; 0x624 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
     5c0:	ef 80       	ldd	r14, Y+7	; 0x07
     5c2:	35 95       	asr	r19
     5c4:	27 95       	ror	r18
     5c6:	b9 01       	movw	r22, r18
     5c8:	88 27       	eor	r24, r24
     5ca:	77 fd       	sbrc	r23, 7
     5cc:	80 95       	com	r24
     5ce:	98 2f       	mov	r25, r24
     5d0:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 e8       	ldi	r20, 0x80	; 128
     5da:	5e e3       	ldi	r21, 0x3E	; 62
     5dc:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
     5e0:	3b 01       	movw	r6, r22
     5e2:	4c 01       	movw	r8, r24
     5e4:	6e 2d       	mov	r22, r14
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	2e 81       	ldd	r18, Y+6	; 0x06
     5ea:	62 1b       	sub	r22, r18
     5ec:	71 09       	sbc	r23, r1
     5ee:	88 27       	eor	r24, r24
     5f0:	77 fd       	sbrc	r23, 7
     5f2:	80 95       	com	r24
     5f4:	98 2f       	mov	r25, r24
     5f6:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
     5fa:	5b 01       	movw	r10, r22
     5fc:	6c 01       	movw	r12, r24
     5fe:	ff 24       	eor	r15, r15
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	10 e0       	ldi	r17, 0x00	; 0
     604:	c8 01       	movw	r24, r16
     606:	b7 01       	movw	r22, r14
     608:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
     60c:	9b 01       	movw	r18, r22
     60e:	ac 01       	movw	r20, r24
     610:	c6 01       	movw	r24, r12
     612:	b5 01       	movw	r22, r10
     614:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
     61c:	c4 01       	movw	r24, r8
     61e:	b3 01       	movw	r22, r6
     620:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
      break;
  }
}
     628:	83 2f       	mov	r24, r19
     62a:	94 2f       	mov	r25, r20
     62c:	75 2f       	mov	r23, r21
     62e:	00 c0       	rjmp	.+0      	; 0x630 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     630:	26 2f       	mov	r18, r22
     632:	38 2f       	mov	r19, r24
     634:	49 2f       	mov	r20, r25
     636:	57 2f       	mov	r21, r23
     638:	b9 01       	movw	r22, r18
     63a:	ca 01       	movw	r24, r20
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	08 95       	ret

0000065a <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
     65a:	08 95       	ret

0000065c <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	8c 01       	movw	r16, r24
     666:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
     668:	fc 01       	movw	r30, r24
     66a:	85 81       	ldd	r24, Z+5	; 0x05
     66c:	96 81       	ldd	r25, Z+6	; 0x06
     66e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     672:	f8 01       	movw	r30, r16
     674:	85 81       	ldd	r24, Z+5	; 0x05
     676:	96 81       	ldd	r25, Z+6	; 0x06
     678:	b7 01       	movw	r22, r14
     67a:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN7OneWire6selectEPh>
  _wire->write(READPOWERSUPPLY);
     67e:	f8 01       	movw	r30, r16
     680:	85 81       	ldd	r24, Z+5	; 0x05
     682:	96 81       	ldd	r25, Z+6	; 0x06
     684:	64 eb       	ldi	r22, 0xB4	; 180
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
     68c:	f8 01       	movw	r30, r16
     68e:	85 81       	ldd	r24, Z+5	; 0x05
     690:	96 81       	ldd	r25, Z+6	; 0x06
     692:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire8read_bitEv>
     696:	f8 2e       	mov	r15, r24
  _wire->reset();
     698:	f8 01       	movw	r30, r16
     69a:	85 81       	ldd	r24, Z+5	; 0x05
     69c:	96 81       	ldd	r25, Z+6	; 0x06
     69e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	ff 20       	and	r15, r15
     6a6:	09 f4       	brne	.+2      	; 0x6aa <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	08 95       	ret

000006b4 <_ZN17DallasTemperature15writeScratchPadEPhPKh>:

  _wire->reset();
}

// writes device's scratch pad
void DallasTemperature::writeScratchPad(uint8_t* deviceAddress, const uint8_t* scratchPad)
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
     6c2:	8b 01       	movw	r16, r22
     6c4:	7a 01       	movw	r14, r20
{
  _wire->reset();
     6c6:	8d 81       	ldd	r24, Y+5	; 0x05
     6c8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	b8 01       	movw	r22, r16
     6d4:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN7OneWire6selectEPh>
  _wire->write(WRITESCRATCH);
     6d8:	8d 81       	ldd	r24, Y+5	; 0x05
     6da:	9e 81       	ldd	r25, Y+6	; 0x06
     6dc:	6e e4       	ldi	r22, 0x4E	; 78
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[HIGH_ALARM_TEMP]); // high alarm temp
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	f7 01       	movw	r30, r14
     6ea:	62 81       	ldd	r22, Z+2	; 0x02
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[LOW_ALARM_TEMP]); // low alarm temp
     6f2:	8d 81       	ldd	r24, Y+5	; 0x05
     6f4:	9e 81       	ldd	r25, Y+6	; 0x06
     6f6:	f7 01       	movw	r30, r14
     6f8:	63 81       	ldd	r22, Z+3	; 0x03
     6fa:	40 e0       	ldi	r20, 0x00	; 0
     6fc:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  // DS18S20 does not use the configuration register
  if (deviceAddress[0] != DS18S20MODEL) _wire->write(scratchPad[CONFIGURATION]); // configuration
     700:	f8 01       	movw	r30, r16
     702:	80 81       	ld	r24, Z
     704:	80 31       	cpi	r24, 0x10	; 16
     706:	39 f0       	breq	.+14     	; 0x716 <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x62>
     708:	8d 81       	ldd	r24, Y+5	; 0x05
     70a:	9e 81       	ldd	r25, Y+6	; 0x06
     70c:	f7 01       	movw	r30, r14
     70e:	64 81       	ldd	r22, Z+4	; 0x04
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  _wire->reset();
     716:	8d 81       	ldd	r24, Y+5	; 0x05
     718:	9e 81       	ldd	r25, Y+6	; 0x06
     71a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
  // save the newly written values to eeprom
  _wire->write(COPYSCRATCH, parasite);
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	68 e4       	ldi	r22, 0x48	; 72
     724:	48 81       	ld	r20, Y
     726:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
  if (parasite) delay(10); // 10ms delay
     72a:	88 81       	ld	r24, Y
     72c:	88 23       	and	r24, r24
     72e:	31 f0       	breq	.+12     	; 0x73c <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x88>
     730:	6a e0       	ldi	r22, 0x0A	; 10
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <delay>
  _wire->reset();
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
}
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	8c 01       	movw	r16, r24
     760:	6b 01       	movw	r12, r22
     762:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
     764:	fc 01       	movw	r30, r24
     766:	85 81       	ldd	r24, Z+5	; 0x05
     768:	96 81       	ldd	r25, Z+6	; 0x06
     76a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     76e:	f8 01       	movw	r30, r16
     770:	85 81       	ldd	r24, Z+5	; 0x05
     772:	96 81       	ldd	r25, Z+6	; 0x06
     774:	b6 01       	movw	r22, r12
     776:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN7OneWire6selectEPh>
  _wire->write(READSCRATCH);
     77a:	f8 01       	movw	r30, r16
     77c:	85 81       	ldd	r24, Z+5	; 0x05
     77e:	96 81       	ldd	r25, Z+6	; 0x06
     780:	6e eb       	ldi	r22, 0xBE	; 190
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
     788:	f8 01       	movw	r30, r16
     78a:	85 81       	ldd	r24, Z+5	; 0x05
     78c:	96 81       	ldd	r25, Z+6	; 0x06
     78e:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     792:	f7 01       	movw	r30, r14
     794:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
     796:	f8 01       	movw	r30, r16
     798:	85 81       	ldd	r24, Z+5	; 0x05
     79a:	96 81       	ldd	r25, Z+6	; 0x06
     79c:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7a0:	f7 01       	movw	r30, r14
     7a2:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
     7a4:	f8 01       	movw	r30, r16
     7a6:	85 81       	ldd	r24, Z+5	; 0x05
     7a8:	96 81       	ldd	r25, Z+6	; 0x06
     7aa:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7ae:	f7 01       	movw	r30, r14
     7b0:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
     7b2:	f8 01       	movw	r30, r16
     7b4:	85 81       	ldd	r24, Z+5	; 0x05
     7b6:	96 81       	ldd	r25, Z+6	; 0x06
     7b8:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7bc:	f7 01       	movw	r30, r14
     7be:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
     7c0:	f8 01       	movw	r30, r16
     7c2:	85 81       	ldd	r24, Z+5	; 0x05
     7c4:	96 81       	ldd	r25, Z+6	; 0x06
     7c6:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7ca:	f7 01       	movw	r30, r14
     7cc:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
     7ce:	f8 01       	movw	r30, r16
     7d0:	85 81       	ldd	r24, Z+5	; 0x05
     7d2:	96 81       	ldd	r25, Z+6	; 0x06
     7d4:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7d8:	f7 01       	movw	r30, r14
     7da:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
     7dc:	f8 01       	movw	r30, r16
     7de:	85 81       	ldd	r24, Z+5	; 0x05
     7e0:	96 81       	ldd	r25, Z+6	; 0x06
     7e2:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7e6:	f7 01       	movw	r30, r14
     7e8:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
     7ea:	f8 01       	movw	r30, r16
     7ec:	85 81       	ldd	r24, Z+5	; 0x05
     7ee:	96 81       	ldd	r25, Z+6	; 0x06
     7f0:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     7f4:	f7 01       	movw	r30, r14
     7f6:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
     7f8:	f8 01       	movw	r30, r16
     7fa:	85 81       	ldd	r24, Z+5	; 0x05
     7fc:	96 81       	ldd	r25, Z+6	; 0x06
     7fe:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire4readEv>
     802:	f7 01       	movw	r30, r14
     804:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
     806:	f8 01       	movw	r30, r16
     808:	85 81       	ldd	r24, Z+5	; 0x05
     80a:	96 81       	ldd	r25, Z+6	; 0x06
     80c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
}
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	df 90       	pop	r13
     81a:	cf 90       	pop	r12
     81c:	08 95       	ret

0000081e <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
     81e:	df 93       	push	r29
     820:	cf 93       	push	r28
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	29 97       	sbiw	r28, 0x09	; 9
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
     832:	ae 01       	movw	r20, r28
     834:	4f 5f       	subi	r20, 0xFF	; 255
     836:	5f 4f       	sbci	r21, 0xFF	; 255
     838:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN17DallasTemperature14readScratchPadEPhS0_>
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	81 11       	cpse	r24, r1
     840:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
     842:	29 96       	adiw	r28, 0x09	; 9
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	08 95       	ret

00000854 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ec 01       	movw	r28, r24
     866:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
     868:	45 2b       	or	r20, r21
     86a:	e1 f0       	breq	.+56     	; 0x8a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	88 23       	and	r24, r24
     870:	c9 f0       	breq	.+50     	; 0x8a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     872:	88 81       	ld	r24, Y
     874:	88 23       	and	r24, r24
     876:	b1 f4       	brne	.+44     	; 0x8a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
     878:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
     87c:	7b 01       	movw	r14, r22
     87e:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
     880:	ce 01       	movw	r24, r28
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	0e 94 0f 04 	call	0x81e	; 0x81e <_ZN17DallasTemperature21isConversionAvailableEPh>
     88a:	88 23       	and	r24, r24
     88c:	59 f4       	brne	.+22     	; 0x8a4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     88e:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
     892:	6e 19       	sub	r22, r14
     894:	7f 09       	sbc	r23, r15
     896:	80 0b       	sbc	r24, r16
     898:	91 0b       	sbc	r25, r17
     89a:	6e 5e       	subi	r22, 0xEE	; 238
     89c:	72 40       	sbci	r23, 0x02	; 2
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	70 f3       	brcs	.-36     	; 0x880 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
     8a4:	f6 01       	movw	r30, r12
     8a6:	60 81       	ld	r22, Z
     8a8:	69 30       	cpi	r22, 0x09	; 9
     8aa:	39 f0       	breq	.+14     	; 0x8ba <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
     8ac:	69 30       	cpi	r22, 0x09	; 9
     8ae:	a0 f0       	brcs	.+40     	; 0x8d8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
     8b0:	6a 30       	cpi	r22, 0x0A	; 10
     8b2:	41 f0       	breq	.+16     	; 0x8c4 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
     8b4:	6b 30       	cpi	r22, 0x0B	; 11
     8b6:	81 f4       	brne	.+32     	; 0x8d8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
     8b8:	0a c0       	rjmp	.+20     	; 0x8ce <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
     8ba:	6e e5       	ldi	r22, 0x5E	; 94
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
     8c4:	6c eb       	ldi	r22, 0xBC	; 188
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
     8ce:	67 e7       	ldi	r22, 0x77	; 119
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
     8d8:	6e ee       	ldi	r22, 0xEE	; 238
     8da:	72 e0       	ldi	r23, 0x02	; 2
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <delay>
	      break;
	  }

}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	08 95       	ret

000008f6 <_ZN17DallasTemperature19requestTemperaturesEv>:
	return scratchPad[0];
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ec 01       	movw	r28, r24
{
  _wire->reset();
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	9e 81       	ldd	r25, Y+6	; 0x06
     900:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
  _wire->skip();
     904:	8d 81       	ldd	r24, Y+5	; 0x05
     906:	9e 81       	ldd	r25, Y+6	; 0x06
     908:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	64 e4       	ldi	r22, 0x44	; 68
     912:	48 81       	ld	r20, Y
     914:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
     918:	8a 81       	ldd	r24, Y+2	; 0x02
     91a:	88 23       	and	r24, r24
     91c:	39 f0       	breq	.+14     	; 0x92c <__stack+0x2d>
  blockTillConversionComplete(&bitResolution, 0);
     91e:	ce 01       	movw	r24, r28
     920:	21 96       	adiw	r28, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	0e 94 2a 04 	call	0x854	; 0x854 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
     938:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
     93c:	c8 01       	movw	r24, r16
     93e:	68 e0       	ldi	r22, 0x08	; 8
     940:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN7OneWire4crc8EPhh>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	f8 01       	movw	r30, r16
     948:	90 85       	ldd	r25, Z+8	; 0x08
     94a:	89 17       	cp	r24, r25
     94c:	09 f4       	brne	.+2      	; 0x950 <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
     94e:	21 e0       	ldi	r18, 0x01	; 1
}
     950:	82 2f       	mov	r24, r18
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	df 93       	push	r29
     966:	cf 93       	push	r28
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	29 97       	sbiw	r28, 0x09	; 9
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	8c 01       	movw	r16, r24
     97a:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
     97c:	6e 01       	movw	r12, r28
     97e:	08 94       	sec
     980:	c1 1c       	adc	r12, r1
     982:	d1 1c       	adc	r13, r1
     984:	a6 01       	movw	r20, r12
     986:	0e 94 99 04 	call	0x932	; 0x932 <_ZN17DallasTemperature11isConnectedEPhS0_>
     98a:	88 23       	and	r24, r24
     98c:	29 f4       	brne	.+10     	; 0x998 <_ZN17DallasTemperature8getTempCEPh+0x40>
     98e:	60 e0       	ldi	r22, 0x00	; 0
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	8e ef       	ldi	r24, 0xFE	; 254
     994:	92 ec       	ldi	r25, 0xC2	; 194
     996:	05 c0       	rjmp	.+10     	; 0x9a2 <_ZN17DallasTemperature8getTempCEPh+0x4a>
     998:	c8 01       	movw	r24, r16
     99a:	b7 01       	movw	r22, r14
     99c:	a6 01       	movw	r20, r12
     99e:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
     9a2:	29 96       	adiw	r28, 0x09	; 9
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	cf 91       	pop	r28
     9b0:	df 91       	pop	r29
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	29 97       	sbiw	r28, 0x09	; 9
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	9c 01       	movw	r18, r24
     9d6:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     9d8:	80 81       	ld	r24, Z
     9da:	80 31       	cpi	r24, 0x10	; 16
     9dc:	d9 f0       	breq	.+54     	; 0xa14 <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     9de:	c9 01       	movw	r24, r18
     9e0:	ae 01       	movw	r20, r28
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	0e 94 99 04 	call	0x932	; 0x932 <_ZN17DallasTemperature11isConnectedEPhS0_>
     9ea:	88 23       	and	r24, r24
     9ec:	a9 f0       	breq	.+42     	; 0xa18 <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
     9ee:	8d 81       	ldd	r24, Y+5	; 0x05
     9f0:	8f 33       	cpi	r24, 0x3F	; 63
     9f2:	71 f0       	breq	.+28     	; 0xa10 <_ZN17DallasTemperature13getResolutionEPh+0x50>
     9f4:	80 34       	cpi	r24, 0x40	; 64
     9f6:	18 f4       	brcc	.+6      	; 0x9fe <_ZN17DallasTemperature13getResolutionEPh+0x3e>
     9f8:	8f 31       	cpi	r24, 0x1F	; 31
     9fa:	71 f4       	brne	.+28     	; 0xa18 <_ZN17DallasTemperature13getResolutionEPh+0x58>
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <_ZN17DallasTemperature13getResolutionEPh+0x54>
     9fe:	8f 35       	cpi	r24, 0x5F	; 95
     a00:	19 f0       	breq	.+6      	; 0xa08 <_ZN17DallasTemperature13getResolutionEPh+0x48>
     a02:	8f 37       	cpi	r24, 0x7F	; 127
     a04:	49 f4       	brne	.+18     	; 0xa18 <_ZN17DallasTemperature13getResolutionEPh+0x58>
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <_ZN17DallasTemperature13getResolutionEPh+0x4c>
     a08:	8b e0       	ldi	r24, 0x0B	; 11
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     a0c:	8c e0       	ldi	r24, 0x0C	; 12
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     a10:	8a e0       	ldi	r24, 0x0A	; 10
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
     a14:	89 e0       	ldi	r24, 0x09	; 9
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     a18:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
     a1a:	29 96       	adiw	r28, 0x09	; 9
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <_ZN17DallasTemperature13setResolutionEPhh>:
  }
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used. 
bool DallasTemperature::setResolution(uint8_t* deviceAddress, uint8_t newResolution)
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	1f 93       	push	r17
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	29 97       	sbiw	r28, 0x09	; 9
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	6c 01       	movw	r12, r24
     a4c:	7b 01       	movw	r14, r22
     a4e:	14 2f       	mov	r17, r20
{
  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     a50:	ae 01       	movw	r20, r28
     a52:	4f 5f       	subi	r20, 0xFF	; 255
     a54:	5f 4f       	sbci	r21, 0xFF	; 255
     a56:	0e 94 99 04 	call	0x932	; 0x932 <_ZN17DallasTemperature11isConnectedEPhS0_>
     a5a:	88 23       	and	r24, r24
     a5c:	e1 f0       	breq	.+56     	; 0xa96 <_ZN17DallasTemperature13setResolutionEPhh+0x6a>
  {
    // DS18S20 has a fixed 9-bit resolution
    if (deviceAddress[0] != DS18S20MODEL)
     a5e:	f7 01       	movw	r30, r14
     a60:	80 81       	ld	r24, Z
     a62:	80 31       	cpi	r24, 0x10	; 16
     a64:	b9 f0       	breq	.+46     	; 0xa94 <_ZN17DallasTemperature13setResolutionEPhh+0x68>
    {
      switch (newResolution)
     a66:	1a 30       	cpi	r17, 0x0A	; 10
     a68:	51 f0       	breq	.+20     	; 0xa7e <_ZN17DallasTemperature13setResolutionEPhh+0x52>
     a6a:	1a 30       	cpi	r17, 0x0A	; 10
     a6c:	50 f0       	brcs	.+20     	; 0xa82 <_ZN17DallasTemperature13setResolutionEPhh+0x56>
     a6e:	1b 30       	cpi	r17, 0x0B	; 11
     a70:	21 f0       	breq	.+8      	; 0xa7a <_ZN17DallasTemperature13setResolutionEPhh+0x4e>
     a72:	1c 30       	cpi	r17, 0x0C	; 12
     a74:	31 f4       	brne	.+12     	; 0xa82 <_ZN17DallasTemperature13setResolutionEPhh+0x56>
      {
        case 12:
          scratchPad[CONFIGURATION] = TEMP_12_BIT;
     a76:	8f e7       	ldi	r24, 0x7F	; 127
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 11:
          scratchPad[CONFIGURATION] = TEMP_11_BIT;
     a7a:	8f e5       	ldi	r24, 0x5F	; 95
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 10:
          scratchPad[CONFIGURATION] = TEMP_10_BIT;
     a7e:	8f e3       	ldi	r24, 0x3F	; 63
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 9:
        default:
          scratchPad[CONFIGURATION] = TEMP_9_BIT;
     a82:	8f e1       	ldi	r24, 0x1F	; 31
     a84:	8d 83       	std	Y+5, r24	; 0x05
          break;
      }
      writeScratchPad(deviceAddress, scratchPad);
     a86:	c6 01       	movw	r24, r12
     a88:	b7 01       	movw	r22, r14
     a8a:	ae 01       	movw	r20, r28
     a8c:	4f 5f       	subi	r20, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
     a94:	81 e0       	ldi	r24, 0x01	; 1
    }
	return true;  // new value set
  }
  return false;
}
     a96:	29 96       	adiw	r28, 0x09	; 9
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	cf 91       	pop	r28
     aa4:	df 91       	pop	r29
     aa6:	1f 91       	pop	r17
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	cf 90       	pop	r12
     ab0:	08 95       	ret

00000ab2 <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
     ab8:	cb 01       	movw	r24, r22
     aba:	67 e0       	ldi	r22, 0x07	; 7
     abc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <_ZN7OneWire4crc8EPhh>
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	f8 01       	movw	r30, r16
     ac4:	97 81       	ldd	r25, Z+7	; 0x07
     ac6:	89 17       	cp	r24, r25
     ac8:	09 f4       	brne	.+2      	; 0xacc <_ZN17DallasTemperature12validAddressEPh+0x1a>
     aca:	21 e0       	ldi	r18, 0x01	; 1
}
     acc:	82 2f       	mov	r24, r18
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	08 95       	ret

00000ad4 <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	7b 01       	movw	r14, r22
     ae4:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	9e 81       	ldd	r25, Y+6	; 0x06
     aea:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN7OneWire12reset_searchEv>
     aee:	10 e0       	ldi	r17, 0x00	; 0
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     af2:	ce 01       	movw	r24, r28
     af4:	b7 01       	movw	r22, r14
     af6:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN17DallasTemperature12validAddressEPh>
     afa:	88 23       	and	r24, r24
     afc:	a9 f0       	breq	.+42     	; 0xb28 <_ZN17DallasTemperature10getAddressEPhh+0x54>
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     b00:	8d 81       	ldd	r24, Y+5	; 0x05
     b02:	9e 81       	ldd	r25, Y+6	; 0x06
     b04:	b7 01       	movw	r22, r14
     b06:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN7OneWire6searchEPh>
     b0a:	88 23       	and	r24, r24
     b0c:	29 f0       	breq	.+10     	; 0xb18 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     b0e:	10 17       	cp	r17, r16
     b10:	59 f4       	brne	.+22     	; 0xb28 <_ZN17DallasTemperature10getAddressEPhh+0x54>
     b12:	ef cf       	rjmp	.-34     	; 0xaf2 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <_ZN17DallasTemperature10getAddressEPhh+0x46>
     b18:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
     b28:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     b2a:	01 17       	cp	r16, r17
     b2c:	a8 f3       	brcs	.-22     	; 0xb18 <_ZN17DallasTemperature10getAddressEPhh+0x44>
     b2e:	e8 cf       	rjmp	.-48     	; 0xb00 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00000b30 <_ZN17DallasTemperature15getTempCByIndexEh>:
  getAddress(deviceAddress, deviceIndex);
  return requestTemperaturesByAddress(deviceAddress);
}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex)
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	28 97       	sbiw	r28, 0x08	; 8
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	7c 01       	movw	r14, r24
     b4e:	46 2f       	mov	r20, r22
{
  DeviceAddress deviceAddress;
  getAddress(deviceAddress, deviceIndex);
     b50:	8e 01       	movw	r16, r28
     b52:	0f 5f       	subi	r16, 0xFF	; 255
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	b8 01       	movw	r22, r16
     b58:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN17DallasTemperature10getAddressEPhh>
  return getTempC((uint8_t*)deviceAddress);
     b5c:	c7 01       	movw	r24, r14
     b5e:	b8 01       	movw	r22, r16
     b60:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN17DallasTemperature8getTempCEPh>
}
     b64:	28 96       	adiw	r28, 0x08	; 8
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <_ZN17DallasTemperature13setResolutionEh>:
}


// set resolution of all devices to 9, 10, 11, or 12 bits
// if new resolution is out of range, it is constrained.
void DallasTemperature::setResolution(uint8_t newResolution)
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	28 97       	sbiw	r28, 0x08	; 8
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	7c 01       	movw	r14, r24
{
  bitResolution = constrain(newResolution, 9, 12);
     ba0:	69 30       	cpi	r22, 0x09	; 9
     ba2:	10 f4       	brcc	.+4      	; 0xba8 <_ZN17DallasTemperature13setResolutionEh+0x2a>
     ba4:	69 e0       	ldi	r22, 0x09	; 9
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <_ZN17DallasTemperature13setResolutionEh+0x30>
     ba8:	6d 30       	cpi	r22, 0x0D	; 13
     baa:	08 f0       	brcs	.+2      	; 0xbae <_ZN17DallasTemperature13setResolutionEh+0x30>
     bac:	6c e0       	ldi	r22, 0x0C	; 12
     bae:	f7 01       	movw	r30, r14
     bb0:	61 83       	std	Z+1, r22	; 0x01
     bb2:	00 e0       	ldi	r16, 0x00	; 0
     bb4:	10 e0       	ldi	r17, 0x00	; 0
  DeviceAddress deviceAddress;
  for (int i=0; i<devices; i++)
  {
    getAddress(deviceAddress, i);
     bb6:	6e 01       	movw	r12, r28
     bb8:	08 94       	sec
     bba:	c1 1c       	adc	r12, r1
     bbc:	d1 1c       	adc	r13, r1
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <_ZN17DallasTemperature13setResolutionEh+0x5c>
     bc0:	c7 01       	movw	r24, r14
     bc2:	b6 01       	movw	r22, r12
     bc4:	40 2f       	mov	r20, r16
     bc6:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN17DallasTemperature10getAddressEPhh>
	setResolution(deviceAddress, bitResolution);
     bca:	c7 01       	movw	r24, r14
     bcc:	b6 01       	movw	r22, r12
     bce:	f7 01       	movw	r30, r14
     bd0:	41 81       	ldd	r20, Z+1	; 0x01
     bd2:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN17DallasTemperature13setResolutionEPhh>
// if new resolution is out of range, it is constrained.
void DallasTemperature::setResolution(uint8_t newResolution)
{
  bitResolution = constrain(newResolution, 9, 12);
  DeviceAddress deviceAddress;
  for (int i=0; i<devices; i++)
     bd6:	0f 5f       	subi	r16, 0xFF	; 255
     bd8:	1f 4f       	sbci	r17, 0xFF	; 255
     bda:	f7 01       	movw	r30, r14
     bdc:	84 81       	ldd	r24, Z+4	; 0x04
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 17       	cp	r16, r24
     be2:	19 07       	cpc	r17, r25
     be4:	6c f3       	brlt	.-38     	; 0xbc0 <_ZN17DallasTemperature13setResolutionEh+0x42>
  {
    getAddress(deviceAddress, i);
	setResolution(deviceAddress, bitResolution);
  }
}
     be6:	28 96       	adiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	08 95       	ret

00000c04 <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
     c04:	af 92       	push	r10
     c06:	bf 92       	push	r11
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ef 92       	push	r14
     c0e:	ff 92       	push	r15
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	61 97       	sbiw	r28, 0x11	; 17
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
     c2a:	fc 01       	movw	r30, r24
     c2c:	85 81       	ldd	r24, Z+5	; 0x05
     c2e:	96 81       	ldd	r25, Z+6	; 0x06
     c30:	0e 94 50 08 	call	0x10a0	; 0x10a0 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
     c34:	f7 01       	movw	r30, r14
     c36:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
     c38:	6e 01       	movw	r12, r28
     c3a:	08 94       	sec
     c3c:	c1 1c       	adc	r12, r1
     c3e:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     c40:	79 e0       	ldi	r23, 0x09	; 9
     c42:	a7 2e       	mov	r10, r23
     c44:	b1 2c       	mov	r11, r1
     c46:	ac 0e       	add	r10, r28
     c48:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     c4a:	01 e0       	ldi	r16, 0x01	; 1
     c4c:	2b c0       	rjmp	.+86     	; 0xca4 <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 59 05 	call	0xab2	; 0xab2 <_ZN17DallasTemperature12validAddressEPh>
     c56:	88 23       	and	r24, r24
     c58:	29 f1       	breq	.+74     	; 0xca4 <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     c5a:	f7 01       	movw	r30, r14
     c5c:	80 81       	ld	r24, Z
     c5e:	88 23       	and	r24, r24
     c60:	41 f4       	brne	.+16     	; 0xc72 <_ZN17DallasTemperature5beginEv+0x6e>
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 2e 03 	call	0x65c	; 0x65c <_ZN17DallasTemperature15readPowerSupplyEPh>
     c6a:	88 23       	and	r24, r24
     c6c:	11 f0       	breq	.+4      	; 0xc72 <_ZN17DallasTemperature5beginEv+0x6e>
     c6e:	f7 01       	movw	r30, r14
     c70:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	a5 01       	movw	r20, r10
     c78:	0e 94 a9 03 	call	0x752	; 0x752 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
     c7c:	f7 01       	movw	r30, r14
     c7e:	11 81       	ldd	r17, Z+1	; 0x01
     c80:	c7 01       	movw	r24, r14
     c82:	b6 01       	movw	r22, r12
     c84:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN17DallasTemperature13getResolutionEPh>
     c88:	81 17       	cp	r24, r17
     c8a:	18 f4       	brcc	.+6      	; 0xc92 <_ZN17DallasTemperature5beginEv+0x8e>
     c8c:	f7 01       	movw	r30, r14
     c8e:	81 81       	ldd	r24, Z+1	; 0x01
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <_ZN17DallasTemperature5beginEv+0x96>
     c92:	c7 01       	movw	r24, r14
     c94:	b6 01       	movw	r22, r12
     c96:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <_ZN17DallasTemperature13getResolutionEPh>
     c9a:	f7 01       	movw	r30, r14
     c9c:	81 83       	std	Z+1, r24	; 0x01

      devices++;
     c9e:	84 81       	ldd	r24, Z+4	; 0x04
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     ca4:	f7 01       	movw	r30, r14
     ca6:	85 81       	ldd	r24, Z+5	; 0x05
     ca8:	96 81       	ldd	r25, Z+6	; 0x06
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN7OneWire6searchEPh>
     cb0:	88 23       	and	r24, r24
     cb2:	69 f6       	brne	.-102    	; 0xc4e <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
     cb4:	61 96       	adiw	r28, 0x11	; 17
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	08 95       	ret

00000cd6 <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t time, tmElements_t &tm){
     cd6:	8f 92       	push	r8
     cd8:	9f 92       	push	r9
     cda:	af 92       	push	r10
     cdc:	bf 92       	push	r11
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	7b 01       	movw	r14, r22
     cf0:	8c 01       	movw	r16, r24
     cf2:	ea 01       	movw	r28, r20

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;
  
  tm.Second = time % 60;
     cf4:	2c e3       	ldi	r18, 0x3C	; 60
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d00:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
     d02:	c8 01       	movw	r24, r16
     d04:	b7 01       	movw	r22, r14
     d06:	2c e3       	ldi	r18, 0x3C	; 60
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d12:	12 2f       	mov	r17, r18
     d14:	03 2f       	mov	r16, r19
     d16:	f4 2e       	mov	r15, r20
     d18:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
     d1a:	62 2f       	mov	r22, r18
     d1c:	73 2f       	mov	r23, r19
     d1e:	84 2f       	mov	r24, r20
     d20:	95 2f       	mov	r25, r21
     d22:	2c e3       	ldi	r18, 0x3C	; 60
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d2e:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
     d30:	61 2f       	mov	r22, r17
     d32:	70 2f       	mov	r23, r16
     d34:	8f 2d       	mov	r24, r15
     d36:	9e 2d       	mov	r25, r14
     d38:	2c e3       	ldi	r18, 0x3C	; 60
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d44:	12 2f       	mov	r17, r18
     d46:	03 2f       	mov	r16, r19
     d48:	f4 2e       	mov	r15, r20
     d4a:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
     d4c:	62 2f       	mov	r22, r18
     d4e:	73 2f       	mov	r23, r19
     d50:	84 2f       	mov	r24, r20
     d52:	95 2f       	mov	r25, r21
     d54:	28 e1       	ldi	r18, 0x18	; 24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d60:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
     d62:	61 2f       	mov	r22, r17
     d64:	70 2f       	mov	r23, r16
     d66:	8f 2d       	mov	r24, r15
     d68:	9e 2d       	mov	r25, r14
     d6a:	28 e1       	ldi	r18, 0x18	; 24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d76:	79 01       	movw	r14, r18
     d78:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     d7a:	c8 01       	movw	r24, r16
     d7c:	b7 01       	movw	r22, r14
     d7e:	6c 5f       	subi	r22, 0xFC	; 252
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	8f 4f       	sbci	r24, 0xFF	; 255
     d84:	9f 4f       	sbci	r25, 0xFF	; 255
     d86:	27 e0       	ldi	r18, 0x07	; 7
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	6b 83       	std	Y+3, r22	; 0x03
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	aa 24       	eor	r10, r10
     d9a:	bb 24       	eor	r11, r11
     d9c:	65 01       	movw	r12, r10
     d9e:	01 c0       	rjmp	.+2      	; 0xda2 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
     da0:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     da2:	82 2e       	mov	r8, r18
     da4:	99 24       	eor	r9, r9
     da6:	f4 01       	movw	r30, r8
     da8:	ee 54       	subi	r30, 0x4E	; 78
     daa:	f8 4f       	sbci	r31, 0xF8	; 248
     dac:	cf 01       	movw	r24, r30
     dae:	83 70       	andi	r24, 0x03	; 3
     db0:	90 70       	andi	r25, 0x00	; 0
     db2:	89 2b       	or	r24, r25
     db4:	99 f4       	brne	.+38     	; 0xddc <_Z9breakTimemR12tmElements_t+0x106>
     db6:	cf 01       	movw	r24, r30
     db8:	64 e6       	ldi	r22, 0x64	; 100
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     dc0:	89 2b       	or	r24, r25
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <_Z9breakTimemR12tmElements_t+0xfc>
     dc4:	cf 01       	movw	r24, r30
     dc6:	60 e9       	ldi	r22, 0x90	; 144
     dc8:	71 e0       	ldi	r23, 0x01	; 1
     dca:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     dce:	89 2b       	or	r24, r25
     dd0:	29 f4       	brne	.+10     	; 0xddc <_Z9breakTimemR12tmElements_t+0x106>
     dd2:	8e e6       	ldi	r24, 0x6E	; 110
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <_Z9breakTimemR12tmElements_t+0x10e>
     ddc:	8d e6       	ldi	r24, 0x6D	; 109
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	a8 0e       	add	r10, r24
     de6:	b9 1e       	adc	r11, r25
     de8:	ca 1e       	adc	r12, r26
     dea:	db 1e       	adc	r13, r27
     dec:	c5 01       	movw	r24, r10
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e8 16       	cp	r14, r24
     df4:	f9 06       	cpc	r15, r25
     df6:	0a 07       	cpc	r16, r26
     df8:	1b 07       	cpc	r17, r27
     dfa:	90 f6       	brcc	.-92     	; 0xda0 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
     dfc:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     dfe:	f4 01       	movw	r30, r8
     e00:	ee 54       	subi	r30, 0x4E	; 78
     e02:	f8 4f       	sbci	r31, 0xF8	; 248
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	88 2e       	mov	r8, r24
     e08:	91 2c       	mov	r9, r1
     e0a:	8e 22       	and	r8, r30
     e0c:	9f 22       	and	r9, r31
     e0e:	81 14       	cp	r8, r1
     e10:	91 04       	cpc	r9, r1
     e12:	99 f4       	brne	.+38     	; 0xe3a <_Z9breakTimemR12tmElements_t+0x164>
     e14:	cf 01       	movw	r24, r30
     e16:	64 e6       	ldi	r22, 0x64	; 100
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     e1e:	89 2b       	or	r24, r25
     e20:	39 f4       	brne	.+14     	; 0xe30 <_Z9breakTimemR12tmElements_t+0x15a>
     e22:	cf 01       	movw	r24, r30
     e24:	60 e9       	ldi	r22, 0x90	; 144
     e26:	71 e0       	ldi	r23, 0x01	; 1
     e28:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     e2c:	89 2b       	or	r24, r25
     e2e:	29 f4       	brne	.+10     	; 0xe3a <_Z9breakTimemR12tmElements_t+0x164>
     e30:	8e e6       	ldi	r24, 0x6E	; 110
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <_Z9breakTimemR12tmElements_t+0x16c>
     e3a:	8d e6       	ldi	r24, 0x6D	; 109
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
     e42:	a8 1a       	sub	r10, r24
     e44:	b9 0a       	sbc	r11, r25
     e46:	ca 0a       	sbc	r12, r26
     e48:	db 0a       	sbc	r13, r27
     e4a:	98 01       	movw	r18, r16
     e4c:	87 01       	movw	r16, r14
     e4e:	0a 19       	sub	r16, r10
     e50:	1b 09       	sbc	r17, r11
     e52:	2c 09       	sbc	r18, r12
     e54:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     e56:	cf 01       	movw	r24, r30
     e58:	64 e6       	ldi	r22, 0x64	; 100
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     e60:	7c 01       	movw	r14, r24
     e62:	cf 01       	movw	r24, r30
     e64:	60 e9       	ldi	r22, 0x90	; 144
     e66:	71 e0       	ldi	r23, 0x01	; 1
     e68:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
     e6c:	ac 01       	movw	r20, r24
     e6e:	ee e2       	ldi	r30, 0x2E	; 46
     e70:	f2 e0       	ldi	r31, 0x02	; 2
     e72:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
     e74:	61 30       	cpi	r22, 0x01	; 1
     e76:	51 f4       	brne	.+20     	; 0xe8c <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
     e78:	81 14       	cp	r8, r1
     e7a:	91 04       	cpc	r9, r1
     e7c:	49 f4       	brne	.+18     	; 0xe90 <_Z9breakTimemR12tmElements_t+0x1ba>
     e7e:	e1 14       	cp	r14, r1
     e80:	f1 04       	cpc	r15, r1
     e82:	41 f4       	brne	.+16     	; 0xe94 <_Z9breakTimemR12tmElements_t+0x1be>
     e84:	41 15       	cp	r20, r1
     e86:	51 05       	cpc	r21, r1
     e88:	29 f0       	breq	.+10     	; 0xe94 <_Z9breakTimemR12tmElements_t+0x1be>
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     e8c:	80 81       	ld	r24, Z
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <_Z9breakTimemR12tmElements_t+0x1c0>
     e90:	8c e1       	ldi	r24, 0x1C	; 28
     e92:	01 c0       	rjmp	.+2      	; 0xe96 <_Z9breakTimemR12tmElements_t+0x1c0>
     e94:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	08 17       	cp	r16, r24
     e9e:	19 07       	cpc	r17, r25
     ea0:	2a 07       	cpc	r18, r26
     ea2:	3b 07       	cpc	r19, r27
     ea4:	40 f0       	brcs	.+16     	; 0xeb6 <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
     ea6:	08 1b       	sub	r16, r24
     ea8:	19 0b       	sbc	r17, r25
     eaa:	2a 0b       	sbc	r18, r26
     eac:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
     eae:	6f 5f       	subi	r22, 0xFF	; 255
     eb0:	31 96       	adiw	r30, 0x01	; 1
     eb2:	6c 30       	cpi	r22, 0x0C	; 12
     eb4:	f9 f6       	brne	.-66     	; 0xe74 <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     eb6:	6f 5f       	subi	r22, 0xFF	; 255
     eb8:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
     eba:	80 2f       	mov	r24, r16
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	8c 83       	std	Y+4, r24	; 0x04
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	08 95       	ret

00000eda <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t       cacheTime;   // the time the cache was updated
static time_t       syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache( time_t t){
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	7b 01       	movw	r14, r22
     ee4:	8c 01       	movw	r16, r24
  if( t != cacheTime)
     ee6:	80 91 93 02 	lds	r24, 0x0293
     eea:	90 91 94 02 	lds	r25, 0x0294
     eee:	a0 91 95 02 	lds	r26, 0x0295
     ef2:	b0 91 96 02 	lds	r27, 0x0296
     ef6:	e8 16       	cp	r14, r24
     ef8:	f9 06       	cpc	r15, r25
     efa:	0a 07       	cpc	r16, r26
     efc:	1b 07       	cpc	r17, r27
     efe:	71 f0       	breq	.+28     	; 0xf1c <_Z12refreshCachem+0x42>
  {
    breakTime(t, tm); 
     f00:	c8 01       	movw	r24, r16
     f02:	b7 01       	movw	r22, r14
     f04:	48 e8       	ldi	r20, 0x88	; 136
     f06:	52 e0       	ldi	r21, 0x02	; 2
     f08:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
     f0c:	e0 92 93 02 	sts	0x0293, r14
     f10:	f0 92 94 02 	sts	0x0294, r15
     f14:	00 93 95 02 	sts	0x0295, r16
     f18:	10 93 96 02 	sts	0x0296, r17
  }
}
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	08 95       	ret

00000f26 <_Z10timeStatusv>:
  sysTime += adjustment;
}

timeStatus_t timeStatus(){ // indicates if time has been set and recently synchronized
  return Status;
}
     f26:	80 91 86 02 	lds	r24, 0x0286
     f2a:	90 91 87 02 	lds	r25, 0x0287
     f2e:	08 95       	ret

00000f30 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = t;  
     f30:	60 93 7e 02 	sts	0x027E, r22
     f34:	70 93 7f 02 	sts	0x027F, r23
     f38:	80 93 80 02 	sts	0x0280, r24
     f3c:	90 93 81 02 	sts	0x0281, r25
  nextSyncTime = t + syncInterval;
     f40:	20 91 29 02 	lds	r18, 0x0229
     f44:	30 91 2a 02 	lds	r19, 0x022A
     f48:	40 91 2b 02 	lds	r20, 0x022B
     f4c:	50 91 2c 02 	lds	r21, 0x022C
     f50:	26 0f       	add	r18, r22
     f52:	37 1f       	adc	r19, r23
     f54:	48 1f       	adc	r20, r24
     f56:	59 1f       	adc	r21, r25
     f58:	20 93 82 02 	sts	0x0282, r18
     f5c:	30 93 83 02 	sts	0x0283, r19
     f60:	40 93 84 02 	sts	0x0284, r20
     f64:	50 93 85 02 	sts	0x0285, r21
  Status = timeSet; 
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 87 02 	sts	0x0287, r25
     f70:	80 93 86 02 	sts	0x0286, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     f74:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
     f78:	60 93 8f 02 	sts	0x028F, r22
     f7c:	70 93 90 02 	sts	0x0290, r23
     f80:	80 93 91 02 	sts	0x0291, r24
     f84:	90 93 92 02 	sts	0x0292, r25
} 
     f88:	08 95       	ret

00000f8a <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now(){
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	1c c0       	rjmp	.+56     	; 0xfcc <_Z3nowv+0x42>
  while( millis() - prevMillis >= 1000){      
    sysTime++;
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	3f 4f       	sbci	r19, 0xFF	; 255
     f98:	4f 4f       	sbci	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
     f9c:	20 93 7e 02 	sts	0x027E, r18
     fa0:	30 93 7f 02 	sts	0x027F, r19
     fa4:	40 93 80 02 	sts	0x0280, r20
     fa8:	50 93 81 02 	sts	0x0281, r21
    prevMillis += 1000;	
     fac:	88 ee       	ldi	r24, 0xE8	; 232
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e8 0e       	add	r14, r24
     fb6:	f9 1e       	adc	r15, r25
     fb8:	0a 1f       	adc	r16, r26
     fba:	1b 1f       	adc	r17, r27
     fbc:	e0 92 8f 02 	sts	0x028F, r14
     fc0:	f0 92 90 02 	sts	0x0290, r15
     fc4:	00 93 91 02 	sts	0x0291, r16
     fc8:	10 93 92 02 	sts	0x0292, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now(){
  while( millis() - prevMillis >= 1000){      
     fcc:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
     fd0:	e0 90 8f 02 	lds	r14, 0x028F
     fd4:	f0 90 90 02 	lds	r15, 0x0290
     fd8:	00 91 91 02 	lds	r16, 0x0291
     fdc:	10 91 92 02 	lds	r17, 0x0292
     fe0:	6e 19       	sub	r22, r14
     fe2:	7f 09       	sbc	r23, r15
     fe4:	80 0b       	sbc	r24, r16
     fe6:	91 0b       	sbc	r25, r17
     fe8:	20 91 7e 02 	lds	r18, 0x027E
     fec:	30 91 7f 02 	lds	r19, 0x027F
     ff0:	40 91 80 02 	lds	r20, 0x0280
     ff4:	50 91 81 02 	lds	r21, 0x0281
     ff8:	68 5e       	subi	r22, 0xE8	; 232
     ffa:	73 40       	sbci	r23, 0x03	; 3
     ffc:	80 40       	sbci	r24, 0x00	; 0
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	48 f6       	brcc	.-110    	; 0xf94 <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif	
  }
  if(nextSyncTime <= sysTime){
    1002:	80 91 82 02 	lds	r24, 0x0282
    1006:	90 91 83 02 	lds	r25, 0x0283
    100a:	a0 91 84 02 	lds	r26, 0x0284
    100e:	b0 91 85 02 	lds	r27, 0x0285
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	4a 07       	cpc	r20, r26
    1018:	5b 07       	cpc	r21, r27
    101a:	e8 f0       	brcs	.+58     	; 0x1056 <_Z3nowv+0xcc>
	if(getTimePtr != 0){
    101c:	e0 91 7c 02 	lds	r30, 0x027C
    1020:	f0 91 7d 02 	lds	r31, 0x027D
    1024:	30 97       	sbiw	r30, 0x00	; 0
    1026:	b9 f0       	breq	.+46     	; 0x1056 <_Z3nowv+0xcc>
	  time_t t = getTimePtr();
    1028:	09 95       	icall
      if( t != 0)
    102a:	61 15       	cp	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	81 05       	cpc	r24, r1
    1030:	91 05       	cpc	r25, r1
    1032:	19 f0       	breq	.+6      	; 0x103a <_Z3nowv+0xb0>
        setTime(t);
    1034:	0e 94 98 07 	call	0xf30	; 0xf30 <_Z7setTimem>
    1038:	0e c0       	rjmp	.+28     	; 0x1056 <_Z3nowv+0xcc>
      else
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;        
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	80 91 86 02 	lds	r24, 0x0286
    1042:	90 91 87 02 	lds	r25, 0x0287
    1046:	89 2b       	or	r24, r25
    1048:	11 f0       	breq	.+4      	; 0x104e <_Z3nowv+0xc4>
    104a:	21 e0       	ldi	r18, 0x01	; 1
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	30 93 87 02 	sts	0x0287, r19
    1052:	20 93 86 02 	sts	0x0286, r18
    1056:	60 91 7e 02 	lds	r22, 0x027E
    105a:	70 91 7f 02 	lds	r23, 0x027F
    }
  }  
  return sysTime;
}
    105e:	80 91 80 02 	lds	r24, 0x0280
    1062:	90 91 81 02 	lds	r25, 0x0281
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <_Z6secondv>:
  refreshCache(t);
  return tm.Minute;  
}

int second() {
  return second(now()); 
    1070:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_Z3nowv>
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
    1074:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z12refreshCachem>
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    1078:	80 91 88 02 	lds	r24, 0x0288
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	08 95       	ret

00001080 <_Z6minutev>:
uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
    1080:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_Z3nowv>
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
    1084:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z12refreshCachem>
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    1088:	80 91 89 02 	lds	r24, 0x0289
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	08 95       	ret

00001090 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    1090:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    1094:	0e 94 6d 07 	call	0xeda	; 0xeda <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    1098:	80 91 8a 02 	lds	r24, 0x028A
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	08 95       	ret

000010a0 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    10a0:	fc 01       	movw	r30, r24
  {
  // reset the search state
  LastDiscrepancy = 0;
    10a2:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    10a4:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    10a6:	14 86       	std	Z+12, r1	; 0x0c
    10a8:	87 e0       	ldi	r24, 0x07	; 7
    10aa:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--)
    {
    ROM_NO[i] = 0;
    10ac:	12 86       	std	Z+10, r1	; 0x0a
    10ae:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <_ZN7OneWire12reset_searchEv+0x18>
  {
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--)
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	fa cf       	rjmp	.-12     	; 0x10ac <_ZN7OneWire12reset_searchEv+0xc>
    10b8:	08 95       	ret

000010ba <_ZN7OneWire4crc8EPhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
    10ba:	dc 01       	movw	r26, r24
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <_ZN7OneWire4crc8EPhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    10c0:	e8 2f       	mov	r30, r24
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8d 91       	ld	r24, X+
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	e8 27       	eor	r30, r24
    10ca:	f9 27       	eor	r31, r25
    10cc:	e8 59       	subi	r30, 0x98	; 152
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	e4 91       	lpm	r30, Z+
    10d2:	61 50       	subi	r22, 0x01	; 1
    10d4:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    10d6:	66 23       	and	r22, r22
    10d8:	99 f7       	brne	.-26     	; 0x10c0 <_ZN7OneWire4crc8EPhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    10da:	08 95       	ret

000010dc <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    10e8:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    10ea:	01 81       	ldd	r16, Z+1	; 0x01
    10ec:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    10ee:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    10f0:	f8 01       	movw	r30, r16
    10f2:	81 81       	ldd	r24, Z+1	; 0x01
    10f4:	8e 29       	or	r24, r14
    10f6:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	de 2c       	mov	r13, r14
    10fc:	d0 94       	com	r13
    10fe:	8d 21       	and	r24, r13
    1100:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    110a:	f8 01       	movw	r30, r16
    110c:	81 81       	ldd	r24, Z+1	; 0x01
    110e:	8d 21       	and	r24, r13
    1110:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    1112:	8a e0       	ldi	r24, 0x0A	; 10
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    111a:	f8 01       	movw	r30, r16
    111c:	00 81       	ld	r16, Z
	interrupts();
    111e:	78 94       	sei
	delayMicroseconds(53);
    1120:	85 e3       	ldi	r24, 0x35	; 53
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	ff 24       	eor	r15, r15
    112e:	0e 21       	and	r16, r14
    1130:	1f 21       	and	r17, r15
    1132:	01 2b       	or	r16, r17
    1134:	09 f0       	breq	.+2      	; 0x1138 <_ZN7OneWire8read_bitEv+0x5c>
    1136:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	08 95       	ret

00001144 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	7c 01       	movw	r14, r24
    1152:	01 e0       	ldi	r16, 0x01	; 1
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	c0 e0       	ldi	r28, 0x00	; 0
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    115a:	c7 01       	movw	r24, r14
    115c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire8read_bitEv>
    1160:	81 11       	cpse	r24, r1
    1162:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1164:	00 0f       	add	r16, r16
    1166:	21 96       	adiw	r28, 0x01	; 1
    1168:	c8 30       	cpi	r28, 0x08	; 8
    116a:	d1 05       	cpc	r29, r1
    116c:	b1 f7       	brne	.-20     	; 0x115a <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    116e:	81 2f       	mov	r24, r17
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	ff 90       	pop	r15
    117a:	ef 90       	pop	r14
    117c:	08 95       	ret

0000117e <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    1186:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1188:	c1 81       	ldd	r28, Z+1	; 0x01
    118a:	d2 81       	ldd	r29, Z+2	; 0x02
    118c:	91 2f       	mov	r25, r17
    118e:	90 95       	com	r25

	if (v & 1) {
    1190:	60 ff       	sbrs	r22, 0
    1192:	12 c0       	rjmp	.+36     	; 0x11b8 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    1194:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	89 23       	and	r24, r25
    119a:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	81 2b       	or	r24, r17
    11a0:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    11a2:	8a e0       	ldi	r24, 0x0A	; 10
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	81 2b       	or	r24, r17
    11ae:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    11b0:	78 94       	sei
		delayMicroseconds(55);
    11b2:	87 e3       	ldi	r24, 0x37	; 55
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    11b8:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	89 23       	and	r24, r25
    11be:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	81 2b       	or	r24, r17
    11c4:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    11c6:	81 e4       	ldi	r24, 0x41	; 65
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	81 2b       	or	r24, r17
    11d2:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    11d4:	78 94       	sei
		delayMicroseconds(5);
    11d6:	85 e0       	ldi	r24, 0x05	; 5
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	}
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	08 95       	ret

000011e6 <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	8c 01       	movw	r16, r24
    11f8:	e4 2e       	mov	r14, r20
    11fa:	ff 24       	eor	r15, r15
    11fc:	f3 94       	inc	r15
    11fe:	c0 e0       	ldi	r28, 0x00	; 0
    1200:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    1202:	c6 2e       	mov	r12, r22
    1204:	dd 24       	eor	r13, r13
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	8f 2d       	mov	r24, r15
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	8c 21       	and	r24, r12
    120e:	9d 21       	and	r25, r13
    1210:	89 2b       	or	r24, r25
    1212:	09 f0       	breq	.+2      	; 0x1216 <_ZN7OneWire5writeEhh+0x30>
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	c8 01       	movw	r24, r16
    1218:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    121c:	ff 0c       	add	r15, r15
    121e:	21 96       	adiw	r28, 0x01	; 1
    1220:	c8 30       	cpi	r28, 0x08	; 8
    1222:	d1 05       	cpc	r29, r1
    1224:	81 f7       	brne	.-32     	; 0x1206 <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    1226:	ee 20       	and	r14, r14
    1228:	a9 f4       	brne	.+42     	; 0x1254 <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    122a:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    122c:	d8 01       	movw	r26, r16
    122e:	11 96       	adiw	r26, 0x01	; 1
    1230:	ed 91       	ld	r30, X+
    1232:	fc 91       	ld	r31, X
    1234:	12 97       	sbiw	r26, 0x02	; 2
    1236:	91 81       	ldd	r25, Z+1	; 0x01
    1238:	8c 91       	ld	r24, X
    123a:	80 95       	com	r24
    123c:	98 23       	and	r25, r24
    123e:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	ed 91       	ld	r30, X+
    1244:	fc 91       	ld	r31, X
    1246:	12 97       	sbiw	r26, 0x02	; 2
    1248:	92 81       	ldd	r25, Z+2	; 0x02
    124a:	8c 91       	ld	r24, X
    124c:	80 95       	com	r24
    124e:	98 23       	and	r25, r24
    1250:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    1252:	78 94       	sei
    }
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
    125e:	ef 90       	pop	r14
    1260:	df 90       	pop	r13
    1262:	cf 90       	pop	r12
    1264:	08 95       	ret

00001266 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
    1266:	6c ec       	ldi	r22, 0xCC	; 204
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
}
    126e:	08 95       	ret

00001270 <_ZN7OneWire6selectEPh>:
}

//
// Do a ROM select
//
void OneWire::select( uint8_t rom[8])
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	8c 01       	movw	r16, r24
    127e:	7b 01       	movw	r14, r22
{
    int i;

    write(0x55);           // Choose ROM
    1280:	65 e5       	ldi	r22, 0x55	; 85
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
    1288:	c0 e0       	ldi	r28, 0x00	; 0
    128a:	d0 e0       	ldi	r29, 0x00	; 0

    for( i = 0; i < 8; i++) write(rom[i]);
    128c:	f7 01       	movw	r30, r14
    128e:	ec 0f       	add	r30, r28
    1290:	fd 1f       	adc	r31, r29
    1292:	c8 01       	movw	r24, r16
    1294:	60 81       	ld	r22, Z
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
    129c:	21 96       	adiw	r28, 0x01	; 1
    129e:	c8 30       	cpi	r28, 0x08	; 8
    12a0:	d1 05       	cpc	r29, r1
    12a2:	a1 f7       	brne	.-24     	; 0x128c <_ZN7OneWire6selectEPh+0x1c>
}
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	08 95       	ret

000012b2 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    12b2:	df 92       	push	r13
    12b4:	ef 92       	push	r14
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    12c2:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    12c4:	c1 81       	ldd	r28, Z+1	; 0x01
    12c6:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    12c8:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	d0 2e       	mov	r13, r16
    12ce:	d0 94       	com	r13
    12d0:	8d 21       	and	r24, r13
    12d2:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    12d4:	78 94       	sei
    12d6:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    12d8:	e0 2e       	mov	r14, r16
    12da:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    12dc:	11 50       	subi	r17, 0x01	; 1
    12de:	59 f1       	breq	.+86     	; 0x1336 <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    12e8:	88 81       	ld	r24, Y
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	8e 21       	and	r24, r14
    12ee:	9f 21       	and	r25, r15
    12f0:	89 2b       	or	r24, r25
    12f2:	a1 f3       	breq	.-24     	; 0x12dc <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    12f4:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	8d 21       	and	r24, r13
    12fa:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	80 2b       	or	r24, r16
    1300:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    1302:	78 94       	sei
	delayMicroseconds(500);
    1304:	84 ef       	ldi	r24, 0xF4	; 244
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	noInterrupts();
    130c:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	8d 21       	and	r24, r13
    1312:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(80);
    1314:	80 e5       	ldi	r24, 0x50	; 80
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    131c:	88 81       	ld	r24, Y
    131e:	10 e0       	ldi	r17, 0x00	; 0
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	e8 22       	and	r14, r24
    1324:	f9 22       	and	r15, r25
    1326:	ef 28       	or	r14, r15
    1328:	09 f4       	brne	.+2      	; 0x132c <_ZN7OneWire5resetEv+0x7a>
    132a:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    132c:	78 94       	sei
	delayMicroseconds(420);
    132e:	84 ea       	ldi	r24, 0xA4	; 164
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
	return r;
}
    1336:	81 2f       	mov	r24, r17
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	df 90       	pop	r13
    1346:	08 95       	ret

00001348 <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    1348:	af 92       	push	r10
    134a:	bf 92       	push	r11
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	88 23       	and	r24, r24
    1362:	09 f0       	breq	.+2      	; 0x1366 <_ZN7OneWire6searchEPh+0x1e>
    1364:	61 c0       	rjmp	.+194    	; 0x1428 <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    1366:	ce 01       	movw	r24, r28
    1368:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN7OneWire5resetEv>
    136c:	88 23       	and	r24, r24
    136e:	29 f4       	brne	.+10     	; 0x137a <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    1370:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    1372:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1374:	1c 86       	std	Y+12, r1	; 0x0c
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	6b c0       	rjmp	.+214    	; 0x1450 <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    137a:	ce 01       	movw	r24, r28
    137c:	60 ef       	ldi	r22, 0xF0	; 240
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_ZN7OneWire5writeEhh>
    1384:	01 e0       	ldi	r16, 0x01	; 1
    1386:	dd 24       	eor	r13, r13
    1388:	ee 24       	eor	r14, r14
    138a:	ff 24       	eor	r15, r15
    138c:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    138e:	ce 01       	movw	r24, r28
    1390:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire8read_bitEv>
    1394:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    139c:	11 30       	cpi	r17, 0x01	; 1
    139e:	19 f4       	brne	.+6      	; 0x13a6 <_ZN7OneWire6searchEPh+0x5e>
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	e1 f4       	brne	.+56     	; 0x13dc <_ZN7OneWire6searchEPh+0x94>
    13a4:	39 c0       	rjmp	.+114    	; 0x1418 <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    13a6:	18 17       	cp	r17, r24
    13a8:	09 f5       	brne	.+66     	; 0x13ec <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    13aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    13ac:	08 17       	cp	r16, r24
    13ae:	70 f4       	brcc	.+28     	; 0x13cc <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	fe 01       	movw	r30, r28
    13b4:	ee 0d       	add	r30, r14
    13b6:	f1 1d       	adc	r31, r1
    13b8:	83 81       	ldd	r24, Z+3	; 0x03
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	2f 2d       	mov	r18, r15
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	82 23       	and	r24, r18
    13c2:	93 23       	and	r25, r19
    13c4:	18 16       	cp	r1, r24
    13c6:	19 06       	cpc	r1, r25
    13c8:	4c f0       	brlt	.+18     	; 0x13dc <_ZN7OneWire6searchEPh+0x94>
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	08 17       	cp	r16, r24
    13d0:	29 f0       	breq	.+10     	; 0x13dc <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    13d2:	09 30       	cpi	r16, 0x09	; 9
    13d4:	08 f0       	brcs	.+2      	; 0x13d8 <_ZN7OneWire6searchEPh+0x90>
    13d6:	4c c0       	rjmp	.+152    	; 0x1470 <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    13d8:	0c 87       	std	Y+12, r16	; 0x0c
    13da:	4a c0       	rjmp	.+148    	; 0x1470 <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    13dc:	fe 01       	movw	r30, r28
    13de:	ee 0d       	add	r30, r14
    13e0:	f1 1d       	adc	r31, r1
    13e2:	83 81       	ldd	r24, Z+3	; 0x03
    13e4:	8f 29       	or	r24, r15
    13e6:	83 83       	std	Z+3, r24	; 0x03
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <_ZN7OneWire6searchEPh+0xb6>
    13ec:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    13ee:	fe 01       	movw	r30, r28
    13f0:	ee 0d       	add	r30, r14
    13f2:	f1 1d       	adc	r31, r1
    13f4:	9f 2d       	mov	r25, r15
    13f6:	90 95       	com	r25
    13f8:	83 81       	ldd	r24, Z+3	; 0x03
    13fa:	89 23       	and	r24, r25
    13fc:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    13fe:	ce 01       	movw	r24, r28
    1400:	0e 94 bf 08 	call	0x117e	; 0x117e <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1404:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    1406:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1408:	19 f4       	brne	.+6      	; 0x1410 <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    140a:	e3 94       	inc	r14
    140c:	ff 24       	eor	r15, r15
    140e:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    1410:	87 e0       	ldi	r24, 0x07	; 7
    1412:	8e 15       	cp	r24, r14
    1414:	08 f0       	brcs	.+2      	; 0x1418 <_ZN7OneWire6searchEPh+0xd0>
    1416:	bb cf       	rjmp	.-138    	; 0x138e <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    1418:	01 34       	cpi	r16, 0x41	; 65
    141a:	30 f0       	brcs	.+12     	; 0x1428 <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    141c:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    141e:	dd 20       	and	r13, r13
    1420:	11 f5       	brne	.+68     	; 0x1466 <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	8d 87       	std	Y+13, r24	; 0x0d
    1426:	1f c0       	rjmp	.+62     	; 0x1466 <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1428:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    142a:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    142c:	1c 86       	std	Y+12, r1	; 0x0c
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	de 01       	movw	r26, r28
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1436:	f5 01       	movw	r30, r10
    1438:	e2 0f       	add	r30, r18
    143a:	f3 1f       	adc	r31, r19
    143c:	13 96       	adiw	r26, 0x03	; 3
    143e:	8c 91       	ld	r24, X
    1440:	13 97       	sbiw	r26, 0x03	; 3
    1442:	80 83       	st	Z, r24
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	28 30       	cpi	r18, 0x08	; 8
    144c:	31 05       	cpc	r19, r1
    144e:	99 f7       	brne	.-26     	; 0x1436 <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    1450:	89 2f       	mov	r24, r25
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	ff 90       	pop	r15
    145c:	ef 90       	pop	r14
    145e:	df 90       	pop	r13
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	88 23       	and	r24, r24
    146a:	f1 f2       	breq	.-68     	; 0x1428 <_ZN7OneWire6searchEPh+0xe0>
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	e0 cf       	rjmp	.-64     	; 0x1430 <_ZN7OneWire6searchEPh+0xe8>
    1470:	d0 2e       	mov	r13, r16
    1472:	bd cf       	rjmp	.-134    	; 0x13ee <_ZN7OneWire6searchEPh+0xa6>

00001474 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	8c 01       	movw	r16, r24
    147c:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    147e:	86 2f       	mov	r24, r22
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    1486:	8f 2d       	mov	r24, r15
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	fc 01       	movw	r30, r24
    148c:	e6 56       	subi	r30, 0x66	; 102
    148e:	fe 4f       	sbci	r31, 0xFE	; 254
    1490:	e4 91       	lpm	r30, Z+
    1492:	d8 01       	movw	r26, r16
    1494:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    1496:	8a 57       	subi	r24, 0x7A	; 122
    1498:	9e 4f       	sbci	r25, 0xFE	; 254
    149a:	fc 01       	movw	r30, r24
    149c:	64 91       	lpm	r22, Z+
    149e:	e6 2f       	mov	r30, r22
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	e4 58       	subi	r30, 0x84	; 132
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	85 91       	lpm	r24, Z+
    14ac:	94 91       	lpm	r25, Z+
    14ae:	12 96       	adiw	r26, 0x02	; 2
    14b0:	9c 93       	st	X, r25
    14b2:	8e 93       	st	-X, r24
    14b4:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
  {
  // reset the search state
  LastDiscrepancy = 0;
    14b6:	1b 96       	adiw	r26, 0x0b	; 11
    14b8:	1c 92       	st	X, r1
    14ba:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    14bc:	1d 96       	adiw	r26, 0x0d	; 13
    14be:	1c 92       	st	X, r1
    14c0:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    14c2:	1c 96       	adiw	r26, 0x0c	; 12
    14c4:	1c 92       	st	X, r1
    14c6:	f8 01       	movw	r30, r16
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--)
    {
    ROM_NO[i] = 0;
    14cc:	12 86       	std	Z+10, r1	; 0x0a
    14ce:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <_ZN7OneWireC1Eh+0x64>
  {
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--)
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	fa cf       	rjmp	.-12     	; 0x14cc <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	08 95       	ret

000014e0 <_ZN11OLEDFourBit11pulseEnableEv>:

  write4bits(value>>4);
  write4bits(value);
}

void OLEDFourBit::pulseEnable(void) {
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	8c 01       	movw	r16, r24
  digitalWrite(_enable_pin, HIGH);
    14e6:	fc 01       	movw	r30, r24
    14e8:	86 81       	ldd	r24, Z+6	; 0x06
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  delayMicroseconds(100);    // enable pulse must be >450ns
    14f0:	84 e6       	ldi	r24, 0x64	; 100
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    14f8:	f8 01       	movw	r30, r16
    14fa:	86 81       	ldd	r24, Z+6	; 0x06
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
}
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <_ZN11OLEDFourBit10write4bitsEh>:

void OLEDFourBit::write4bits(uint8_t value) {
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	d8 2e       	mov	r13, r24
    151a:	c9 2e       	mov	r12, r25
    151c:	28 2f       	mov	r18, r24
    151e:	39 2f       	mov	r19, r25
    1520:	c9 01       	movw	r24, r18
    1522:	8c 01       	movw	r16, r24
    1524:	c0 e0       	ldi	r28, 0x00	; 0
    1526:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1528:	e6 2e       	mov	r14, r22
    152a:	ff 24       	eor	r15, r15
  digitalWrite(_enable_pin, LOW);
}

void OLEDFourBit::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    152c:	f8 01       	movw	r30, r16
    152e:	80 85       	ldd	r24, Z+8	; 0x08
    1530:	61 e0       	ldi	r22, 0x01	; 1
    1532:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    1536:	b7 01       	movw	r22, r14
    1538:	0c 2e       	mov	r0, r28
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <_ZN11OLEDFourBit10write4bitsEh+0x38>
    153c:	75 95       	asr	r23
    153e:	67 95       	ror	r22
    1540:	0a 94       	dec	r0
    1542:	e2 f7       	brpl	.-8      	; 0x153c <_ZN11OLEDFourBit10write4bitsEh+0x34>
    1544:	61 70       	andi	r22, 0x01	; 1
    1546:	f8 01       	movw	r30, r16
    1548:	80 85       	ldd	r24, Z+8	; 0x08
    154a:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  delayMicroseconds(100);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
}

void OLEDFourBit::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    154e:	21 96       	adiw	r28, 0x01	; 1
    1550:	0f 5f       	subi	r16, 0xFF	; 255
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	c4 30       	cpi	r28, 0x04	; 4
    1556:	d1 05       	cpc	r29, r1
    1558:	49 f7       	brne	.-46     	; 0x152c <_ZN11OLEDFourBit10write4bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  delayMicroseconds(100);
    155a:	84 e6       	ldi	r24, 0x64	; 100
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  pulseEnable();
    1562:	8d 2d       	mov	r24, r13
    1564:	9c 2d       	mov	r25, r12
    1566:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN11OLEDFourBit11pulseEnableEv>
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	df 90       	pop	r13
    1578:	cf 90       	pop	r12
    157a:	08 95       	ret

0000157c <_ZN11OLEDFourBit4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data
void OLEDFourBit::send(uint8_t value, uint8_t mode) {
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	8c 01       	movw	r16, r24
    1584:	f6 2e       	mov	r15, r22
  digitalWrite(_rs_pin, mode);
    1586:	fc 01       	movw	r30, r24
    1588:	84 81       	ldd	r24, Z+4	; 0x04
    158a:	64 2f       	mov	r22, r20
    158c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  pinMode(_rw_pin, OUTPUT);
    1590:	f8 01       	movw	r30, r16
    1592:	85 81       	ldd	r24, Z+5	; 0x05
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  digitalWrite(_rw_pin, LOW);
    159a:	f8 01       	movw	r30, r16
    159c:	85 81       	ldd	r24, Z+5	; 0x05
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>

  write4bits(value>>4);
    15a4:	6f 2d       	mov	r22, r15
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	75 95       	asr	r23
    15ac:	67 95       	ror	r22
    15ae:	8a 95       	dec	r24
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <_ZN11OLEDFourBit4sendEhh+0x2e>
    15b2:	c8 01       	movw	r24, r16
    15b4:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>
  write4bits(value);
    15b8:	c8 01       	movw	r24, r16
    15ba:	6f 2d       	mov	r22, r15
    15bc:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>
}
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	ff 90       	pop	r15
    15c6:	08 95       	ret

000015c8 <_ZN11OLEDFourBit8waitBusyEv>:
  }
  delayMicroseconds(100);
  pulseEnable();
}

void OLEDFourBit::waitBusy(void) {
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
  //delayMicroseconds(5000);
  unsigned char busy = 1;
  pinMode(_busy_pin, INPUT);
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  digitalWrite(_rs_pin, LOW);
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  digitalWrite(_rw_pin, HIGH);
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	61 e0       	ldi	r22, 0x01	; 1
    15e4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  do{
  	digitalWrite(_enable_pin, LOW);
    15e8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ea:	60 e0       	ldi	r22, 0x00	; 0
    15ec:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  	digitalWrite(_enable_pin, HIGH);
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  	delayMicroseconds(10);
    15f8:	8a e0       	ldi	r24, 0x0A	; 10
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  	busy = digitalRead(_busy_pin);
    1600:	8f 81       	ldd	r24, Y+7	; 0x07
    1602:	0e 94 01 28 	call	0x5002	; 0x5002 <digitalRead>
    1606:	18 2f       	mov	r17, r24
  	digitalWrite(_enable_pin, LOW);
    1608:	8e 81       	ldd	r24, Y+6	; 0x06
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>

  	pulseEnable();		// get remaining 4 bits, which are not used.
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <_ZN11OLEDFourBit11pulseEnableEv>
  //delayMicroseconds(5000);
  unsigned char busy = 1;
  pinMode(_busy_pin, INPUT);
  digitalWrite(_rs_pin, LOW);
  digitalWrite(_rw_pin, HIGH);
  do{
    1616:	11 23       	and	r17, r17
    1618:	39 f7       	brne	.-50     	; 0x15e8 <_ZN11OLEDFourBit8waitBusyEv+0x20>

  	pulseEnable();		// get remaining 4 bits, which are not used.

  }while(busy);

  pinMode(_busy_pin, OUTPUT);
    161a:	8f 81       	ldd	r24, Y+7	; 0x07
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  digitalWrite(_rw_pin, LOW);
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	08 95       	ret

00001632 <_ZN11OLEDFourBit5writeEh>:
inline void OLEDFourBit::command(uint8_t value) {
  send(value, LOW);
  waitBusy();
}

inline size_t OLEDFourBit::write(uint8_t value) {
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	8c 01       	movw	r16, r24
  send(value, HIGH);
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN11OLEDFourBit4sendEhh>
  waitBusy();
    163e:	c8 01       	movw	r24, r16
    1640:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN11OLEDFourBit8waitBusyEv>
  return 0;
}
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

0000164e <_ZN11OLEDFourBit7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void OLEDFourBit::command(uint8_t value) {
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	8c 01       	movw	r16, r24
  send(value, LOW);
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	0e 94 be 0a 	call	0x157c	; 0x157c <_ZN11OLEDFourBit4sendEhh>
  waitBusy();
    165a:	c8 01       	movw	r24, r16
    165c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <_ZN11OLEDFourBit8waitBusyEv>
}
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <_ZN11OLEDFourBit7displayEv>:
// Turn the display on/off (quickly)
void OLEDFourBit::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void OLEDFourBit::display() {
    1666:	fc 01       	movw	r30, r24
  _displaycontrol |= LCD_DISPLAYON;
    1668:	65 85       	ldd	r22, Z+13	; 0x0d
    166a:	86 2f       	mov	r24, r22
    166c:	84 60       	ori	r24, 0x04	; 4
    166e:	85 87       	std	Z+13, r24	; 0x0d
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    1670:	6c 60       	ori	r22, 0x0C	; 12
    1672:	cf 01       	movw	r24, r30
    1674:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
}
    1678:	08 95       	ret

0000167a <_ZN11OLEDFourBit9setCursorEhh>:
void OLEDFourBit::home()
{
  command(LCD_RETURNHOME);  // set cursor position to zero
}

void OLEDFourBit::setCursor(uint8_t col, uint8_t row)
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <_ZN11OLEDFourBit9setCursorEhh+0x6>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <_ZN11OLEDFourBit9setCursorEhh+0x8>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	dc 01       	movw	r26, r24
{
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
  if ( row >= _numlines ) {
    1688:	51 96       	adiw	r26, 0x11	; 17
    168a:	8c 91       	ld	r24, X
    168c:	51 97       	sbiw	r26, 0x11	; 17
    168e:	48 17       	cp	r20, r24
    1690:	08 f0       	brcs	.+2      	; 0x1694 <_ZN11OLEDFourBit9setCursorEhh+0x1a>
    1692:	40 e0       	ldi	r20, 0x00	; 0
  command(LCD_RETURNHOME);  // set cursor position to zero
}

void OLEDFourBit::setCursor(uint8_t col, uint8_t row)
{
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    1694:	19 82       	std	Y+1, r1	; 0x01
    1696:	80 e4       	ldi	r24, 0x40	; 64
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	84 e1       	ldi	r24, 0x14	; 20
    169c:	8b 83       	std	Y+3, r24	; 0x03
    169e:	84 e5       	ldi	r24, 0x54	; 84
    16a0:	8c 83       	std	Y+4, r24	; 0x04
  if ( row >= _numlines ) {
    row = 0;  //write to first line if out off bounds
  }

  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    16a2:	fe 01       	movw	r30, r28
    16a4:	e4 0f       	add	r30, r20
    16a6:	f1 1d       	adc	r31, r1
    16a8:	81 81       	ldd	r24, Z+1	; 0x01
    16aa:	68 0f       	add	r22, r24
    16ac:	60 68       	ori	r22, 0x80	; 128
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <_ZN11OLEDFourBit4homeEv>:
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
}

void OLEDFourBit::home()
{
  command(LCD_RETURNHOME);  // set cursor position to zero
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
}
    16c8:	08 95       	ret

000016ca <_ZN11OLEDFourBit5clearEv>:
}

/********** high level commands, for the user! */
void OLEDFourBit::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
}
    16d0:	08 95       	ret

000016d2 <_ZN11OLEDFourBit5beginEhh>:
  _displayfunction = LCD_FUNCTIONSET | LCD_4BITMODE;

  begin(20, 4);
}

void OLEDFourBit::begin(uint8_t cols, uint8_t lines) {
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
  _numlines = lines;
    16e0:	49 8b       	std	Y+17, r20	; 0x11
  _currline = 0;
    16e2:	18 8a       	std	Y+16, r1	; 0x10

  pinMode(_rs_pin, OUTPUT);
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  pinMode(_rw_pin, OUTPUT);
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  pinMode(_enable_pin, OUTPUT);
    16f4:	8e 81       	ldd	r24, Y+6	; 0x06
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>

  digitalWrite(_rs_pin, LOW);
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  digitalWrite(_enable_pin, LOW);
    1704:	8e 81       	ldd	r24, Y+6	; 0x06
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  digitalWrite(_rw_pin, LOW);
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	60 e0       	ldi	r22, 0x00	; 0
    1710:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>

  // SEE PAGE 20 of NHD-0420DZW-AY5
  delayMicroseconds(50000); // wait 50 ms just to be sure tha the lcd is initialized
    1714:	80 e5       	ldi	r24, 0x50	; 80
    1716:	93 ec       	ldi	r25, 0xC3	; 195
    1718:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
    171c:	8e 01       	movw	r16, r28
    171e:	ee 24       	eor	r14, r14
    1720:	ff 24       	eor	r15, r15

  // Now we pull both RS and R/W low to begin commands

  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    1722:	f8 01       	movw	r30, r16
    1724:	80 85       	ldd	r24, Z+8	; 0x08
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
    digitalWrite(_data_pins[i], LOW);
    172c:	f8 01       	movw	r30, r16
    172e:	80 85       	ldd	r24, Z+8	; 0x08
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
  // SEE PAGE 20 of NHD-0420DZW-AY5
  delayMicroseconds(50000); // wait 50 ms just to be sure tha the lcd is initialized

  // Now we pull both RS and R/W low to begin commands

  for (int i = 0; i < 4; i++) {
    1736:	08 94       	sec
    1738:	e1 1c       	adc	r14, r1
    173a:	f1 1c       	adc	r15, r1
    173c:	0f 5f       	subi	r16, 0xFF	; 255
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	f4 e0       	ldi	r31, 0x04	; 4
    1742:	ef 16       	cp	r14, r31
    1744:	f1 04       	cpc	r15, r1
    1746:	69 f7       	brne	.-38     	; 0x1722 <_ZN11OLEDFourBit5beginEhh+0x50>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], LOW);
  }

  delayMicroseconds(100000);
    1748:	80 ea       	ldi	r24, 0xA0	; 160
    174a:	96 e8       	ldi	r25, 0x86	; 134
    174c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  write4bits(0x03);
    1750:	ce 01       	movw	r24, r28
    1752:	63 e0       	ldi	r22, 0x03	; 3
    1754:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(100000);
    1758:	80 ea       	ldi	r24, 0xA0	; 160
    175a:	96 e8       	ldi	r25, 0x86	; 134
    175c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  write4bits(0x02);
    1760:	ce 01       	movw	r24, r28
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(10000);
    1768:	80 e1       	ldi	r24, 0x10	; 16
    176a:	97 e2       	ldi	r25, 0x27	; 39
    176c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  write4bits(0x02);
    1770:	ce 01       	movw	r24, r28
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(10000);
    1778:	80 e1       	ldi	r24, 0x10	; 16
    177a:	97 e2       	ldi	r25, 0x27	; 39
    177c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>
  write4bits(0x08);
    1780:	ce 01       	movw	r24, r28
    1782:	68 e0       	ldi	r22, 0x08	; 8
    1784:	0e 94 84 0a 	call	0x1508	; 0x1508 <_ZN11OLEDFourBit10write4bitsEh>


  //command(0x28);
  delayMicroseconds(10000);
    1788:	80 e1       	ldi	r24, 0x10	; 16
    178a:	97 e2       	ldi	r25, 0x27	; 39
    178c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>

  command(0x08);	// Display off
    1790:	ce 01       	movw	r24, r28
    1792:	68 e0       	ldi	r22, 0x08	; 8
    1794:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1798:	80 e1       	ldi	r24, 0x10	; 16
    179a:	97 e2       	ldi	r25, 0x27	; 39
    179c:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>

  command(0x01);	// display clear
    17a0:	ce 01       	movw	r24, r28
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    17a8:	80 e1       	ldi	r24, 0x10	; 16
    17aa:	97 e2       	ldi	r25, 0x27	; 39
    17ac:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>

  command(0x06);	// Entry Mode Set:
    17b0:	ce 01       	movw	r24, r28
    17b2:	66 e0       	ldi	r22, 0x06	; 6
    17b4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    17b8:	80 e1       	ldi	r24, 0x10	; 16
    17ba:	97 e2       	ldi	r25, 0x27	; 39
    17bc:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>


  command(0x02);	// Home
    17c0:	ce 01       	movw	r24, r28
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    17c8:	80 e1       	ldi	r24, 0x10	; 16
    17ca:	97 e2       	ldi	r25, 0x27	; 39
    17cc:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>

  command(0x0C);	// display on/ cursor on/ cursor blink
    17d0:	ce 01       	movw	r24, r28
    17d2:	6c e0       	ldi	r22, 0x0C	; 12
    17d4:	0e 94 27 0b 	call	0x164e	; 0x164e <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    17d8:	80 e1       	ldi	r24, 0x10	; 16
    17da:	97 e2       	ldi	r25, 0x27	; 39
    17dc:	0e 94 04 27 	call	0x4e08	; 0x4e08 <delayMicroseconds>


}
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	08 95       	ret

000017ee <_ZN11OLEDFourBit4initEhhhhhhh>:
{
  init(rs, rw, enable, d4, d5, d6, d7);
}

void OLEDFourBit::init(uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	cf 92       	push	r12
    17f6:	ef 92       	push	r14
    17f8:	0f 93       	push	r16
    17fa:	4c 01       	movw	r8, r24
    17fc:	86 2f       	mov	r24, r22
{
  _rs_pin = rs;
    17fe:	f4 01       	movw	r30, r8
    1800:	64 83       	std	Z+4, r22	; 0x04
  _rw_pin = rw;
    1802:	45 83       	std	Z+5, r20	; 0x05
  _enable_pin = enable;
    1804:	26 83       	std	Z+6, r18	; 0x06
  _busy_pin = d7;
    1806:	a7 82       	std	Z+7, r10	; 0x07

  _data_pins[0] = d4;
    1808:	00 87       	std	Z+8, r16	; 0x08
  _data_pins[1] = d5;
    180a:	e1 86       	std	Z+9, r14	; 0x09
  _data_pins[2] = d6;
    180c:	c2 86       	std	Z+10, r12	; 0x0a
  _data_pins[3] = d7;
    180e:	a3 86       	std	Z+11, r10	; 0x0b


  pinMode(_rs_pin, OUTPUT);
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  pinMode(_rw_pin, OUTPUT);
    1816:	f4 01       	movw	r30, r8
    1818:	85 81       	ldd	r24, Z+5	; 0x05
    181a:	61 e0       	ldi	r22, 0x01	; 1
    181c:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
  pinMode(_enable_pin, OUTPUT);
    1820:	f4 01       	movw	r30, r8
    1822:	86 81       	ldd	r24, Z+6	; 0x06
    1824:	61 e0       	ldi	r22, 0x01	; 1
    1826:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>

  _displayfunction = LCD_FUNCTIONSET | LCD_4BITMODE;
    182a:	88 e2       	ldi	r24, 0x28	; 40
    182c:	f4 01       	movw	r30, r8
    182e:	84 87       	std	Z+12, r24	; 0x0c

  begin(20, 4);
    1830:	c4 01       	movw	r24, r8
    1832:	64 e1       	ldi	r22, 0x14	; 20
    1834:	44 e0       	ldi	r20, 0x04	; 4
    1836:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN11OLEDFourBit5beginEhh>
}
    183a:	0f 91       	pop	r16
    183c:	ef 90       	pop	r14
    183e:	cf 90       	pop	r12
    1840:	af 90       	pop	r10
    1842:	9f 90       	pop	r9
    1844:	8f 90       	pop	r8
    1846:	08 95       	ret

00001848 <_ZN11OLEDFourBitC1Ehhhhhhh>:
#include <string.h>
#include <inttypes.h>
#include "Arduino.h"

OLEDFourBit::OLEDFourBit(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
    1848:	af 92       	push	r10
    184a:	cf 92       	push	r12
    184c:	ef 92       	push	r14
    184e:	0f 93       	push	r16
    1850:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1852:	13 82       	std	Z+3, r1	; 0x03
    1854:	12 82       	std	Z+2, r1	; 0x02
    1856:	8e e3       	ldi	r24, 0x3E	; 62
    1858:	92 e0       	ldi	r25, 0x02	; 2
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
{
  init(rs, rw, enable, d4, d5, d6, d7);
    185e:	cf 01       	movw	r24, r30
    1860:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_ZN11OLEDFourBit4initEhhhhhhh>
}
    1864:	0f 91       	pop	r16
    1866:	ef 90       	pop	r14
    1868:	cf 90       	pop	r12
    186a:	af 90       	pop	r10
    186c:	08 95       	ret

0000186e <_ZN8MsTimer23setEmPFvvE>:
volatile unsigned int MsTimer2::tcnt2;

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
    186e:	61 15       	cp	r22, r1
    1870:	71 05       	cpc	r23, r1
    1872:	81 05       	cpc	r24, r1
    1874:	91 05       	cpc	r25, r1
    1876:	69 f4       	brne	.+26     	; 0x1892 <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	80 93 97 02 	sts	0x0297, r24
    1884:	90 93 98 02 	sts	0x0298, r25
    1888:	a0 93 99 02 	sts	0x0299, r26
    188c:	b0 93 9a 02 	sts	0x029A, r27
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
    1892:	60 93 97 02 	sts	0x0297, r22
    1896:	70 93 98 02 	sts	0x0298, r23
    189a:	80 93 99 02 	sts	0x0299, r24
    189e:	90 93 9a 02 	sts	0x029A, r25
		
	func = f;
    18a2:	50 93 9c 02 	sts	0x029C, r21
    18a6:	40 93 9b 02 	sts	0x029B, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
    18aa:	80 91 70 00 	lds	r24, 0x0070
    18ae:	8e 7f       	andi	r24, 0xFE	; 254
    18b0:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    18b4:	80 91 b0 00 	lds	r24, 0x00B0
    18b8:	8c 7f       	andi	r24, 0xFC	; 252
    18ba:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
    18be:	80 91 b1 00 	lds	r24, 0x00B1
    18c2:	87 7f       	andi	r24, 0xF7	; 247
    18c4:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
    18c8:	80 91 b6 00 	lds	r24, 0x00B6
    18cc:	8f 7d       	andi	r24, 0xDF	; 223
    18ce:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
    18d2:	80 91 70 00 	lds	r24, 0x0070
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    18dc:	80 91 b1 00 	lds	r24, 0x00B1
    18e0:	84 60       	ori	r24, 0x04	; 4
    18e2:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    18e6:	80 91 b1 00 	lds	r24, 0x00B1
    18ea:	8c 7f       	andi	r24, 0xFC	; 252
    18ec:	80 93 b1 00 	sts	0x00B1, r24
	return;
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
    18f0:	86 e0       	ldi	r24, 0x06	; 6
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	90 93 a3 02 	sts	0x02A3, r25
    18f8:	80 93 a2 02 	sts	0x02A2, r24
}
    18fc:	08 95       	ret

000018fe <_ZN8MsTimer25startEv>:

void MsTimer2::start() {
	count = 0;
    18fe:	10 92 9d 02 	sts	0x029D, r1
    1902:	10 92 9e 02 	sts	0x029E, r1
    1906:	10 92 9f 02 	sts	0x029F, r1
    190a:	10 92 a0 02 	sts	0x02A0, r1
	overflowing = 0;
    190e:	10 92 a1 02 	sts	0x02A1, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
    1912:	80 91 a2 02 	lds	r24, 0x02A2
    1916:	90 91 a3 02 	lds	r25, 0x02A3
    191a:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    191e:	e0 e7       	ldi	r30, 0x70	; 112
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	80 83       	st	Z, r24
#elif defined (__AVR_ATmega32U4__)
	TIFR4 = (1<<TOV4);
	TCNT4 = 0;
	TIMSK4 = (1<<TOIE4);
#endif
}
    1928:	08 95       	ret

0000192a <_ZN8MsTimer29_overflowEv>:
	TIMSK4 = 0;
#endif
}

void MsTimer2::_overflow() {
	count += 1;
    192a:	80 91 9d 02 	lds	r24, 0x029D
    192e:	90 91 9e 02 	lds	r25, 0x029E
    1932:	a0 91 9f 02 	lds	r26, 0x029F
    1936:	b0 91 a0 02 	lds	r27, 0x02A0
    193a:	01 96       	adiw	r24, 0x01	; 1
    193c:	a1 1d       	adc	r26, r1
    193e:	b1 1d       	adc	r27, r1
    1940:	80 93 9d 02 	sts	0x029D, r24
    1944:	90 93 9e 02 	sts	0x029E, r25
    1948:	a0 93 9f 02 	sts	0x029F, r26
    194c:	b0 93 a0 02 	sts	0x02A0, r27
	
	if (count >= msecs && !overflowing) {
    1950:	80 91 9d 02 	lds	r24, 0x029D
    1954:	90 91 9e 02 	lds	r25, 0x029E
    1958:	a0 91 9f 02 	lds	r26, 0x029F
    195c:	b0 91 a0 02 	lds	r27, 0x02A0
    1960:	20 91 97 02 	lds	r18, 0x0297
    1964:	30 91 98 02 	lds	r19, 0x0298
    1968:	40 91 99 02 	lds	r20, 0x0299
    196c:	50 91 9a 02 	lds	r21, 0x029A
    1970:	82 17       	cp	r24, r18
    1972:	93 07       	cpc	r25, r19
    1974:	a4 07       	cpc	r26, r20
    1976:	b5 07       	cpc	r27, r21
    1978:	10 f1       	brcs	.+68     	; 0x19be <_ZN8MsTimer29_overflowEv+0x94>
    197a:	80 91 a1 02 	lds	r24, 0x02A1
    197e:	88 23       	and	r24, r24
    1980:	f1 f4       	brne	.+60     	; 0x19be <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 93 a1 02 	sts	0x02A1, r24
		count = count - msecs; // subtract ms to catch missed overflows
    1988:	80 91 9d 02 	lds	r24, 0x029D
    198c:	90 91 9e 02 	lds	r25, 0x029E
    1990:	a0 91 9f 02 	lds	r26, 0x029F
    1994:	b0 91 a0 02 	lds	r27, 0x02A0
    1998:	82 1b       	sub	r24, r18
    199a:	93 0b       	sbc	r25, r19
    199c:	a4 0b       	sbc	r26, r20
    199e:	b5 0b       	sbc	r27, r21
    19a0:	80 93 9d 02 	sts	0x029D, r24
    19a4:	90 93 9e 02 	sts	0x029E, r25
    19a8:	a0 93 9f 02 	sts	0x029F, r26
    19ac:	b0 93 a0 02 	sts	0x02A0, r27
					// set to 0 if you don't want this.
		(*func)();
    19b0:	e0 91 9b 02 	lds	r30, 0x029B
    19b4:	f0 91 9c 02 	lds	r31, 0x029C
    19b8:	09 95       	icall
		overflowing = 0;
    19ba:	10 92 a1 02 	sts	0x02A1, r1
    19be:	08 95       	ret

000019c0 <__vector_9>:
}

#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    19c0:	1f 92       	push	r1
    19c2:	0f 92       	push	r0
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	0f 92       	push	r0
    19c8:	11 24       	eor	r1, r1
    19ca:	2f 93       	push	r18
    19cc:	3f 93       	push	r19
    19ce:	4f 93       	push	r20
    19d0:	5f 93       	push	r21
    19d2:	6f 93       	push	r22
    19d4:	7f 93       	push	r23
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	af 93       	push	r26
    19dc:	bf 93       	push	r27
    19de:	ef 93       	push	r30
    19e0:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    19e2:	80 91 a2 02 	lds	r24, 0x02A2
    19e6:	90 91 a3 02 	lds	r25, 0x02A3
    19ea:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    19ee:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN8MsTimer29_overflowEv>
}
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <_ZN18BeerTempControllerD1Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

BeerTempController::~BeerTempController() {
    1a14:	fc 01       	movw	r30, r24
    1a16:	86 e4       	ldi	r24, 0x46	; 70
    1a18:	92 e0       	ldi	r25, 0x02	; 2
    1a1a:	91 83       	std	Z+1, r25	; 0x01
    1a1c:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    1a1e:	08 95       	ret

00001a20 <_ZN18BeerTempController14SetTempSettingEf>:
//float BeerTempController::GetTemp()
//{
//	return _Temp->GetTemperature();
//}
//
float BeerTempController::SetTempSetting(float newSetting)
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
{
	return TemperatureSetting = newSetting;
    1a24:	8c 01       	movw	r16, r24
    1a26:	0f 5a       	subi	r16, 0xAF	; 175
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	db 01       	movw	r26, r22
    1a2e:	f8 01       	movw	r30, r16
    1a30:	80 83       	st	Z, r24
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	a2 83       	std	Z+2, r26	; 0x02
    1a36:	b3 83       	std	Z+3, r27	; 0x03
}
    1a38:	ba 01       	movw	r22, r20
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	08 95       	ret

00001a42 <_ZN18BeerTempController13GetTempActualEv>:

float BeerTempController::GetTempActual()
    1a42:	fc 01       	movw	r30, r24
    1a44:	e3 5b       	subi	r30, 0xB3	; 179
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
{
	return TemperatureActual;
}
    1a48:	20 81       	ld	r18, Z
    1a4a:	31 81       	ldd	r19, Z+1	; 0x01
    1a4c:	42 81       	ldd	r20, Z+2	; 0x02
    1a4e:	53 81       	ldd	r21, Z+3	; 0x03
    1a50:	b9 01       	movw	r22, r18
    1a52:	ca 01       	movw	r24, r20
    1a54:	08 95       	ret

00001a56 <_ZN18BeerTempController14GetTempSettingEv>:

float BeerTempController::GetTempSetting()
    1a56:	fc 01       	movw	r30, r24
    1a58:	ef 5a       	subi	r30, 0xAF	; 175
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
{
	return TemperatureSetting;
}
    1a5c:	20 81       	ld	r18, Z
    1a5e:	31 81       	ldd	r19, Z+1	; 0x01
    1a60:	42 81       	ldd	r20, Z+2	; 0x02
    1a62:	53 81       	ldd	r21, Z+3	; 0x03
    1a64:	b9 01       	movw	r22, r18
    1a66:	ca 01       	movw	r24, r20
    1a68:	08 95       	ret

00001a6a <_ZN18BeerTempController11updateSlopeEv>:
	}
//	Serial.print("Beer After ");
//	Serial.println(_timer);
}

void BeerTempController::updateSlope()  //called every minute
    1a6a:	8f 92       	push	r8
    1a6c:	9f 92       	push	r9
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	fc 01       	movw	r30, r24
{
	TempHistory[TempHistoryIndex] = TempFiltSlow[3];
    1a80:	5d ec       	ldi	r21, 0xCD	; 205
    1a82:	85 2e       	mov	r8, r21
    1a84:	91 2c       	mov	r9, r1
    1a86:	88 0e       	add	r8, r24
    1a88:	99 1e       	adc	r9, r25
    1a8a:	d4 01       	movw	r26, r8
    1a8c:	0c 91       	ld	r16, X
    1a8e:	10 e0       	ldi	r17, 0x00	; 0
    1a90:	d8 01       	movw	r26, r16
    1a92:	aa 0f       	add	r26, r26
    1a94:	bb 1f       	adc	r27, r27
    1a96:	aa 0f       	add	r26, r26
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	a8 0f       	add	r26, r24
    1a9c:	b9 1f       	adc	r27, r25
    1a9e:	ab 5a       	subi	r26, 0xAB	; 171
    1aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa2:	fe 96       	adiw	r30, 0x3e	; 62
    1aa4:	c0 80       	ld	r12, Z
    1aa6:	d1 80       	ldd	r13, Z+1	; 0x01
    1aa8:	e2 80       	ldd	r14, Z+2	; 0x02
    1aaa:	f3 80       	ldd	r15, Z+3	; 0x03
    1aac:	fe 97       	sbiw	r30, 0x3e	; 62
    1aae:	cd 92       	st	X+, r12
    1ab0:	dd 92       	st	X+, r13
    1ab2:	ed 92       	st	X+, r14
    1ab4:	fc 92       	st	X, r15
    1ab6:	13 97       	sbiw	r26, 0x03	; 3
	Slope = TempHistory[TempHistoryIndex]
		- TempHistory[(TempHistoryIndex + 1) % 30];
    1ab8:	32 e4       	ldi	r19, 0x42	; 66
    1aba:	a3 2e       	mov	r10, r19
    1abc:	b1 2c       	mov	r11, r1
    1abe:	ae 0e       	add	r10, r30
    1ac0:	bf 1e       	adc	r11, r31
    1ac2:	0f 5f       	subi	r16, 0xFF	; 255
    1ac4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac6:	c8 01       	movw	r24, r16
    1ac8:	6e e1       	ldi	r22, 0x1E	; 30
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	e8 0f       	add	r30, r24
    1ada:	f9 1f       	adc	r31, r25
    1adc:	eb 5a       	subi	r30, 0xAB	; 171
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	c7 01       	movw	r24, r14
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	20 81       	ld	r18, Z
    1ae6:	31 81       	ldd	r19, Z+1	; 0x01
    1ae8:	42 81       	ldd	r20, Z+2	; 0x02
    1aea:	53 81       	ldd	r21, Z+3	; 0x03
    1aec:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    1af0:	f5 01       	movw	r30, r10
    1af2:	60 83       	st	Z, r22
    1af4:	71 83       	std	Z+1, r23	; 0x01
    1af6:	82 83       	std	Z+2, r24	; 0x02
    1af8:	93 83       	std	Z+3, r25	; 0x03
	TempHistoryIndex = (TempHistoryIndex + 1) % 30;
    1afa:	c8 01       	movw	r24, r16
    1afc:	6e e1       	ldi	r22, 0x1E	; 30
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
    1b04:	d4 01       	movw	r26, r8
    1b06:	8c 93       	st	X, r24
	Services &= ~updateSlope_SERVICE;		// reset the service flag
    1b08:	80 91 b6 02 	lds	r24, 0x02B6
    1b0c:	8f 7d       	andi	r24, 0xDF	; 223
    1b0e:	80 93 b6 02 	sts	0x02B6, r24
}
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	08 95       	ret

00001b28 <_ZN18BeerTempController30updateSlowFilteredTemperaturesEv>:
void BeerTempController::updateSlowFilteredTemperatures() //called every 10 seconds
    1b28:	2f 92       	push	r2
    1b2a:	3f 92       	push	r3
    1b2c:	4f 92       	push	r4
    1b2e:	5f 92       	push	r5
    1b30:	6f 92       	push	r6
    1b32:	7f 92       	push	r7
    1b34:	8f 92       	push	r8
    1b36:	9f 92       	push	r9
    1b38:	af 92       	push	r10
    1b3a:	bf 92       	push	r11
    1b3c:	cf 92       	push	r12
    1b3e:	df 92       	push	r13
    1b40:	ef 92       	push	r14
    1b42:	ff 92       	push	r15
    1b44:	0f 93       	push	r16
    1b46:	1f 93       	push	r17
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	2a 97       	sbiw	r28, 0x0a	; 10
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	fc 01       	movw	r30, r24
{

	TempSlow[0] = TempSlow[1];
    1b5e:	66 a1       	ldd	r22, Z+38	; 0x26
    1b60:	77 a1       	ldd	r23, Z+39	; 0x27
    1b62:	80 a5       	ldd	r24, Z+40	; 0x28
    1b64:	91 a5       	ldd	r25, Z+41	; 0x29
    1b66:	62 a3       	std	Z+34, r22	; 0x22
    1b68:	73 a3       	std	Z+35, r23	; 0x23
    1b6a:	84 a3       	std	Z+36, r24	; 0x24
    1b6c:	95 a3       	std	Z+37, r25	; 0x25
	TempSlow[1] = TempSlow[2];
    1b6e:	62 a4       	ldd	r6, Z+42	; 0x2a
    1b70:	73 a4       	ldd	r7, Z+43	; 0x2b
    1b72:	84 a4       	ldd	r8, Z+44	; 0x2c
    1b74:	95 a4       	ldd	r9, Z+45	; 0x2d
    1b76:	66 a2       	std	Z+38, r6	; 0x26
    1b78:	77 a2       	std	Z+39, r7	; 0x27
    1b7a:	80 a6       	std	Z+40, r8	; 0x28
    1b7c:	91 a6       	std	Z+41, r9	; 0x29
	TempSlow[2] = TempSlow[3];
    1b7e:	a6 a4       	ldd	r10, Z+46	; 0x2e
    1b80:	b7 a4       	ldd	r11, Z+47	; 0x2f
    1b82:	c0 a8       	ldd	r12, Z+48	; 0x30
    1b84:	d1 a8       	ldd	r13, Z+49	; 0x31
    1b86:	a2 a6       	std	Z+42, r10	; 0x2a
    1b88:	b3 a6       	std	Z+43, r11	; 0x2b
    1b8a:	c4 a6       	std	Z+44, r12	; 0x2c
    1b8c:	d5 a6       	std	Z+45, r13	; 0x2d
	TempSlow[3] = TempFiltFast[3];
    1b8e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1b90:	37 8d       	ldd	r19, Z+31	; 0x1f
    1b92:	40 a1       	ldd	r20, Z+32	; 0x20
    1b94:	51 a1       	ldd	r21, Z+33	; 0x21
    1b96:	26 a7       	std	Z+46, r18	; 0x2e
    1b98:	37 a7       	std	Z+47, r19	; 0x2f
    1b9a:	40 ab       	std	Z+48, r20	; 0x30
    1b9c:	51 ab       	std	Z+49, r21	; 0x31

	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=0.1Hz)
	TempFiltSlow[0] = TempFiltSlow[1];
    1b9e:	26 a8       	ldd	r2, Z+54	; 0x36
    1ba0:	37 a8       	ldd	r3, Z+55	; 0x37
    1ba2:	40 ac       	ldd	r4, Z+56	; 0x38
    1ba4:	51 ac       	ldd	r5, Z+57	; 0x39
    1ba6:	22 aa       	std	Z+50, r2	; 0x32
    1ba8:	33 aa       	std	Z+51, r3	; 0x33
    1baa:	44 aa       	std	Z+52, r4	; 0x34
    1bac:	55 aa       	std	Z+53, r5	; 0x35
	TempFiltSlow[1] = TempFiltSlow[2];
    1bae:	e2 ac       	ldd	r14, Z+58	; 0x3a
    1bb0:	f3 ac       	ldd	r15, Z+59	; 0x3b
    1bb2:	04 ad       	ldd	r16, Z+60	; 0x3c
    1bb4:	15 ad       	ldd	r17, Z+61	; 0x3d
    1bb6:	ed 82       	std	Y+5, r14	; 0x05
    1bb8:	fe 82       	std	Y+6, r15	; 0x06
    1bba:	0f 83       	std	Y+7, r16	; 0x07
    1bbc:	18 87       	std	Y+8, r17	; 0x08
    1bbe:	e6 aa       	std	Z+54, r14	; 0x36
    1bc0:	f7 aa       	std	Z+55, r15	; 0x37
    1bc2:	00 af       	std	Z+56, r16	; 0x38
    1bc4:	11 af       	std	Z+57, r17	; 0x39
	TempFiltSlow[2] = TempFiltSlow[3];
    1bc6:	8f 01       	movw	r16, r30
    1bc8:	02 5c       	subi	r16, 0xC2	; 194
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	1a 87       	std	Y+10, r17	; 0x0a
    1bce:	09 87       	std	Y+9, r16	; 0x09
    1bd0:	d8 01       	movw	r26, r16
    1bd2:	ed 90       	ld	r14, X+
    1bd4:	fd 90       	ld	r15, X+
    1bd6:	0d 91       	ld	r16, X+
    1bd8:	1c 91       	ld	r17, X
    1bda:	e9 82       	std	Y+1, r14	; 0x01
    1bdc:	fa 82       	std	Y+2, r15	; 0x02
    1bde:	0b 83       	std	Y+3, r16	; 0x03
    1be0:	1c 83       	std	Y+4, r17	; 0x04
    1be2:	e2 ae       	std	Z+58, r14	; 0x3a
    1be4:	f3 ae       	std	Z+59, r15	; 0x3b
    1be6:	04 af       	std	Z+60, r16	; 0x3c
    1be8:	15 af       	std	Z+61, r17	; 0x3d
	TempFiltSlow[3] = (TempSlow[0] + TempSlow[3]
        + 3 * (TempSlow[1] + TempSlow[2])) / 3.430944333e+04
        + (0.8818931306 * TempFiltSlow[0])
        + (-2.7564831952 * TempFiltSlow[1])
        + (2.8743568927 * TempFiltSlow[2]);
    1bea:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1bee:	7b 01       	movw	r14, r22
    1bf0:	8c 01       	movw	r16, r24
    1bf2:	c4 01       	movw	r24, r8
    1bf4:	b3 01       	movw	r22, r6
    1bf6:	a6 01       	movw	r20, r12
    1bf8:	95 01       	movw	r18, r10
    1bfa:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e4       	ldi	r20, 0x40	; 64
    1c04:	50 e4       	ldi	r21, 0x40	; 64
    1c06:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1c0a:	9b 01       	movw	r18, r22
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	c8 01       	movw	r24, r16
    1c10:	b7 01       	movw	r22, r14
    1c12:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1c16:	21 e7       	ldi	r18, 0x71	; 113
    1c18:	35 e0       	ldi	r19, 0x05	; 5
    1c1a:	46 e0       	ldi	r20, 0x06	; 6
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    1c22:	7b 01       	movw	r14, r22
    1c24:	8c 01       	movw	r16, r24
    1c26:	c2 01       	movw	r24, r4
    1c28:	b1 01       	movw	r22, r2
    1c2a:	20 ec       	ldi	r18, 0xC0	; 192
    1c2c:	33 ec       	ldi	r19, 0xC3	; 195
    1c2e:	41 e6       	ldi	r20, 0x61	; 97
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1c42:	7b 01       	movw	r14, r22
    1c44:	8c 01       	movw	r16, r24
    1c46:	6d 81       	ldd	r22, Y+5	; 0x05
    1c48:	7e 81       	ldd	r23, Y+6	; 0x06
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	98 85       	ldd	r25, Y+8	; 0x08
    1c4e:	28 e3       	ldi	r18, 0x38	; 56
    1c50:	3a e6       	ldi	r19, 0x6A	; 106
    1c52:	40 e3       	ldi	r20, 0x30	; 48
    1c54:	50 ec       	ldi	r21, 0xC0	; 192
    1c56:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1c5a:	9b 01       	movw	r18, r22
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	c8 01       	movw	r24, r16
    1c60:	b7 01       	movw	r22, r14
    1c62:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1c66:	7b 01       	movw	r14, r22
    1c68:	8c 01       	movw	r16, r24
    1c6a:	69 81       	ldd	r22, Y+1	; 0x01
    1c6c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	27 e7       	ldi	r18, 0x77	; 119
    1c74:	35 ef       	ldi	r19, 0xF5	; 245
    1c76:	47 e3       	ldi	r20, 0x37	; 55
    1c78:	50 e4       	ldi	r21, 0x40	; 64
    1c7a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	c8 01       	movw	r24, r16
    1c84:	b7 01       	movw	r22, r14
    1c86:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1c8a:	e9 85       	ldd	r30, Y+9	; 0x09
    1c8c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1c8e:	60 83       	st	Z, r22
    1c90:	71 83       	std	Z+1, r23	; 0x01
    1c92:	82 83       	std	Z+2, r24	; 0x02
    1c94:	93 83       	std	Z+3, r25	; 0x03

	Services &= ~updateSlowFilteredTemperatures_SERVICE;		// reset the service flag
    1c96:	80 91 b6 02 	lds	r24, 0x02B6
    1c9a:	8f 7d       	andi	r24, 0xDF	; 223
    1c9c:	80 93 b6 02 	sts	0x02B6, r24
}
    1ca0:	2a 96       	adiw	r28, 0x0a	; 10
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	cf 90       	pop	r12
    1cbc:	bf 90       	pop	r11
    1cbe:	af 90       	pop	r10
    1cc0:	9f 90       	pop	r9
    1cc2:	8f 90       	pop	r8
    1cc4:	7f 90       	pop	r7
    1cc6:	6f 90       	pop	r6
    1cc8:	5f 90       	pop	r5
    1cca:	4f 90       	pop	r4
    1ccc:	3f 90       	pop	r3
    1cce:	2f 90       	pop	r2
    1cd0:	08 95       	ret

00001cd2 <_ZN18BeerTempController18updateTemperaturesEv>:


void BeerTempController::updateTemperatures() { //called every 200 milliseconds
    1cd2:	4f 92       	push	r4
    1cd4:	5f 92       	push	r5
    1cd6:	6f 92       	push	r6
    1cd8:	7f 92       	push	r7
    1cda:	8f 92       	push	r8
    1cdc:	9f 92       	push	r9
    1cde:	af 92       	push	r10
    1ce0:	bf 92       	push	r11
    1ce2:	cf 92       	push	r12
    1ce4:	df 92       	push	r13
    1ce6:	ef 92       	push	r14
    1ce8:	ff 92       	push	r15
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <_ZN18BeerTempController18updateTemperaturesEv+0x22>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <_ZN18BeerTempController18updateTemperaturesEv+0x24>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	8c 01       	movw	r16, r24
//	Serial.println("Beer1");
//	Serial.println(TempFast[1]);
	TempFast[0] = TempFast[1];
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	86 81       	ldd	r24, Z+6	; 0x06
    1d00:	97 81       	ldd	r25, Z+7	; 0x07
    1d02:	a0 85       	ldd	r26, Z+8	; 0x08
    1d04:	b1 85       	ldd	r27, Z+9	; 0x09
    1d06:	82 83       	std	Z+2, r24	; 0x02
    1d08:	93 83       	std	Z+3, r25	; 0x03
    1d0a:	a4 83       	std	Z+4, r26	; 0x04
    1d0c:	b5 83       	std	Z+5, r27	; 0x05
//	Serial.println("Beer2");
//	Serial.println(TempFast[2]);
	TempFast[1] = TempFast[2];
    1d0e:	82 85       	ldd	r24, Z+10	; 0x0a
    1d10:	93 85       	ldd	r25, Z+11	; 0x0b
    1d12:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d14:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d16:	86 83       	std	Z+6, r24	; 0x06
    1d18:	97 83       	std	Z+7, r25	; 0x07
    1d1a:	a0 87       	std	Z+8, r26	; 0x08
    1d1c:	b1 87       	std	Z+9, r27	; 0x09
//	Serial.println("Beer3");
//	Serial.println(TempFast[3]);
	TempFast[2] = TempFast[3];
    1d1e:	86 85       	ldd	r24, Z+14	; 0x0e
    1d20:	97 85       	ldd	r25, Z+15	; 0x0f
    1d22:	a0 89       	ldd	r26, Z+16	; 0x10
    1d24:	b1 89       	ldd	r27, Z+17	; 0x11
    1d26:	82 87       	std	Z+10, r24	; 0x0a
    1d28:	93 87       	std	Z+11, r25	; 0x0b
    1d2a:	a4 87       	std	Z+12, r26	; 0x0c
    1d2c:	b5 87       	std	Z+13, r27	; 0x0d
	TempFast[3] = _Temp->GetTemperature();
    1d2e:	ea 5b       	subi	r30, 0xBA	; 186
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN11TempSensors14GetTemperatureEv>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	d8 01       	movw	r26, r16
    1d40:	1e 96       	adiw	r26, 0x0e	; 14
    1d42:	6d 93       	st	X+, r22
    1d44:	7d 93       	st	X+, r23
    1d46:	8d 93       	st	X+, r24
    1d48:	9c 93       	st	X, r25
    1d4a:	51 97       	sbiw	r26, 0x11	; 17
//	}

	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=5Hz)
//	Serial.println("Beer5");
//	Serial.println(TempFiltFast[1]);
	TempFiltFast[0] = TempFiltFast[1];
    1d4c:	56 96       	adiw	r26, 0x16	; 22
    1d4e:	8d 90       	ld	r8, X+
    1d50:	9d 90       	ld	r9, X+
    1d52:	ad 90       	ld	r10, X+
    1d54:	bc 90       	ld	r11, X
    1d56:	59 97       	sbiw	r26, 0x19	; 25
    1d58:	f8 01       	movw	r30, r16
    1d5a:	82 8a       	std	Z+18, r8	; 0x12
    1d5c:	93 8a       	std	Z+19, r9	; 0x13
    1d5e:	a4 8a       	std	Z+20, r10	; 0x14
    1d60:	b5 8a       	std	Z+21, r11	; 0x15
//	Serial.println("Beer6");
//	Serial.println(TempFiltFast[2]);
	TempFiltFast[1] = TempFiltFast[2];
    1d62:	42 8c       	ldd	r4, Z+26	; 0x1a
    1d64:	53 8c       	ldd	r5, Z+27	; 0x1b
    1d66:	64 8c       	ldd	r6, Z+28	; 0x1c
    1d68:	75 8c       	ldd	r7, Z+29	; 0x1d
    1d6a:	56 96       	adiw	r26, 0x16	; 22
    1d6c:	4d 92       	st	X+, r4
    1d6e:	5d 92       	st	X+, r5
    1d70:	6d 92       	st	X+, r6
    1d72:	7c 92       	st	X, r7
    1d74:	59 97       	sbiw	r26, 0x19	; 25
//	Serial.println("Beer7");
//	Serial.println(TempFiltFast[3]);
	TempFiltFast[2] = TempFiltFast[3];
    1d76:	5e 96       	adiw	r26, 0x1e	; 30
    1d78:	8d 91       	ld	r24, X+
    1d7a:	9d 91       	ld	r25, X+
    1d7c:	0d 90       	ld	r0, X+
    1d7e:	bc 91       	ld	r27, X
    1d80:	a0 2d       	mov	r26, r0
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	ab 83       	std	Y+3, r26	; 0x03
    1d88:	bc 83       	std	Y+4, r27	; 0x04
    1d8a:	82 8f       	std	Z+26, r24	; 0x1a
    1d8c:	93 8f       	std	Z+27, r25	; 0x1b
    1d8e:	a4 8f       	std	Z+28, r26	; 0x1c
    1d90:	b5 8f       	std	Z+29, r27	; 0x1d
//	Serial.println(TempFast[0]);
	TempFiltFast[3] = (TempFast[0] + TempFast[3]
		+ 3 * (TempFast[1] + TempFast[2])) / 3.430944333e+04
		+ (0.8818931306 * TempFiltFast[0])
		+ (-2.7564831952 * TempFiltFast[1])
		+ (2.8743568927 * TempFiltFast[2]);
    1d92:	62 81       	ldd	r22, Z+2	; 0x02
    1d94:	73 81       	ldd	r23, Z+3	; 0x03
    1d96:	84 81       	ldd	r24, Z+4	; 0x04
    1d98:	95 81       	ldd	r25, Z+5	; 0x05
    1d9a:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1d9e:	6b 01       	movw	r12, r22
    1da0:	7c 01       	movw	r14, r24
    1da2:	d8 01       	movw	r26, r16
    1da4:	16 96       	adiw	r26, 0x06	; 6
    1da6:	6d 91       	ld	r22, X+
    1da8:	7d 91       	ld	r23, X+
    1daa:	8d 91       	ld	r24, X+
    1dac:	9c 91       	ld	r25, X
    1dae:	19 97       	sbiw	r26, 0x09	; 9
    1db0:	1a 96       	adiw	r26, 0x0a	; 10
    1db2:	2d 91       	ld	r18, X+
    1db4:	3d 91       	ld	r19, X+
    1db6:	4d 91       	ld	r20, X+
    1db8:	5c 91       	ld	r21, X
    1dba:	1d 97       	sbiw	r26, 0x0d	; 13
    1dbc:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e4       	ldi	r20, 0x40	; 64
    1dc6:	50 e4       	ldi	r21, 0x40	; 64
    1dc8:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1dcc:	9b 01       	movw	r18, r22
    1dce:	ac 01       	movw	r20, r24
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	b6 01       	movw	r22, r12
    1dd4:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1dd8:	21 e7       	ldi	r18, 0x71	; 113
    1dda:	35 e0       	ldi	r19, 0x05	; 5
    1ddc:	46 e0       	ldi	r20, 0x06	; 6
    1dde:	57 e4       	ldi	r21, 0x47	; 71
    1de0:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    1de4:	6b 01       	movw	r12, r22
    1de6:	7c 01       	movw	r14, r24
    1de8:	c5 01       	movw	r24, r10
    1dea:	b4 01       	movw	r22, r8
    1dec:	20 ec       	ldi	r18, 0xC0	; 192
    1dee:	33 ec       	ldi	r19, 0xC3	; 195
    1df0:	41 e6       	ldi	r20, 0x61	; 97
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1df8:	9b 01       	movw	r18, r22
    1dfa:	ac 01       	movw	r20, r24
    1dfc:	c7 01       	movw	r24, r14
    1dfe:	b6 01       	movw	r22, r12
    1e00:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1e04:	6b 01       	movw	r12, r22
    1e06:	7c 01       	movw	r14, r24
    1e08:	c3 01       	movw	r24, r6
    1e0a:	b2 01       	movw	r22, r4
    1e0c:	28 e3       	ldi	r18, 0x38	; 56
    1e0e:	3a e6       	ldi	r19, 0x6A	; 106
    1e10:	40 e3       	ldi	r20, 0x30	; 48
    1e12:	50 ec       	ldi	r21, 0xC0	; 192
    1e14:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1e18:	9b 01       	movw	r18, r22
    1e1a:	ac 01       	movw	r20, r24
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	b6 01       	movw	r22, r12
    1e20:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1e24:	6b 01       	movw	r12, r22
    1e26:	7c 01       	movw	r14, r24
    1e28:	69 81       	ldd	r22, Y+1	; 0x01
    1e2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	27 e7       	ldi	r18, 0x77	; 119
    1e32:	35 ef       	ldi	r19, 0xF5	; 245
    1e34:	47 e3       	ldi	r20, 0x37	; 55
    1e36:	50 e4       	ldi	r21, 0x40	; 64
    1e38:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	9b 01       	movw	r18, r22
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	f8 01       	movw	r30, r16
    1e50:	26 8f       	std	Z+30, r18	; 0x1e
    1e52:	37 8f       	std	Z+31, r19	; 0x1f
    1e54:	40 a3       	std	Z+32, r20	; 0x20
    1e56:	51 a3       	std	Z+33, r21	; 0x21
//	Serial.println("Beer9");
//	Serial.println(TempFiltFast[3]);
	TemperatureActual = TempFiltFast[3];
    1e58:	03 5b       	subi	r16, 0xB3	; 179
    1e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 83       	st	Z, r24
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	a2 83       	std	Z+2, r26	; 0x02
    1e66:	b3 83       	std	Z+3, r27	; 0x03

	Services &= ~updateTemperatures_SERVICE;		// reset the service flag
    1e68:	80 91 b6 02 	lds	r24, 0x02B6
    1e6c:	8f 7e       	andi	r24, 0xEF	; 239
    1e6e:	80 93 b6 02 	sts	0x02B6, r24
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	1f 91       	pop	r17
    1e80:	0f 91       	pop	r16
    1e82:	ff 90       	pop	r15
    1e84:	ef 90       	pop	r14
    1e86:	df 90       	pop	r13
    1e88:	cf 90       	pop	r12
    1e8a:	bf 90       	pop	r11
    1e8c:	af 90       	pop	r10
    1e8e:	9f 90       	pop	r9
    1e90:	8f 90       	pop	r8
    1e92:	7f 90       	pop	r7
    1e94:	6f 90       	pop	r6
    1e96:	5f 90       	pop	r5
    1e98:	4f 90       	pop	r4
    1e9a:	08 95       	ret

00001e9c <_ZN18BeerTempController11UpdateTimerEv>:
{
	return 0;
	//Run the algorithm
}

void BeerTempController::UpdateTimer()
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	ec 01       	movw	r28, r24
{
	_timer+=200;
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	e8 5b       	subi	r30, 0xB8	; 184
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	68 53       	subi	r22, 0x38	; 56
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	9f 4f       	sbci	r25, 0xFF	; 255
    1ebc:	60 83       	st	Z, r22
    1ebe:	71 83       	std	Z+1, r23	; 0x01
    1ec0:	82 83       	std	Z+2, r24	; 0x02
    1ec2:	93 83       	std	Z+3, r25	; 0x03

//	Serial.print("Beer Before ");
//	Serial.println(_timer);
	//Check the timers
	if ((_timer % 200) == 0){
    1ec4:	28 ec       	ldi	r18, 0xC8	; 200
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    1ed0:	61 15       	cp	r22, r1
    1ed2:	71 05       	cpc	r23, r1
    1ed4:	81 05       	cpc	r24, r1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	19 f4       	brne	.+6      	; 0x1ee0 <_ZN18BeerTempController11UpdateTimerEv+0x44>
//		Serial.println("Updating Beer Fast Temps");
		updateTemperatures();					// Update Fast Temperatures every 200ms
    1eda:	ce 01       	movw	r24, r28
    1edc:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_ZN18BeerTempController18updateTemperaturesEv>
	}
	if((_timer % 10000) == 0){					// Update Slow Temperatures every 10 seconds
    1ee0:	c8 5b       	subi	r28, 0xB8	; 184
    1ee2:	df 4f       	sbci	r29, 0xFF	; 255
    1ee4:	68 81       	ld	r22, Y
    1ee6:	79 81       	ldd	r23, Y+1	; 0x01
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	9b 81       	ldd	r25, Y+3	; 0x03
    1eec:	c8 54       	subi	r28, 0x48	; 72
    1eee:	d0 40       	sbci	r29, 0x00	; 0
    1ef0:	20 e1       	ldi	r18, 0x10	; 16
    1ef2:	37 e2       	ldi	r19, 0x27	; 39
    1ef4:	40 e0       	ldi	r20, 0x00	; 0
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    1efc:	61 15       	cp	r22, r1
    1efe:	71 05       	cpc	r23, r1
    1f00:	81 05       	cpc	r24, r1
    1f02:	91 05       	cpc	r25, r1
    1f04:	91 f5       	brne	.+100    	; 0x1f6a <_ZN18BeerTempController11UpdateTimerEv+0xce>
//		Serial.println("Updating Beer Slow Temps");
		updateSlowFilteredTemperatures();
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <_ZN18BeerTempController30updateSlowFilteredTemperaturesEv>
		Serial.print(TempFast[3]);
    1f0c:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f0e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f10:	68 89       	ldd	r22, Y+16	; 0x10
    1f12:	79 89       	ldd	r23, Y+17	; 0x11
    1f14:	8c e7       	ldi	r24, 0x7C	; 124
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	22 e0       	ldi	r18, 0x02	; 2
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    1f20:	8c e7       	ldi	r24, 0x7C	; 124
    1f22:	93 e0       	ldi	r25, 0x03	; 3
    1f24:	6c e2       	ldi	r22, 0x2C	; 44
    1f26:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
		Serial.print(TempFiltFast[3]);
    1f2a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    1f2c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1f2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f30:	79 a1       	ldd	r23, Y+33	; 0x21
    1f32:	8c e7       	ldi	r24, 0x7C	; 124
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	22 e0       	ldi	r18, 0x02	; 2
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    1f3e:	8c e7       	ldi	r24, 0x7C	; 124
    1f40:	93 e0       	ldi	r25, 0x03	; 3
    1f42:	6c e2       	ldi	r22, 0x2C	; 44
    1f44:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
		Serial.print(TempFiltSlow[3]);
    1f48:	ee 96       	adiw	r28, 0x3e	; 62
    1f4a:	48 81       	ld	r20, Y
    1f4c:	59 81       	ldd	r21, Y+1	; 0x01
    1f4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f50:	7b 81       	ldd	r23, Y+3	; 0x03
    1f52:	ee 97       	sbiw	r28, 0x3e	; 62
    1f54:	8c e7       	ldi	r24, 0x7C	; 124
    1f56:	93 e0       	ldi	r25, 0x03	; 3
    1f58:	22 e0       	ldi	r18, 0x02	; 2
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    1f60:	8c e7       	ldi	r24, 0x7C	; 124
    1f62:	93 e0       	ldi	r25, 0x03	; 3
    1f64:	6c e2       	ldi	r22, 0x2C	; 44
    1f66:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
	}
	if((_timer % 60000) == 0){
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	08 5b       	subi	r16, 0xB8	; 184
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	f8 01       	movw	r30, r16
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e6       	ldi	r18, 0x60	; 96
    1f7c:	3a ee       	ldi	r19, 0xEA	; 234
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    1f86:	61 15       	cp	r22, r1
    1f88:	71 05       	cpc	r23, r1
    1f8a:	81 05       	cpc	r24, r1
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	41 f4       	brne	.+16     	; 0x1fa0 <_ZN18BeerTempController11UpdateTimerEv+0x104>
//		Serial.println("Updating Beer Slope");
		updateSlope();
    1f90:	ce 01       	movw	r24, r28
    1f92:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <_ZN18BeerTempController11updateSlopeEv>
		_timer = 0;
    1f96:	f8 01       	movw	r30, r16
    1f98:	10 82       	st	Z, r1
    1f9a:	11 82       	std	Z+1, r1	; 0x01
    1f9c:	12 82       	std	Z+2, r1	; 0x02
    1f9e:	13 82       	std	Z+3, r1	; 0x03
	}
//	Serial.print("Beer After ");
//	Serial.println(_timer);
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	08 95       	ret

00001faa <_ZN18BeerTempControllerD0Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

BeerTempController::~BeerTempController() {
    1faa:	fc 01       	movw	r30, r24
    1fac:	86 e4       	ldi	r24, 0x46	; 70
    1fae:	92 e0       	ldi	r25, 0x02	; 2
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
    1fba:	08 95       	ret

00001fbc <_ZN18BeerTempControllerC1EPKch>:
 */

#include "BeerTempController.h"
#include "TCLExample.h"

BeerTempController::BeerTempController(const char* initName, uint8_t initIndex)
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	ec 01       	movw	r28, r24
    1fc6:	86 e4       	ldi	r24, 0x46	; 70
    1fc8:	92 e0       	ldi	r25, 0x02	; 2
    1fca:	99 83       	std	Y+1, r25	; 0x01
    1fcc:	88 83       	st	Y, r24
{
	_timer = 0;
    1fce:	c8 5b       	subi	r28, 0xB8	; 184
    1fd0:	df 4f       	sbci	r29, 0xFF	; 255
    1fd2:	18 82       	st	Y, r1
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    1fd6:	1a 82       	std	Y+2, r1	; 0x02
    1fd8:	1b 82       	std	Y+3, r1	; 0x03
    1fda:	c8 54       	subi	r28, 0x48	; 72
    1fdc:	d0 40       	sbci	r29, 0x00	; 0
	_Temp = new TempSensors("Beer",1);
    1fde:	86 e2       	ldi	r24, 0x26	; 38
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    1fe6:	18 2f       	mov	r17, r24
    1fe8:	09 2f       	mov	r16, r25
    1fea:	66 e0       	ldi	r22, 0x06	; 6
    1fec:	71 e0       	ldi	r23, 0x01	; 1
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN11TempSensorsC1EPKch>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ea 5b       	subi	r30, 0xBA	; 186
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	10 83       	st	Z, r17
    1ffc:	01 83       	std	Z+1, r16	; 0x01

	_Temp->_lastTempRequest = 0;
    1ffe:	10 92 f3 02 	sts	0x02F3, r1
    2002:	10 92 f2 02 	sts	0x02F2, r1

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
    2006:	cf 5a       	subi	r28, 0xAF	; 175
    2008:	df 4f       	sbci	r29, 0xFF	; 255
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	aa e7       	ldi	r26, 0x7A	; 122
    2010:	b3 e4       	ldi	r27, 0x43	; 67
    2012:	88 83       	st	Y, r24
    2014:	99 83       	std	Y+1, r25	; 0x01
    2016:	aa 83       	std	Y+2, r26	; 0x02
    2018:	bb 83       	std	Y+3, r27	; 0x03
    201a:	c1 55       	subi	r28, 0x51	; 81
    201c:	d0 40       	sbci	r29, 0x00	; 0
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
    201e:	80 81       	ld	r24, Z
    2020:	91 81       	ldd	r25, Z+1	; 0x01
    2022:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN11TempSensors14GetTemperatureEv>
    2026:	fe 01       	movw	r30, r28
    2028:	e3 5b       	subi	r30, 0xB3	; 179
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 83       	st	Z, r22
    202e:	71 83       	std	Z+1, r23	; 0x01
    2030:	82 83       	std	Z+2, r24	; 0x02
    2032:	93 83       	std	Z+3, r25	; 0x03
    2034:	9e 01       	movw	r18, r28
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
    2036:	bf 01       	movw	r22, r30
	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    2038:	ae 01       	movw	r20, r28
    203a:	40 5f       	subi	r20, 0xF0	; 240
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
		TempFast[i] = TemperatureActual;
    203e:	fb 01       	movw	r30, r22
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	a2 81       	ldd	r26, Z+2	; 0x02
    2046:	b3 81       	ldd	r27, Z+3	; 0x03
    2048:	f9 01       	movw	r30, r18
    204a:	82 83       	std	Z+2, r24	; 0x02
    204c:	93 83       	std	Z+3, r25	; 0x03
    204e:	a4 83       	std	Z+4, r26	; 0x04
    2050:	b5 83       	std	Z+5, r27	; 0x05
		TempFiltFast[i] = TemperatureActual;
    2052:	82 8b       	std	Z+18, r24	; 0x12
    2054:	93 8b       	std	Z+19, r25	; 0x13
    2056:	a4 8b       	std	Z+20, r26	; 0x14
    2058:	b5 8b       	std	Z+21, r27	; 0x15
    205a:	2c 5f       	subi	r18, 0xFC	; 252
    205c:	3f 4f       	sbci	r19, 0xFF	; 255
	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    205e:	24 17       	cp	r18, r20
    2060:	35 07       	cpc	r19, r21
    2062:	69 f7       	brne	.-38     	; 0x203e <_ZN18BeerTempControllerC1EPKch+0x82>
    2064:	fe 01       	movw	r30, r28
    2066:	b2 96       	adiw	r30, 0x22	; 34
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2068:	9e 01       	movw	r18, r28
    206a:	2e 5c       	subi	r18, 0xCE	; 206
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
		TempSlow[i] = TempFiltFast[3];
    206e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2070:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2072:	a8 a1       	ldd	r26, Y+32	; 0x20
    2074:	b9 a1       	ldd	r27, Y+33	; 0x21
    2076:	80 83       	st	Z, r24
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	a2 83       	std	Z+2, r26	; 0x02
    207c:	b3 83       	std	Z+3, r27	; 0x03
		TempFiltSlow[i] = TempFiltFast[3];
    207e:	80 8b       	std	Z+16, r24	; 0x10
    2080:	91 8b       	std	Z+17, r25	; 0x11
    2082:	a2 8b       	std	Z+18, r26	; 0x12
    2084:	b3 8b       	std	Z+19, r27	; 0x13
    2086:	34 96       	adiw	r30, 0x04	; 4
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2088:	e2 17       	cp	r30, r18
    208a:	f3 07       	cpc	r31, r19
    208c:	81 f7       	brne	.-32     	; 0x206e <_ZN18BeerTempControllerC1EPKch+0xb2>
		TempSlow[i] = TempFiltFast[3];
		TempFiltSlow[i] = TempFiltFast[3];
	}
//		updateSlowFilteredTemperatures();

	Slope = 0;
    208e:	ce 5b       	subi	r28, 0xBE	; 190
    2090:	df 4f       	sbci	r29, 0xFF	; 255
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	88 83       	st	Y, r24
    209c:	99 83       	std	Y+1, r25	; 0x01
    209e:	aa 83       	std	Y+2, r26	; 0x02
    20a0:	bb 83       	std	Y+3, r27	; 0x03
    20a2:	c2 54       	subi	r28, 0x42	; 66
    20a4:	d0 40       	sbci	r29, 0x00	; 0
	TempHistoryIndex = 0;
    20a6:	fe 01       	movw	r30, r28
    20a8:	e3 53       	subi	r30, 0x33	; 51
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	10 82       	st	Z, r1
    20ae:	9e 01       	movw	r18, r28
    20b0:	2b 5a       	subi	r18, 0xAB	; 171
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255

	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
    20b4:	ee 96       	adiw	r28, 0x3e	; 62
//		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    20b6:	af 01       	movw	r20, r30
		TempHistory[i] = TempFiltSlow[3];
    20b8:	88 81       	ld	r24, Y
    20ba:	99 81       	ldd	r25, Y+1	; 0x01
    20bc:	aa 81       	ldd	r26, Y+2	; 0x02
    20be:	bb 81       	ldd	r27, Y+3	; 0x03
    20c0:	f9 01       	movw	r30, r18
    20c2:	81 93       	st	Z+, r24
    20c4:	91 93       	st	Z+, r25
    20c6:	a1 93       	st	Z+, r26
    20c8:	b1 93       	st	Z+, r27
    20ca:	9f 01       	movw	r18, r30
//		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    20cc:	e4 17       	cp	r30, r20
    20ce:	f5 07       	cpc	r31, r21
    20d0:	99 f7       	brne	.-26     	; 0x20b8 <_ZN18BeerTempControllerC1EPKch+0xfc>
		TempHistory[i] = TempFiltSlow[3];
	}
}
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	08 95       	ret

000020dc <_ZN6ButtonD1Ev>:
    20dc:	08 95       	ret

000020de <_ZN6Button9IsPressedEv>:

bool Button::IsPressed(){
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	ec 01       	movw	r28, r24
	int pinread;		// MUST BE int to do AnalogRead
	if((pinread = analogRead(_pin)) > 900){
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <analogRead>
    20ea:	2c 81       	ldd	r18, Y+4	; 0x04
    20ec:	85 58       	subi	r24, 0x85	; 133
    20ee:	93 40       	sbci	r25, 0x03	; 3
    20f0:	e4 f0       	brlt	.+56     	; 0x212a <_ZN6Button9IsPressedEv+0x4c>
	  if(_lastState == 0){        // is this the first time it was pressed?
    20f2:	22 23       	and	r18, r18
    20f4:	19 f4       	brne	.+6      	; 0x20fc <_ZN6Button9IsPressedEv+0x1e>
		  _lastState++;              // show the button is already pressed
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	8c 83       	std	Y+4, r24	; 0x04
    20fa:	1e c0       	rjmp	.+60     	; 0x2138 <_ZN6Button9IsPressedEv+0x5a>
	  }
	  else if ((_lastState) && ((millis() - _lastMillis) > BUTTON_BOUNCE)){
    20fc:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    2100:	28 81       	ld	r18, Y
    2102:	39 81       	ldd	r19, Y+1	; 0x01
    2104:	4a 81       	ldd	r20, Y+2	; 0x02
    2106:	5b 81       	ldd	r21, Y+3	; 0x03
    2108:	62 1b       	sub	r22, r18
    210a:	73 0b       	sbc	r23, r19
    210c:	84 0b       	sbc	r24, r20
    210e:	95 0b       	sbc	r25, r21
    2110:	6b 3f       	cpi	r22, 0xFB	; 251
    2112:	71 05       	cpc	r23, r1
    2114:	81 05       	cpc	r24, r1
    2116:	91 05       	cpc	r25, r1
    2118:	78 f0       	brcs	.+30     	; 0x2138 <_ZN6Button9IsPressedEv+0x5a>
          _lastMillis = millis();      //   capture the millis for the next go around
    211a:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    211e:	68 83       	st	Y, r22
    2120:	79 83       	std	Y+1, r23	; 0x01
    2122:	8a 83       	std	Y+2, r24	; 0x02
    2124:	9b 83       	std	Y+3, r25	; 0x03
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	08 c0       	rjmp	.+16     	; 0x213a <_ZN6Button9IsPressedEv+0x5c>
		  return true;
	  }
	}
	else if (_lastState){
    212a:	22 23       	and	r18, r18
    212c:	29 f0       	breq	.+10     	; 0x2138 <_ZN6Button9IsPressedEv+0x5a>
		_lastState = 0;              // otherwise the button was just released
    212e:	1c 82       	std	Y+4, r1	; 0x04
		_lastMillis = 0;
    2130:	18 82       	st	Y, r1
    2132:	19 82       	std	Y+1, r1	; 0x01
    2134:	1a 82       	std	Y+2, r1	; 0x02
    2136:	1b 82       	std	Y+3, r1	; 0x03
    2138:	80 e0       	ldi	r24, 0x00	; 0
	}
	return false;
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <_ZN6ButtonC1Eh>:
 *      Author: sfeltner
 */

#include "Button.h"

Button::Button(uint8_t pin) {
    2140:	fc 01       	movw	r30, r24
    2142:	86 2f       	mov	r24, r22
	_lastMillis = 0;
    2144:	10 82       	st	Z, r1
    2146:	11 82       	std	Z+1, r1	; 0x01
    2148:	12 82       	std	Z+2, r1	; 0x02
    214a:	13 82       	std	Z+3, r1	; 0x03
	_lastState = 0;
    214c:	14 82       	std	Z+4, r1	; 0x04
	_pin = pin;
    214e:	65 83       	std	Z+5, r22	; 0x05

	pinMode(_pin, INPUT);
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
}
    2156:	08 95       	ret

00002158 <_ZN10ComMessageD1Ev>:
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	ec 01       	movw	r28, r24
	if(Cmd!=NULL)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	11 f0       	breq	.+4      	; 0x216a <_ZN10ComMessageD1Ev+0x12>
		free (Cmd);
    2166:	0e 94 b9 01 	call	0x372	; 0x372 <free>
	if(Params!=NULL)
    216a:	88 85       	ldd	r24, Y+8	; 0x08
    216c:	99 85       	ldd	r25, Y+9	; 0x09
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	11 f0       	breq	.+4      	; 0x2176 <_ZN10ComMessageD1Ev+0x1e>
		free (Params);
    2172:	0e 94 b9 01 	call	0x372	; 0x372 <free>
}
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <_ZN10ComMessageC1EPc>:
 *      Author: Zephram
 */

#include "ComMessage.h"

ComMessage::ComMessage(char * input){
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	8c 01       	movw	r16, r24
    2186:	eb 01       	movw	r28, r22

	if((input[0]!='<') || (input == NULL)){
    2188:	88 81       	ld	r24, Y
    218a:	8c 33       	cpi	r24, 0x3C	; 60
    218c:	19 f4       	brne	.+6      	; 0x2194 <_ZN10ComMessageC1EPc+0x18>
    218e:	61 15       	cp	r22, r1
    2190:	71 05       	cpc	r23, r1
    2192:	49 f4       	brne	.+18     	; 0x21a6 <_ZN10ComMessageC1EPc+0x2a>
		isInit = false;
    2194:	f8 01       	movw	r30, r16
    2196:	12 86       	std	Z+10, r1	; 0x0a
		Serial.println("Bad Command");
    2198:	8c e7       	ldi	r24, 0x7C	; 124
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	6b e0       	ldi	r22, 0x0B	; 11
    219e:	71 e0       	ldi	r23, 0x01	; 1
    21a0:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
    21a4:	4c c0       	rjmp	.+152    	; 0x223e <_ZN10ComMessageC1EPc+0xc2>
		return;
	}

	Cmd = NULL;
    21a6:	f8 01       	movw	r30, r16
    21a8:	13 82       	std	Z+3, r1	; 0x03
    21aa:	12 82       	std	Z+2, r1	; 0x02
	Params = NULL;
    21ac:	11 86       	std	Z+9, r1	; 0x09
    21ae:	10 86       	std	Z+8, r1	; 0x08
	Id = 0;
    21b0:	11 82       	std	Z+1, r1	; 0x01
    21b2:	10 82       	st	Z, r1
	CmdHash = 0;
    21b4:	14 82       	std	Z+4, r1	; 0x04
    21b6:	15 82       	std	Z+5, r1	; 0x05
    21b8:	16 82       	std	Z+6, r1	; 0x06
    21ba:	17 82       	std	Z+7, r1	; 0x07

	Serial.println("Good Command!");
    21bc:	8c e7       	ldi	r24, 0x7C	; 124
    21be:	93 e0       	ldi	r25, 0x03	; 3
    21c0:	67 e1       	ldi	r22, 0x17	; 23
    21c2:	71 e0       	ldi	r23, 0x01	; 1
    21c4:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
	char* parsed = strtok(input,"<->");
    21c8:	ce 01       	movw	r24, r28
    21ca:	65 e2       	ldi	r22, 0x25	; 37
    21cc:	71 e0       	ldi	r23, 0x01	; 1
    21ce:	0e 94 11 02 	call	0x422	; 0x422 <strtok>
    21d2:	bc 01       	movw	r22, r24
	if (parsed != NULL){
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	51 f0       	breq	.+20     	; 0x21ec <_ZN10ComMessageC1EPc+0x70>
		Serial.println(parsed);
    21d8:	8c e7       	ldi	r24, 0x7C	; 124
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
		Serial.println("Parsed1");
    21e0:	8c e7       	ldi	r24, 0x7C	; 124
    21e2:	93 e0       	ldi	r25, 0x03	; 3
    21e4:	69 e2       	ldi	r22, 0x29	; 41
    21e6:	71 e0       	ldi	r23, 0x01	; 1
    21e8:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
	}
	parsed = strtok(NULL,"<->");
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	65 e2       	ldi	r22, 0x25	; 37
    21f2:	71 e0       	ldi	r23, 0x01	; 1
    21f4:	0e 94 11 02 	call	0x422	; 0x422 <strtok>
    21f8:	bc 01       	movw	r22, r24
	if (parsed != NULL){
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	51 f0       	breq	.+20     	; 0x2212 <_ZN10ComMessageC1EPc+0x96>
		Serial.println(parsed);
    21fe:	8c e7       	ldi	r24, 0x7C	; 124
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
		Serial.println("Parsed2");
    2206:	8c e7       	ldi	r24, 0x7C	; 124
    2208:	93 e0       	ldi	r25, 0x03	; 3
    220a:	61 e3       	ldi	r22, 0x31	; 49
    220c:	71 e0       	ldi	r23, 0x01	; 1
    220e:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
	}
	parsed = strtok(NULL,"<->");
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	65 e2       	ldi	r22, 0x25	; 37
    2218:	71 e0       	ldi	r23, 0x01	; 1
    221a:	0e 94 11 02 	call	0x422	; 0x422 <strtok>
    221e:	bc 01       	movw	r22, r24
	if (parsed != NULL){
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	51 f0       	breq	.+20     	; 0x2238 <_ZN10ComMessageC1EPc+0xbc>
		Serial.println(parsed);
    2224:	8c e7       	ldi	r24, 0x7C	; 124
    2226:	93 e0       	ldi	r25, 0x03	; 3
    2228:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
		Serial.println("Parsed3");
    222c:	8c e7       	ldi	r24, 0x7C	; 124
    222e:	93 e0       	ldi	r25, 0x03	; 3
    2230:	69 e3       	ldi	r22, 0x39	; 57
    2232:	71 e0       	ldi	r23, 0x01	; 1
    2234:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
//			break;
//		}
//		paramNum++;
//		parsed = strtok(NULL,"<->");
//	}
	isInit = true;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	f8 01       	movw	r30, r16
    223c:	82 87       	std	Z+10, r24	; 0x0a
}
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	08 95       	ret

00002248 <_ZN7CommandC1EP11TempControl>:
 */
#include "Command.h"



Command::Command(TempControl *tempCtrl)
    2248:	fc 01       	movw	r30, r24
{
	CommandId = 0;
    224a:	e4 5d       	subi	r30, 0xD4	; 212
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	11 92       	st	Z+, r1
    2250:	11 92       	st	Z+, r1
    2252:	11 92       	st	Z+, r1
    2254:	11 92       	st	Z+, r1
	commandIndex = 0;
    2256:	11 92       	st	Z+, r1
    2258:	11 92       	st	Z+, r1
	_TempControl = tempCtrl;
    225a:	71 83       	std	Z+1, r23	; 0x01
    225c:	60 83       	st	Z, r22
	Serial.println("Created");
    225e:	8c e7       	ldi	r24, 0x7C	; 124
    2260:	93 e0       	ldi	r25, 0x03	; 3
    2262:	61 e4       	ldi	r22, 0x41	; 65
    2264:	71 e0       	ldi	r23, 0x01	; 1
    2266:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
}
    226a:	08 95       	ret

0000226c <_ZN7Command7ExecuteEv>:
{


}

void Command::Execute()
    226c:	af 92       	push	r10
    226e:	bf 92       	push	r11
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	6c 01       	movw	r12, r24
			commandIndex++;
		}
		else {
			currentCommand[commandIndex] = '\0';
			Serial.print("Received: [");
			Serial.print(currentCommand);
    2282:	5c 01       	movw	r10, r24
}

void Command::Execute()
{
//	Serial.println("before");
	while(Serial.available()>0 && commandIndex<299){
    2284:	80 e3       	ldi	r24, 0x30	; 48
    2286:	e8 2e       	mov	r14, r24
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	f8 2e       	mov	r15, r24
    228c:	ec 0c       	add	r14, r12
    228e:	fd 1c       	adc	r15, r13
    2290:	30 c0       	rjmp	.+96     	; 0x22f2 <_ZN7Command7ExecuteEv+0x86>
		Serial.println("after");
		currentCommand[commandIndex] = Serial.read();
		if(currentCommand[commandIndex]!='\n'){
			Serial.print(currentCommand[commandIndex]);
    2292:	8c e7       	ldi	r24, 0x7C	; 124
    2294:	93 e0       	ldi	r25, 0x03	; 3
    2296:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
			commandIndex++;
    229a:	d7 01       	movw	r26, r14
    229c:	8d 91       	ld	r24, X+
    229e:	9c 91       	ld	r25, X
    22a0:	11 97       	sbiw	r26, 0x01	; 1
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	8d 93       	st	X+, r24
    22a6:	9c 93       	st	X, r25
    22a8:	24 c0       	rjmp	.+72     	; 0x22f2 <_ZN7Command7ExecuteEv+0x86>
		}
		else {
			currentCommand[commandIndex] = '\0';
    22aa:	10 82       	st	Z, r1
			Serial.print("Received: [");
    22ac:	8c e7       	ldi	r24, 0x7C	; 124
    22ae:	93 e0       	ldi	r25, 0x03	; 3
    22b0:	69 e4       	ldi	r22, 0x49	; 73
    22b2:	71 e0       	ldi	r23, 0x01	; 1
    22b4:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
			Serial.print(currentCommand);
    22b8:	8c e7       	ldi	r24, 0x7C	; 124
    22ba:	93 e0       	ldi	r25, 0x03	; 3
    22bc:	b5 01       	movw	r22, r10
    22be:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
			Serial.println(']');
    22c2:	8c e7       	ldi	r24, 0x7C	; 124
    22c4:	93 e0       	ldi	r25, 0x03	; 3
    22c6:	6d e5       	ldi	r22, 0x5D	; 93
    22c8:	0e 94 9a 24 	call	0x4934	; 0x4934 <_ZN5Print7printlnEc>
			commandIndex = 0;
    22cc:	f7 01       	movw	r30, r14
    22ce:	11 82       	std	Z+1, r1	; 0x01
    22d0:	10 82       	st	Z, r1
			ComMessage *msg = new ComMessage(currentCommand);
    22d2:	8f e6       	ldi	r24, 0x6F	; 111
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    22da:	ec 01       	movw	r28, r24
    22dc:	b5 01       	movw	r22, r10
    22de:	0e 94 be 10 	call	0x217c	; 0x217c <_ZN10ComMessageC1EPc>
			delete msg;
    22e2:	20 97       	sbiw	r28, 0x00	; 0
    22e4:	31 f0       	breq	.+12     	; 0x22f2 <_ZN7Command7ExecuteEv+0x86>
    22e6:	ce 01       	movw	r24, r28
    22e8:	0e 94 ac 10 	call	0x2158	; 0x2158 <_ZN10ComMessageD1Ev>
    22ec:	ce 01       	movw	r24, r28
    22ee:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
}

void Command::Execute()
{
//	Serial.println("before");
	while(Serial.available()>0 && commandIndex<299){
    22f2:	8c e7       	ldi	r24, 0x7C	; 124
    22f4:	93 e0       	ldi	r25, 0x03	; 3
    22f6:	0e 94 53 23 	call	0x46a6	; 0x46a6 <_ZN14HardwareSerial9availableEv>
    22fa:	18 16       	cp	r1, r24
    22fc:	19 06       	cpc	r1, r25
    22fe:	0c f5       	brge	.+66     	; 0x2342 <_ZN7Command7ExecuteEv+0xd6>
    2300:	d7 01       	movw	r26, r14
    2302:	8d 91       	ld	r24, X+
    2304:	9c 91       	ld	r25, X
    2306:	8b 52       	subi	r24, 0x2B	; 43
    2308:	91 40       	sbci	r25, 0x01	; 1
    230a:	dc f4       	brge	.+54     	; 0x2342 <_ZN7Command7ExecuteEv+0xd6>
		Serial.println("after");
    230c:	8c e7       	ldi	r24, 0x7C	; 124
    230e:	93 e0       	ldi	r25, 0x03	; 3
    2310:	65 e5       	ldi	r22, 0x55	; 85
    2312:	71 e0       	ldi	r23, 0x01	; 1
    2314:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
		currentCommand[commandIndex] = Serial.read();
    2318:	f7 01       	movw	r30, r14
    231a:	00 81       	ld	r16, Z
    231c:	11 81       	ldd	r17, Z+1	; 0x01
    231e:	8c e7       	ldi	r24, 0x7C	; 124
    2320:	93 e0       	ldi	r25, 0x03	; 3
    2322:	0e 94 84 23 	call	0x4708	; 0x4708 <_ZN14HardwareSerial4readEv>
    2326:	0c 0d       	add	r16, r12
    2328:	1d 1d       	adc	r17, r13
    232a:	d8 01       	movw	r26, r16
    232c:	8c 93       	st	X, r24
		if(currentCommand[commandIndex]!='\n'){
    232e:	d7 01       	movw	r26, r14
    2330:	ed 91       	ld	r30, X+
    2332:	fc 91       	ld	r31, X
    2334:	ec 0d       	add	r30, r12
    2336:	fd 1d       	adc	r31, r13
    2338:	60 81       	ld	r22, Z
    233a:	6a 30       	cpi	r22, 0x0A	; 10
    233c:	09 f0       	breq	.+2      	; 0x2340 <_ZN7Command7ExecuteEv+0xd4>
    233e:	a9 cf       	rjmp	.-174    	; 0x2292 <_ZN7Command7ExecuteEv+0x26>
    2340:	b4 cf       	rjmp	.-152    	; 0x22aa <_ZN7Command7ExecuteEv+0x3e>
//				Serial.println("Bad Message");
//				this->SendError("Bad Message Header");
			//delete msg;
//		}
	}
}
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	df 90       	pop	r13
    2350:	cf 90       	pop	r12
    2352:	bf 90       	pop	r11
    2354:	af 90       	pop	r10
    2356:	08 95       	ret

00002358 <_ZN7DisplayD1Ev>:
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
	_modeChange = true;
	_stateChange = true;
}

Display::~Display() {
    2358:	fc 01       	movw	r30, r24
    235a:	8e e4       	ldi	r24, 0x4E	; 78
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2362:	08 95       	ret

00002364 <_ZN7Display8SetStateEPKc>:
	_mode = (char*)malloc(newModeLen+1);
	strcpy(_mode,Mode);
	_modeChange = true;
}

void Display::SetState(const char* State)
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	7c 01       	movw	r14, r24
    2372:	8b 01       	movw	r16, r22
{
//	Serial.print("THIS IS THE STATE");
//	Serial.println(State);
	//check if my mode is null
	if(State==NULL)
    2374:	61 15       	cp	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	49 f1       	breq	.+82     	; 0x23cc <_ZN7Display8SetStateEPKc+0x68>
		return;

	//check for first run
	if(_state==NULL){
    237a:	fc 01       	movw	r30, r24
    237c:	c4 a1       	ldd	r28, Z+36	; 0x24
    237e:	d5 a1       	ldd	r29, Z+37	; 0x25
    2380:	20 97       	sbiw	r28, 0x00	; 0
    2382:	49 f4       	brne	.+18     	; 0x2396 <_ZN7Display8SetStateEPKc+0x32>
		int len = strlen(State);
    2384:	fb 01       	movw	r30, r22
    2386:	01 90       	ld	r0, Z+
    2388:	00 20       	and	r0, r0
    238a:	e9 f7       	brne	.-6      	; 0x2386 <_ZN7Display8SetStateEPKc+0x22>
    238c:	31 97       	sbiw	r30, 0x01	; 1
		_state = (char*)malloc(len);
    238e:	cf 01       	movw	r24, r30
    2390:	86 1b       	sub	r24, r22
    2392:	97 0b       	sbc	r25, r23
    2394:	10 c0       	rjmp	.+32     	; 0x23b6 <_ZN7Display8SetStateEPKc+0x52>
		_stateChange = true;
		return;
	}

	//Check for same mode
	if(strcmp(State,_state)==0){
    2396:	cb 01       	movw	r24, r22
    2398:	be 01       	movw	r22, r28
    239a:	0e 94 16 02 	call	0x42c	; 0x42c <strcmp>
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	a9 f0       	breq	.+42     	; 0x23cc <_ZN7Display8SetStateEPKc+0x68>
		return;
	}

	free(_state);
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 b9 01 	call	0x372	; 0x372 <free>
	int newModeLen = strlen(State);
    23a8:	d8 01       	movw	r26, r16
    23aa:	0d 90       	ld	r0, X+
    23ac:	00 20       	and	r0, r0
    23ae:	e9 f7       	brne	.-6      	; 0x23aa <_ZN7Display8SetStateEPKc+0x46>
	_state = (char*)malloc(newModeLen+1);
    23b0:	cd 01       	movw	r24, r26
    23b2:	80 1b       	sub	r24, r16
    23b4:	91 0b       	sbc	r25, r17
    23b6:	0e 94 0f 01 	call	0x21e	; 0x21e <malloc>
    23ba:	f7 01       	movw	r30, r14
    23bc:	84 a3       	std	Z+36, r24	; 0x24
    23be:	95 a3       	std	Z+37, r25	; 0x25
	strcpy(_state,State);
    23c0:	b8 01       	movw	r22, r16
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <strcpy>
	_stateChange = true;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	f7 01       	movw	r30, r14
    23ca:	87 a3       	std	Z+39, r24	; 0x27
	//Serial.print("New State ");
	//Serial.println(_stateChange);
}
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	08 95       	ret

000023da <_ZN7Display7SetModeEPKc>:
			_lcd->print(minute());
			_lcd->print(":");
			_lcd->print(second());
	}
}
void Display::SetMode(const char* Mode)
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	7c 01       	movw	r14, r24
    23e8:	8b 01       	movw	r16, r22
{
	//check if my mode is null
	if(Mode==NULL)
    23ea:	61 15       	cp	r22, r1
    23ec:	71 05       	cpc	r23, r1
    23ee:	89 f1       	breq	.+98     	; 0x2452 <_ZN7Display7SetModeEPKc+0x78>
		return;

	//check for first run
	if(_mode==NULL){
    23f0:	fc 01       	movw	r30, r24
    23f2:	c2 a1       	ldd	r28, Z+34	; 0x22
    23f4:	d3 a1       	ldd	r29, Z+35	; 0x23
    23f6:	20 97       	sbiw	r28, 0x00	; 0
    23f8:	89 f4       	brne	.+34     	; 0x241c <_ZN7Display7SetModeEPKc+0x42>
		int len = strlen(Mode);
    23fa:	fb 01       	movw	r30, r22
    23fc:	01 90       	ld	r0, Z+
    23fe:	00 20       	and	r0, r0
    2400:	e9 f7       	brne	.-6      	; 0x23fc <_ZN7Display7SetModeEPKc+0x22>
    2402:	31 97       	sbiw	r30, 0x01	; 1
		_mode = (char*)malloc(len);
    2404:	cf 01       	movw	r24, r30
    2406:	86 1b       	sub	r24, r22
    2408:	97 0b       	sbc	r25, r23
    240a:	0e 94 0f 01 	call	0x21e	; 0x21e <malloc>
    240e:	f7 01       	movw	r30, r14
    2410:	82 a3       	std	Z+34, r24	; 0x22
    2412:	93 a3       	std	Z+35, r25	; 0x23
		strcpy(_mode,Mode);
    2414:	b8 01       	movw	r22, r16
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <strcpy>
    241a:	1b c0       	rjmp	.+54     	; 0x2452 <_ZN7Display7SetModeEPKc+0x78>
		return;
	}

	//Check for same mode
	if(strcmp(Mode,_mode)==0){
    241c:	cb 01       	movw	r24, r22
    241e:	be 01       	movw	r22, r28
    2420:	0e 94 16 02 	call	0x42c	; 0x42c <strcmp>
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	a9 f0       	breq	.+42     	; 0x2452 <_ZN7Display7SetModeEPKc+0x78>
		return;
	}

	free(_mode);
    2428:	ce 01       	movw	r24, r28
    242a:	0e 94 b9 01 	call	0x372	; 0x372 <free>
	int newModeLen = strlen(Mode);
    242e:	d8 01       	movw	r26, r16
    2430:	0d 90       	ld	r0, X+
    2432:	00 20       	and	r0, r0
    2434:	e9 f7       	brne	.-6      	; 0x2430 <_ZN7Display7SetModeEPKc+0x56>
	_mode = (char*)malloc(newModeLen+1);
    2436:	cd 01       	movw	r24, r26
    2438:	80 1b       	sub	r24, r16
    243a:	91 0b       	sbc	r25, r17
    243c:	0e 94 0f 01 	call	0x21e	; 0x21e <malloc>
    2440:	f7 01       	movw	r30, r14
    2442:	82 a3       	std	Z+34, r24	; 0x22
    2444:	93 a3       	std	Z+35, r25	; 0x23
	strcpy(_mode,Mode);
    2446:	b8 01       	movw	r22, r16
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <strcpy>
	_modeChange = true;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	f7 01       	movw	r30, r14
    2450:	86 a3       	std	Z+38, r24	; 0x26
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	ff 90       	pop	r15
    245c:	ef 90       	pop	r14
    245e:	08 95       	ret

00002460 <_ZN7Display4DrawEv>:

Display::~Display() {
	// TODO Auto-generated destructor stub
}

void Display::Draw(void)
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ec 01       	movw	r28, r24
{
	if(TargetTemp!=_preTargetTemp)
    246a:	6e 85       	ldd	r22, Y+14	; 0x0e
    246c:	7f 85       	ldd	r23, Y+15	; 0x0f
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	99 89       	ldd	r25, Y+17	; 0x11
    2472:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2474:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2476:	48 a1       	ldd	r20, Y+32	; 0x20
    2478:	59 a1       	ldd	r21, Y+33	; 0x21
    247a:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    247e:	88 23       	and	r24, r24
    2480:	f1 f0       	breq	.+60     	; 0x24be <_ZN7Display4DrawEv+0x5e>
	{
		_lcd->setCursor(0,1);
    2482:	88 a5       	ldd	r24, Y+40	; 0x28
    2484:	99 a5       	ldd	r25, Y+41	; 0x29
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Targ ");
    248e:	88 a5       	ldd	r24, Y+40	; 0x28
    2490:	99 a5       	ldd	r25, Y+41	; 0x29
    2492:	6b e5       	ldi	r22, 0x5B	; 91
    2494:	71 e0       	ldi	r23, 0x01	; 1
    2496:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		_lcd->print(TargetTemp);
    249a:	4e 85       	ldd	r20, Y+14	; 0x0e
    249c:	5f 85       	ldd	r21, Y+15	; 0x0f
    249e:	68 89       	ldd	r22, Y+16	; 0x10
    24a0:	79 89       	ldd	r23, Y+17	; 0x11
    24a2:	88 a5       	ldd	r24, Y+40	; 0x28
    24a4:	99 a5       	ldd	r25, Y+41	; 0x29
    24a6:	22 e0       	ldi	r18, 0x02	; 2
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		_preTargetTemp = TargetTemp;
    24ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b2:	a8 89       	ldd	r26, Y+16	; 0x10
    24b4:	b9 89       	ldd	r27, Y+17	; 0x11
    24b6:	8e 8f       	std	Y+30, r24	; 0x1e
    24b8:	9f 8f       	std	Y+31, r25	; 0x1f
    24ba:	a8 a3       	std	Y+32, r26	; 0x20
    24bc:	b9 a3       	std	Y+33, r27	; 0x21
	}


	if(AtmosphereTemp!=_preAtmosphereTemp){
    24be:	6a 81       	ldd	r22, Y+2	; 0x02
    24c0:	7b 81       	ldd	r23, Y+3	; 0x03
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	2a 89       	ldd	r18, Y+18	; 0x12
    24c8:	3b 89       	ldd	r19, Y+19	; 0x13
    24ca:	4c 89       	ldd	r20, Y+20	; 0x14
    24cc:	5d 89       	ldd	r21, Y+21	; 0x15
    24ce:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    24d2:	88 23       	and	r24, r24
    24d4:	f1 f0       	breq	.+60     	; 0x2512 <_ZN7Display4DrawEv+0xb2>
		//Draw and save atmosphere
		_lcd->setCursor(0,2);
    24d6:	88 a5       	ldd	r24, Y+40	; 0x28
    24d8:	99 a5       	ldd	r25, Y+41	; 0x29
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	42 e0       	ldi	r20, 0x02	; 2
    24de:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Atmo ");
    24e2:	88 a5       	ldd	r24, Y+40	; 0x28
    24e4:	99 a5       	ldd	r25, Y+41	; 0x29
    24e6:	61 e6       	ldi	r22, 0x61	; 97
    24e8:	71 e0       	ldi	r23, 0x01	; 1
    24ea:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		_lcd->print(AtmosphereTemp);
    24ee:	4a 81       	ldd	r20, Y+2	; 0x02
    24f0:	5b 81       	ldd	r21, Y+3	; 0x03
    24f2:	6c 81       	ldd	r22, Y+4	; 0x04
    24f4:	7d 81       	ldd	r23, Y+5	; 0x05
    24f6:	88 a5       	ldd	r24, Y+40	; 0x28
    24f8:	99 a5       	ldd	r25, Y+41	; 0x29
    24fa:	22 e0       	ldi	r18, 0x02	; 2
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		_preAtmosphereTemp = AtmosphereTemp;
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	ac 81       	ldd	r26, Y+4	; 0x04
    2508:	bd 81       	ldd	r27, Y+5	; 0x05
    250a:	8a 8b       	std	Y+18, r24	; 0x12
    250c:	9b 8b       	std	Y+19, r25	; 0x13
    250e:	ac 8b       	std	Y+20, r26	; 0x14
    2510:	bd 8b       	std	Y+21, r27	; 0x15
	}

	if(LiquidTemp != _preLiquidTemp){
    2512:	6e 81       	ldd	r22, Y+6	; 0x06
    2514:	7f 81       	ldd	r23, Y+7	; 0x07
    2516:	88 85       	ldd	r24, Y+8	; 0x08
    2518:	99 85       	ldd	r25, Y+9	; 0x09
    251a:	2e 89       	ldd	r18, Y+22	; 0x16
    251c:	3f 89       	ldd	r19, Y+23	; 0x17
    251e:	48 8d       	ldd	r20, Y+24	; 0x18
    2520:	59 8d       	ldd	r21, Y+25	; 0x19
    2522:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    2526:	88 23       	and	r24, r24
    2528:	f1 f0       	breq	.+60     	; 0x2566 <_ZN7Display4DrawEv+0x106>
		//Draw and save liquid temp
		_lcd->setCursor(0,3);
    252a:	88 a5       	ldd	r24, Y+40	; 0x28
    252c:	99 a5       	ldd	r25, Y+41	; 0x29
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	43 e0       	ldi	r20, 0x03	; 3
    2532:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Beer ");
    2536:	88 a5       	ldd	r24, Y+40	; 0x28
    2538:	99 a5       	ldd	r25, Y+41	; 0x29
    253a:	67 e6       	ldi	r22, 0x67	; 103
    253c:	71 e0       	ldi	r23, 0x01	; 1
    253e:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		_lcd->print(LiquidTemp);
    2542:	4e 81       	ldd	r20, Y+6	; 0x06
    2544:	5f 81       	ldd	r21, Y+7	; 0x07
    2546:	68 85       	ldd	r22, Y+8	; 0x08
    2548:	79 85       	ldd	r23, Y+9	; 0x09
    254a:	88 a5       	ldd	r24, Y+40	; 0x28
    254c:	99 a5       	ldd	r25, Y+41	; 0x29
    254e:	22 e0       	ldi	r18, 0x02	; 2
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		_preLiquidTemp = LiquidTemp;
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	a8 85       	ldd	r26, Y+8	; 0x08
    255c:	b9 85       	ldd	r27, Y+9	; 0x09
    255e:	8e 8b       	std	Y+22, r24	; 0x16
    2560:	9f 8b       	std	Y+23, r25	; 0x17
    2562:	a8 8f       	std	Y+24, r26	; 0x18
    2564:	b9 8f       	std	Y+25, r27	; 0x19
	}

	if(_modeChange)	{
    2566:	8e a1       	ldd	r24, Y+38	; 0x26
    2568:	88 23       	and	r24, r24
    256a:	69 f0       	breq	.+26     	; 0x2586 <_ZN7Display4DrawEv+0x126>
		_lcd->setCursor(12,2);
    256c:	88 a5       	ldd	r24, Y+40	; 0x28
    256e:	99 a5       	ldd	r25, Y+41	; 0x29
    2570:	6c e0       	ldi	r22, 0x0C	; 12
    2572:	42 e0       	ldi	r20, 0x02	; 2
    2574:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print(_mode);
    2578:	6a a1       	ldd	r22, Y+34	; 0x22
    257a:	7b a1       	ldd	r23, Y+35	; 0x23
    257c:	88 a5       	ldd	r24, Y+40	; 0x28
    257e:	99 a5       	ldd	r25, Y+41	; 0x29
    2580:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		_modeChange = false;
    2584:	1e a2       	std	Y+38, r1	; 0x26
	}

//	Serial.println(_state);
//	Serial.println(" Needs to Change? ");
//	Serial.println(_stateChange);
	if(_stateChange)	{
    2586:	8f a1       	ldd	r24, Y+39	; 0x27
    2588:	88 23       	and	r24, r24
    258a:	69 f0       	breq	.+26     	; 0x25a6 <_ZN7Display4DrawEv+0x146>
		_lcd->setCursor(12,3);
    258c:	88 a5       	ldd	r24, Y+40	; 0x28
    258e:	99 a5       	ldd	r25, Y+41	; 0x29
    2590:	6c e0       	ldi	r22, 0x0C	; 12
    2592:	43 e0       	ldi	r20, 0x03	; 3
    2594:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print(_state);
    2598:	6c a1       	ldd	r22, Y+36	; 0x24
    259a:	7d a1       	ldd	r23, Y+37	; 0x25
    259c:	88 a5       	ldd	r24, Y+40	; 0x28
    259e:	99 a5       	ldd	r25, Y+41	; 0x29
    25a0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		_stateChange = false;
    25a4:	1f a2       	std	Y+39, r1	; 0x27
	}

	//Draw time update
	if(timeStatus() != timeNotSet){  // here if the time has been set
    25a6:	0e 94 93 07 	call	0xf26	; 0xf26 <_Z10timeStatusv>
    25aa:	89 2b       	or	r24, r25
    25ac:	81 f1       	breq	.+96     	; 0x260e <_ZN7Display4DrawEv+0x1ae>
			_lcd->setCursor(12,1);
    25ae:	88 a5       	ldd	r24, Y+40	; 0x28
    25b0:	99 a5       	ldd	r25, Y+41	; 0x29
    25b2:	6c e0       	ldi	r22, 0x0C	; 12
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
			_lcd->print(hour());
    25ba:	08 a5       	ldd	r16, Y+40	; 0x28
    25bc:	19 a5       	ldd	r17, Y+41	; 0x29
    25be:	0e 94 48 08 	call	0x1090	; 0x1090 <_Z4hourv>
    25c2:	bc 01       	movw	r22, r24
    25c4:	c8 01       	movw	r24, r16
    25c6:	4a e0       	ldi	r20, 0x0A	; 10
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	0e 94 79 25 	call	0x4af2	; 0x4af2 <_ZN5Print5printEii>
			_lcd->print(":");
    25ce:	88 a5       	ldd	r24, Y+40	; 0x28
    25d0:	99 a5       	ldd	r25, Y+41	; 0x29
    25d2:	6d e6       	ldi	r22, 0x6D	; 109
    25d4:	71 e0       	ldi	r23, 0x01	; 1
    25d6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
			_lcd->print(minute());
    25da:	08 a5       	ldd	r16, Y+40	; 0x28
    25dc:	19 a5       	ldd	r17, Y+41	; 0x29
    25de:	0e 94 40 08 	call	0x1080	; 0x1080 <_Z6minutev>
    25e2:	bc 01       	movw	r22, r24
    25e4:	c8 01       	movw	r24, r16
    25e6:	4a e0       	ldi	r20, 0x0A	; 10
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	0e 94 79 25 	call	0x4af2	; 0x4af2 <_ZN5Print5printEii>
			_lcd->print(":");
    25ee:	88 a5       	ldd	r24, Y+40	; 0x28
    25f0:	99 a5       	ldd	r25, Y+41	; 0x29
    25f2:	6d e6       	ldi	r22, 0x6D	; 109
    25f4:	71 e0       	ldi	r23, 0x01	; 1
    25f6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
			_lcd->print(second());
    25fa:	08 a5       	ldd	r16, Y+40	; 0x28
    25fc:	19 a5       	ldd	r17, Y+41	; 0x29
    25fe:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z6secondv>
    2602:	bc 01       	movw	r22, r24
    2604:	c8 01       	movw	r24, r16
    2606:	4a e0       	ldi	r20, 0x0A	; 10
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	0e 94 79 25 	call	0x4af2	; 0x4af2 <_ZN5Print5printEii>
	}
}
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <_ZN7DisplayD0Ev>:
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
	_modeChange = true;
	_stateChange = true;
}

Display::~Display() {
    2618:	fc 01       	movw	r30, r24
    261a:	8e e4       	ldi	r24, 0x4E	; 78
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2622:	cf 01       	movw	r24, r30
    2624:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
    2628:	08 95       	ret

0000262a <_ZN7DisplayC1Ev>:
#include "Display.h"
#include <Arduino.h>
#include <OLEDFourBit.h>
#include <Time.h>

Display::Display() {
    262a:	8f 92       	push	r8
    262c:	9f 92       	push	r9
    262e:	af 92       	push	r10
    2630:	cf 92       	push	r12
    2632:	ef 92       	push	r14
    2634:	ff 92       	push	r15
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	4c 01       	movw	r8, r24
    263c:	8e e4       	ldi	r24, 0x4E	; 78
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	f4 01       	movw	r30, r8
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
	_mode = NULL;
    2646:	13 a2       	std	Z+35, r1	; 0x23
    2648:	12 a2       	std	Z+34, r1	; 0x22
	_state = NULL;
    264a:	15 a2       	std	Z+37, r1	; 0x25
    264c:	14 a2       	std	Z+36, r1	; 0x24
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
    264e:	82 e1       	ldi	r24, 0x12	; 18
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    2656:	18 2f       	mov	r17, r24
    2658:	f9 2e       	mov	r15, r25
    265a:	63 e0       	ldi	r22, 0x03	; 3
    265c:	44 e0       	ldi	r20, 0x04	; 4
    265e:	25 e0       	ldi	r18, 0x05	; 5
    2660:	06 e0       	ldi	r16, 0x06	; 6
    2662:	77 e0       	ldi	r23, 0x07	; 7
    2664:	e7 2e       	mov	r14, r23
    2666:	58 e0       	ldi	r21, 0x08	; 8
    2668:	c5 2e       	mov	r12, r21
    266a:	39 e0       	ldi	r19, 0x09	; 9
    266c:	a3 2e       	mov	r10, r19
    266e:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN11OLEDFourBitC1Ehhhhhhh>
    2672:	f4 01       	movw	r30, r8
    2674:	10 a7       	std	Z+40, r17	; 0x28
    2676:	f1 a6       	std	Z+41, r15	; 0x29
	_modeChange = true;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	86 a3       	std	Z+38, r24	; 0x26
	_stateChange = true;
    267c:	87 a3       	std	Z+39, r24	; 0x27
}
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	ff 90       	pop	r15
    2684:	ef 90       	pop	r14
    2686:	cf 90       	pop	r12
    2688:	af 90       	pop	r10
    268a:	9f 90       	pop	r9
    268c:	8f 90       	pop	r8
    268e:	08 95       	ret

00002690 <_ZN20FridgeTempControllerD1Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

FridgeTempController::~FridgeTempController() {
    2690:	fc 01       	movw	r30, r24
    2692:	86 e5       	ldi	r24, 0x56	; 86
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    269a:	08 95       	ret

0000269c <_ZN20FridgeTempController13GetTempActualEv>:
//float FridgeTempController::GetTemp()
//{
//	return _Temp->GetTemperature();
//}
//
float FridgeTempController::GetTempActual()
    269c:	fc 01       	movw	r30, r24
{
	return TemperatureActual;
}
    269e:	22 81       	ldd	r18, Z+2	; 0x02
    26a0:	33 81       	ldd	r19, Z+3	; 0x03
    26a2:	44 81       	ldd	r20, Z+4	; 0x04
    26a4:	55 81       	ldd	r21, Z+5	; 0x05
    26a6:	b9 01       	movw	r22, r18
    26a8:	ca 01       	movw	r24, r20
    26aa:	08 95       	ret

000026ac <_ZN20FridgeTempController14GetTempSettingEv>:

float FridgeTempController::GetTempSetting()
    26ac:	fc 01       	movw	r30, r24
{
	return TemperatureSetting;
}
    26ae:	26 81       	ldd	r18, Z+6	; 0x06
    26b0:	37 81       	ldd	r19, Z+7	; 0x07
    26b2:	40 85       	ldd	r20, Z+8	; 0x08
    26b4:	51 85       	ldd	r21, Z+9	; 0x09
    26b6:	b9 01       	movw	r22, r18
    26b8:	ca 01       	movw	r24, r20
    26ba:	08 95       	ret

000026bc <_ZN20FridgeTempController14SetTempSettingEf>:

float FridgeTempController::SetTempSetting(float newSetting)
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
{
	return TemperatureSetting = newSetting;
    26c0:	db 01       	movw	r26, r22
    26c2:	8a 01       	movw	r16, r20
    26c4:	9b 01       	movw	r18, r22
    26c6:	fc 01       	movw	r30, r24
    26c8:	06 83       	std	Z+6, r16	; 0x06
    26ca:	17 83       	std	Z+7, r17	; 0x07
    26cc:	20 87       	std	Z+8, r18	; 0x08
    26ce:	31 87       	std	Z+9, r19	; 0x09
}
    26d0:	ba 01       	movw	r22, r20
    26d2:	cd 01       	movw	r24, r26
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	08 95       	ret

000026da <_ZN20FridgeTempController11updateSlopeEv>:
	}
//	Serial.print("Fridge After ");
//	Serial.println(_timer);
}

void FridgeTempController::updateSlope()  //called every minute
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	9c 01       	movw	r18, r24
{
	TempHistory[TempHistoryIndex] = TempFiltSlow[3];
    26f0:	5c ec       	ldi	r21, 0xCC	; 204
    26f2:	85 2e       	mov	r8, r21
    26f4:	91 2c       	mov	r9, r1
    26f6:	88 0e       	add	r8, r24
    26f8:	99 1e       	adc	r9, r25
    26fa:	d4 01       	movw	r26, r8
    26fc:	0c 91       	ld	r16, X
    26fe:	10 e0       	ldi	r17, 0x00	; 0
    2700:	0b 5e       	subi	r16, 0xEB	; 235
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	f8 01       	movw	r30, r16
    2706:	ee 0f       	add	r30, r30
    2708:	ff 1f       	adc	r31, r31
    270a:	ee 0f       	add	r30, r30
    270c:	ff 1f       	adc	r31, r31
    270e:	e8 0f       	add	r30, r24
    2710:	f9 1f       	adc	r31, r25
    2712:	2a 5b       	subi	r18, 0xBA	; 186
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	d9 01       	movw	r26, r18
    2718:	cd 90       	ld	r12, X+
    271a:	dd 90       	ld	r13, X+
    271c:	ed 90       	ld	r14, X+
    271e:	fc 90       	ld	r15, X
    2720:	26 54       	subi	r18, 0x46	; 70
    2722:	30 40       	sbci	r19, 0x00	; 0
    2724:	c0 82       	st	Z, r12
    2726:	d1 82       	std	Z+1, r13	; 0x01
    2728:	e2 82       	std	Z+2, r14	; 0x02
    272a:	f3 82       	std	Z+3, r15	; 0x03
	Slope = TempHistory[TempHistoryIndex]
		- TempHistory[(TempHistoryIndex + 1) % 30];
    272c:	90 e5       	ldi	r25, 0x50	; 80
    272e:	a9 2e       	mov	r10, r25
    2730:	b1 2c       	mov	r11, r1
    2732:	a2 0e       	add	r10, r18
    2734:	b3 1e       	adc	r11, r19
    2736:	04 51       	subi	r16, 0x14	; 20
    2738:	10 40       	sbci	r17, 0x00	; 0
    273a:	c8 01       	movw	r24, r16
    273c:	6e e1       	ldi	r22, 0x1E	; 30
    273e:	70 e0       	ldi	r23, 0x00	; 0
    2740:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
    2744:	fc 01       	movw	r30, r24
    2746:	75 96       	adiw	r30, 0x15	; 21
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	c7 01       	movw	r24, r14
    2756:	b6 01       	movw	r22, r12
    2758:	20 81       	ld	r18, Z
    275a:	31 81       	ldd	r19, Z+1	; 0x01
    275c:	42 81       	ldd	r20, Z+2	; 0x02
    275e:	53 81       	ldd	r21, Z+3	; 0x03
    2760:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    2764:	f5 01       	movw	r30, r10
    2766:	60 83       	st	Z, r22
    2768:	71 83       	std	Z+1, r23	; 0x01
    276a:	82 83       	std	Z+2, r24	; 0x02
    276c:	93 83       	std	Z+3, r25	; 0x03
	TempHistoryIndex = (TempHistoryIndex + 1) % 30;
    276e:	c8 01       	movw	r24, r16
    2770:	6e e1       	ldi	r22, 0x1E	; 30
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	0e 94 8e 2a 	call	0x551c	; 0x551c <__divmodhi4>
    2778:	d4 01       	movw	r26, r8
    277a:	8c 93       	st	X, r24
	Services &= ~updateSlope_SERVICE;		// reset the service flag
    277c:	80 91 b6 02 	lds	r24, 0x02B6
    2780:	8f 7d       	andi	r24, 0xDF	; 223
    2782:	80 93 b6 02 	sts	0x02B6, r24
}
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
    2792:	bf 90       	pop	r11
    2794:	af 90       	pop	r10
    2796:	9f 90       	pop	r9
    2798:	8f 90       	pop	r8
    279a:	08 95       	ret

0000279c <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>:

void FridgeTempController::updateSlowFilteredTemperatures() //called every 10 seconds
    279c:	2f 92       	push	r2
    279e:	3f 92       	push	r3
    27a0:	4f 92       	push	r4
    27a2:	5f 92       	push	r5
    27a4:	6f 92       	push	r6
    27a6:	7f 92       	push	r7
    27a8:	8f 92       	push	r8
    27aa:	9f 92       	push	r9
    27ac:	af 92       	push	r10
    27ae:	bf 92       	push	r11
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x26>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x28>
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x2a>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	6c 01       	movw	r12, r24
{
//	Serial.println("Input");
	// Input for filter
	TempSlow[0] = TempSlow[1];
    27cc:	dc 01       	movw	r26, r24
    27ce:	9e 96       	adiw	r26, 0x2e	; 46
    27d0:	6d 91       	ld	r22, X+
    27d2:	7d 91       	ld	r23, X+
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	d1 97       	sbiw	r26, 0x31	; 49
    27da:	f6 01       	movw	r30, r12
    27dc:	62 a7       	std	Z+42, r22	; 0x2a
    27de:	73 a7       	std	Z+43, r23	; 0x2b
    27e0:	84 a7       	std	Z+44, r24	; 0x2c
    27e2:	95 a7       	std	Z+45, r25	; 0x2d
	TempSlow[1] = TempSlow[2];
    27e4:	42 a8       	ldd	r4, Z+50	; 0x32
    27e6:	53 a8       	ldd	r5, Z+51	; 0x33
    27e8:	64 a8       	ldd	r6, Z+52	; 0x34
    27ea:	75 a8       	ldd	r7, Z+53	; 0x35
    27ec:	9e 96       	adiw	r26, 0x2e	; 46
    27ee:	4d 92       	st	X+, r4
    27f0:	5d 92       	st	X+, r5
    27f2:	6d 92       	st	X+, r6
    27f4:	7c 92       	st	X, r7
    27f6:	d1 97       	sbiw	r26, 0x31	; 49
	TempSlow[2] = TempSlow[3];
    27f8:	d6 96       	adiw	r26, 0x36	; 54
    27fa:	8d 90       	ld	r8, X+
    27fc:	9d 90       	ld	r9, X+
    27fe:	ad 90       	ld	r10, X+
    2800:	bc 90       	ld	r11, X
    2802:	d9 97       	sbiw	r26, 0x39	; 57
    2804:	82 aa       	std	Z+50, r8	; 0x32
    2806:	93 aa       	std	Z+51, r9	; 0x33
    2808:	a4 aa       	std	Z+52, r10	; 0x34
    280a:	b5 aa       	std	Z+53, r11	; 0x35
	TempSlow[3] = TempFiltFast[3];
    280c:	26 a1       	ldd	r18, Z+38	; 0x26
    280e:	37 a1       	ldd	r19, Z+39	; 0x27
    2810:	40 a5       	ldd	r20, Z+40	; 0x28
    2812:	51 a5       	ldd	r21, Z+41	; 0x29
    2814:	d6 96       	adiw	r26, 0x36	; 54
    2816:	2d 93       	st	X+, r18
    2818:	3d 93       	st	X+, r19
    281a:	4d 93       	st	X+, r20
    281c:	5c 93       	st	X, r21
    281e:	d9 97       	sbiw	r26, 0x39	; 57
//	Serial.println("Butterworth");
	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=0.1Hz)
//	Serial.println(TempFiltSlow[1]);
	TempFiltSlow[0] = TempFiltSlow[1];
    2820:	ee e3       	ldi	r30, 0x3E	; 62
    2822:	2e 2e       	mov	r2, r30
    2824:	31 2c       	mov	r3, r1
    2826:	2c 0c       	add	r2, r12
    2828:	3d 1c       	adc	r3, r13
    282a:	f1 01       	movw	r30, r2
    282c:	e0 80       	ld	r14, Z
    282e:	f1 80       	ldd	r15, Z+1	; 0x01
    2830:	02 81       	ldd	r16, Z+2	; 0x02
    2832:	13 81       	ldd	r17, Z+3	; 0x03
    2834:	da 96       	adiw	r26, 0x3a	; 58
    2836:	ed 92       	st	X+, r14
    2838:	fd 92       	st	X+, r15
    283a:	0d 93       	st	X+, r16
    283c:	1c 93       	st	X, r17
    283e:	dd 97       	sbiw	r26, 0x3d	; 61
//	Serial.println(TempFiltSlow[2]);
	TempFiltSlow[1] = TempFiltSlow[2];
    2840:	f6 01       	movw	r30, r12
    2842:	ee 5b       	subi	r30, 0xBE	; 190
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	e0 80       	ld	r14, Z
    2848:	f1 80       	ldd	r15, Z+1	; 0x01
    284a:	02 81       	ldd	r16, Z+2	; 0x02
    284c:	13 81       	ldd	r17, Z+3	; 0x03
    284e:	d1 01       	movw	r26, r2
    2850:	ed 92       	st	X+, r14
    2852:	fd 92       	st	X+, r15
    2854:	0d 93       	st	X+, r16
    2856:	1c 93       	st	X, r17
    2858:	13 97       	sbiw	r26, 0x03	; 3
//	Serial.println(TempFiltSlow[3]);
	TempFiltSlow[2] = TempFiltSlow[3];
    285a:	86 01       	movw	r16, r12
    285c:	0a 5b       	subi	r16, 0xBA	; 186
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	1e 83       	std	Y+6, r17	; 0x06
    2862:	0d 83       	std	Y+5, r16	; 0x05
    2864:	d8 01       	movw	r26, r16
    2866:	ed 90       	ld	r14, X+
    2868:	fd 90       	ld	r15, X+
    286a:	0d 91       	ld	r16, X+
    286c:	1c 91       	ld	r17, X
    286e:	e9 82       	std	Y+1, r14	; 0x01
    2870:	fa 82       	std	Y+2, r15	; 0x02
    2872:	0b 83       	std	Y+3, r16	; 0x03
    2874:	1c 83       	std	Y+4, r17	; 0x04
    2876:	e0 82       	st	Z, r14
    2878:	f1 82       	std	Z+1, r15	; 0x01
    287a:	02 83       	std	Z+2, r16	; 0x02
    287c:	13 83       	std	Z+3, r17	; 0x03
//	                                      + (2.8743568927 * TempFiltSlow[2]);
	TempFiltSlow[3] = (TempSlow[0] + TempSlow[3]
	    + 3 * (TempSlow[1] + TempSlow[2])) / 3.430944333e+04
        + (0.8818931306 * TempFiltSlow[0])
        + (-2.7564831952 * TempFiltSlow[1])
	    + (2.8743568927 * TempFiltSlow[2]);
    287e:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2882:	7b 01       	movw	r14, r22
    2884:	8c 01       	movw	r16, r24
    2886:	c3 01       	movw	r24, r6
    2888:	b2 01       	movw	r22, r4
    288a:	a5 01       	movw	r20, r10
    288c:	94 01       	movw	r18, r8
    288e:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2892:	20 e0       	ldi	r18, 0x00	; 0
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	40 e4       	ldi	r20, 0x40	; 64
    2898:	50 e4       	ldi	r21, 0x40	; 64
    289a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    289e:	9b 01       	movw	r18, r22
    28a0:	ac 01       	movw	r20, r24
    28a2:	c8 01       	movw	r24, r16
    28a4:	b7 01       	movw	r22, r14
    28a6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    28aa:	21 e7       	ldi	r18, 0x71	; 113
    28ac:	35 e0       	ldi	r19, 0x05	; 5
    28ae:	46 e0       	ldi	r20, 0x06	; 6
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    28b6:	7b 01       	movw	r14, r22
    28b8:	8c 01       	movw	r16, r24
    28ba:	f6 01       	movw	r30, r12
    28bc:	62 ad       	ldd	r22, Z+58	; 0x3a
    28be:	73 ad       	ldd	r23, Z+59	; 0x3b
    28c0:	84 ad       	ldd	r24, Z+60	; 0x3c
    28c2:	95 ad       	ldd	r25, Z+61	; 0x3d
    28c4:	20 ec       	ldi	r18, 0xC0	; 192
    28c6:	33 ec       	ldi	r19, 0xC3	; 195
    28c8:	41 e6       	ldi	r20, 0x61	; 97
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	c8 01       	movw	r24, r16
    28d6:	b7 01       	movw	r22, r14
    28d8:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    28dc:	7b 01       	movw	r14, r22
    28de:	8c 01       	movw	r16, r24
    28e0:	d1 01       	movw	r26, r2
    28e2:	6d 91       	ld	r22, X+
    28e4:	7d 91       	ld	r23, X+
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	28 e3       	ldi	r18, 0x38	; 56
    28ec:	3a e6       	ldi	r19, 0x6A	; 106
    28ee:	40 e3       	ldi	r20, 0x30	; 48
    28f0:	50 ec       	ldi	r21, 0xC0	; 192
    28f2:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    28f6:	9b 01       	movw	r18, r22
    28f8:	ac 01       	movw	r20, r24
    28fa:	c8 01       	movw	r24, r16
    28fc:	b7 01       	movw	r22, r14
    28fe:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2902:	7b 01       	movw	r14, r22
    2904:	8c 01       	movw	r16, r24
    2906:	69 81       	ldd	r22, Y+1	; 0x01
    2908:	7a 81       	ldd	r23, Y+2	; 0x02
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	9c 81       	ldd	r25, Y+4	; 0x04
    290e:	27 e7       	ldi	r18, 0x77	; 119
    2910:	35 ef       	ldi	r19, 0xF5	; 245
    2912:	47 e3       	ldi	r20, 0x37	; 55
    2914:	50 e4       	ldi	r21, 0x40	; 64
    2916:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	c8 01       	movw	r24, r16
    2920:	b7 01       	movw	r22, r14
    2922:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2926:	ed 81       	ldd	r30, Y+5	; 0x05
    2928:	fe 81       	ldd	r31, Y+6	; 0x06
    292a:	60 83       	st	Z, r22
    292c:	71 83       	std	Z+1, r23	; 0x01
    292e:	82 83       	std	Z+2, r24	; 0x02
    2930:	93 83       	std	Z+3, r25	; 0x03
//	Serial.println("Done");
}
    2932:	26 96       	adiw	r28, 0x06	; 6
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	9f 90       	pop	r9
    2954:	8f 90       	pop	r8
    2956:	7f 90       	pop	r7
    2958:	6f 90       	pop	r6
    295a:	5f 90       	pop	r5
    295c:	4f 90       	pop	r4
    295e:	3f 90       	pop	r3
    2960:	2f 90       	pop	r2
    2962:	08 95       	ret

00002964 <_ZN20FridgeTempController18updateTemperaturesEv>:

void FridgeTempController::updateTemperatures()  //called every 200 milliseconds
    2964:	4f 92       	push	r4
    2966:	5f 92       	push	r5
    2968:	6f 92       	push	r6
    296a:	7f 92       	push	r7
    296c:	8f 92       	push	r8
    296e:	9f 92       	push	r9
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	00 d0       	rcall	.+0      	; 0x2986 <_ZN20FridgeTempController18updateTemperaturesEv+0x22>
    2986:	00 d0       	rcall	.+0      	; 0x2988 <_ZN20FridgeTempController18updateTemperaturesEv+0x24>
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	8c 01       	movw	r16, r24
{
	TempFast[0] = TempFast[1];
    298e:	fc 01       	movw	r30, r24
    2990:	86 85       	ldd	r24, Z+14	; 0x0e
    2992:	97 85       	ldd	r25, Z+15	; 0x0f
    2994:	a0 89       	ldd	r26, Z+16	; 0x10
    2996:	b1 89       	ldd	r27, Z+17	; 0x11
    2998:	82 87       	std	Z+10, r24	; 0x0a
    299a:	93 87       	std	Z+11, r25	; 0x0b
    299c:	a4 87       	std	Z+12, r26	; 0x0c
    299e:	b5 87       	std	Z+13, r27	; 0x0d
	TempFast[1] = TempFast[2];
    29a0:	82 89       	ldd	r24, Z+18	; 0x12
    29a2:	93 89       	ldd	r25, Z+19	; 0x13
    29a4:	a4 89       	ldd	r26, Z+20	; 0x14
    29a6:	b5 89       	ldd	r27, Z+21	; 0x15
    29a8:	86 87       	std	Z+14, r24	; 0x0e
    29aa:	97 87       	std	Z+15, r25	; 0x0f
    29ac:	a0 8b       	std	Z+16, r26	; 0x10
    29ae:	b1 8b       	std	Z+17, r27	; 0x11
	TempFast[2] = TempFast[3];
    29b0:	86 89       	ldd	r24, Z+22	; 0x16
    29b2:	97 89       	ldd	r25, Z+23	; 0x17
    29b4:	a0 8d       	ldd	r26, Z+24	; 0x18
    29b6:	b1 8d       	ldd	r27, Z+25	; 0x19
    29b8:	82 8b       	std	Z+18, r24	; 0x12
    29ba:	93 8b       	std	Z+19, r25	; 0x13
    29bc:	a4 8b       	std	Z+20, r26	; 0x14
    29be:	b5 8b       	std	Z+21, r27	; 0x15
//	Serial.println("FridgeTempController::updateTemperatures");
	TempFast[3] = _Temp->GetTemperature();
    29c0:	e6 5b       	subi	r30, 0xB6	; 182
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN11TempSensors14GetTemperatureEv>
    29cc:	9b 01       	movw	r18, r22
    29ce:	ac 01       	movw	r20, r24
    29d0:	d8 01       	movw	r26, r16
    29d2:	56 96       	adiw	r26, 0x16	; 22
    29d4:	6d 93       	st	X+, r22
    29d6:	7d 93       	st	X+, r23
    29d8:	8d 93       	st	X+, r24
    29da:	9c 93       	st	X, r25
    29dc:	59 97       	sbiw	r26, 0x19	; 25
//		Serial.print(" ");
//		Serial.println(TempFast[3],10);
//	}

	// Butterworth filter with cutoff frequency 0.033*sample frequency (FS=5Hz)
	TempFiltFast[0] = TempFiltFast[1];
    29de:	5e 96       	adiw	r26, 0x1e	; 30
    29e0:	8d 90       	ld	r8, X+
    29e2:	9d 90       	ld	r9, X+
    29e4:	ad 90       	ld	r10, X+
    29e6:	bc 90       	ld	r11, X
    29e8:	91 97       	sbiw	r26, 0x21	; 33
    29ea:	f8 01       	movw	r30, r16
    29ec:	82 8e       	std	Z+26, r8	; 0x1a
    29ee:	93 8e       	std	Z+27, r9	; 0x1b
    29f0:	a4 8e       	std	Z+28, r10	; 0x1c
    29f2:	b5 8e       	std	Z+29, r11	; 0x1d
	TempFiltFast[1] = TempFiltFast[2];
    29f4:	42 a0       	ldd	r4, Z+34	; 0x22
    29f6:	53 a0       	ldd	r5, Z+35	; 0x23
    29f8:	64 a0       	ldd	r6, Z+36	; 0x24
    29fa:	75 a0       	ldd	r7, Z+37	; 0x25
    29fc:	5e 96       	adiw	r26, 0x1e	; 30
    29fe:	4d 92       	st	X+, r4
    2a00:	5d 92       	st	X+, r5
    2a02:	6d 92       	st	X+, r6
    2a04:	7c 92       	st	X, r7
    2a06:	91 97       	sbiw	r26, 0x21	; 33
	TempFiltFast[2] = TempFiltFast[3];
    2a08:	96 96       	adiw	r26, 0x26	; 38
    2a0a:	8d 91       	ld	r24, X+
    2a0c:	9d 91       	ld	r25, X+
    2a0e:	0d 90       	ld	r0, X+
    2a10:	bc 91       	ld	r27, X
    2a12:	a0 2d       	mov	r26, r0
    2a14:	89 83       	std	Y+1, r24	; 0x01
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	ab 83       	std	Y+3, r26	; 0x03
    2a1a:	bc 83       	std	Y+4, r27	; 0x04
    2a1c:	82 a3       	std	Z+34, r24	; 0x22
    2a1e:	93 a3       	std	Z+35, r25	; 0x23
    2a20:	a4 a3       	std	Z+36, r26	; 0x24
    2a22:	b5 a3       	std	Z+37, r27	; 0x25
	TempFiltFast[3] = (TempFast[0] + TempFast[3]
		+ 3 * (TempFast[1] + TempFast[2])) / 1.092799972e+03
		+ (0.6600489526 * TempFiltFast[0])
		+ (-2.2533982563 * TempFiltFast[1])
		+ (2.5860286592 * TempFiltFast[2]);
    2a24:	62 85       	ldd	r22, Z+10	; 0x0a
    2a26:	73 85       	ldd	r23, Z+11	; 0x0b
    2a28:	84 85       	ldd	r24, Z+12	; 0x0c
    2a2a:	95 85       	ldd	r25, Z+13	; 0x0d
    2a2c:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2a30:	6b 01       	movw	r12, r22
    2a32:	7c 01       	movw	r14, r24
    2a34:	d8 01       	movw	r26, r16
    2a36:	1e 96       	adiw	r26, 0x0e	; 14
    2a38:	6d 91       	ld	r22, X+
    2a3a:	7d 91       	ld	r23, X+
    2a3c:	8d 91       	ld	r24, X+
    2a3e:	9c 91       	ld	r25, X
    2a40:	51 97       	sbiw	r26, 0x11	; 17
    2a42:	52 96       	adiw	r26, 0x12	; 18
    2a44:	2d 91       	ld	r18, X+
    2a46:	3d 91       	ld	r19, X+
    2a48:	4d 91       	ld	r20, X+
    2a4a:	5c 91       	ld	r21, X
    2a4c:	55 97       	sbiw	r26, 0x15	; 21
    2a4e:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	40 e4       	ldi	r20, 0x40	; 64
    2a58:	50 e4       	ldi	r21, 0x40	; 64
    2a5a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    2a5e:	9b 01       	movw	r18, r22
    2a60:	ac 01       	movw	r20, r24
    2a62:	c7 01       	movw	r24, r14
    2a64:	b6 01       	movw	r22, r12
    2a66:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2a6a:	29 e9       	ldi	r18, 0x99	; 153
    2a6c:	39 e9       	ldi	r19, 0x99	; 153
    2a6e:	48 e8       	ldi	r20, 0x88	; 136
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    2a76:	6b 01       	movw	r12, r22
    2a78:	7c 01       	movw	r14, r24
    2a7a:	c5 01       	movw	r24, r10
    2a7c:	b4 01       	movw	r22, r8
    2a7e:	28 ef       	ldi	r18, 0xF8	; 248
    2a80:	38 ef       	ldi	r19, 0xF8	; 248
    2a82:	48 e2       	ldi	r20, 0x28	; 40
    2a84:	5f e3       	ldi	r21, 0x3F	; 63
    2a86:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    2a8a:	9b 01       	movw	r18, r22
    2a8c:	ac 01       	movw	r20, r24
    2a8e:	c7 01       	movw	r24, r14
    2a90:	b6 01       	movw	r22, r12
    2a92:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2a96:	6b 01       	movw	r12, r22
    2a98:	7c 01       	movw	r14, r24
    2a9a:	c3 01       	movw	r24, r6
    2a9c:	b2 01       	movw	r22, r4
    2a9e:	2d ea       	ldi	r18, 0xAD	; 173
    2aa0:	37 e3       	ldi	r19, 0x37	; 55
    2aa2:	40 e1       	ldi	r20, 0x10	; 16
    2aa4:	50 ec       	ldi	r21, 0xC0	; 192
    2aa6:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    2aaa:	9b 01       	movw	r18, r22
    2aac:	ac 01       	movw	r20, r24
    2aae:	c7 01       	movw	r24, r14
    2ab0:	b6 01       	movw	r22, r12
    2ab2:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2ab6:	6b 01       	movw	r12, r22
    2ab8:	7c 01       	movw	r14, r24
    2aba:	69 81       	ldd	r22, Y+1	; 0x01
    2abc:	7a 81       	ldd	r23, Y+2	; 0x02
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	2e e7       	ldi	r18, 0x7E	; 126
    2ac4:	31 e8       	ldi	r19, 0x81	; 129
    2ac6:	45 e2       	ldi	r20, 0x25	; 37
    2ac8:	50 e4       	ldi	r21, 0x40	; 64
    2aca:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    2ace:	9b 01       	movw	r18, r22
    2ad0:	ac 01       	movw	r20, r24
    2ad2:	c7 01       	movw	r24, r14
    2ad4:	b6 01       	movw	r22, r12
    2ad6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	9b 01       	movw	r18, r22
    2ade:	ac 01       	movw	r20, r24
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	26 a3       	std	Z+38, r18	; 0x26
    2ae4:	37 a3       	std	Z+39, r19	; 0x27
    2ae6:	40 a7       	std	Z+40, r20	; 0x28
    2ae8:	51 a7       	std	Z+41, r21	; 0x29
//		Serial.print("FridgeActual: ");
//		Serial.print(TemperatureActual,10);
//		Serial.print(" ");
//		Serial.println(TempFiltFast[3],10);
//	}
	TemperatureActual = TempFiltFast[3];
    2aea:	cb 01       	movw	r24, r22
    2aec:	82 83       	std	Z+2, r24	; 0x02
    2aee:	93 83       	std	Z+3, r25	; 0x03
    2af0:	a4 83       	std	Z+4, r26	; 0x04
    2af2:	b5 83       	std	Z+5, r27	; 0x05
//	Serial.println("FridgeActual");
//	Serial.println(TemperatureActual);
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	1f 91       	pop	r17
    2b02:	0f 91       	pop	r16
    2b04:	ff 90       	pop	r15
    2b06:	ef 90       	pop	r14
    2b08:	df 90       	pop	r13
    2b0a:	cf 90       	pop	r12
    2b0c:	bf 90       	pop	r11
    2b0e:	af 90       	pop	r10
    2b10:	9f 90       	pop	r9
    2b12:	8f 90       	pop	r8
    2b14:	7f 90       	pop	r7
    2b16:	6f 90       	pop	r6
    2b18:	5f 90       	pop	r5
    2b1a:	4f 90       	pop	r4
    2b1c:	08 95       	ret

00002b1e <_ZN20FridgeTempController11UpdateTimerEv>:
{
	//Run the algorithm
	return 0;
}

void FridgeTempController::UpdateTimer()
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	ec 01       	movw	r28, r24
{
	_timer+=200;
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e4 5b       	subi	r30, 0xB4	; 180
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	68 53       	subi	r22, 0x38	; 56
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3e:	60 83       	st	Z, r22
    2b40:	71 83       	std	Z+1, r23	; 0x01
    2b42:	82 83       	std	Z+2, r24	; 0x02
    2b44:	93 83       	std	Z+3, r25	; 0x03

//	Serial.print("Fridge Before ");
//	Serial.println(_timer);
	//Check the timers
	if ((_timer % 200) == 0){
    2b46:	28 ec       	ldi	r18, 0xC8	; 200
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    2b52:	61 15       	cp	r22, r1
    2b54:	71 05       	cpc	r23, r1
    2b56:	81 05       	cpc	r24, r1
    2b58:	91 05       	cpc	r25, r1
    2b5a:	19 f4       	brne	.+6      	; 0x2b62 <_ZN20FridgeTempController11UpdateTimerEv+0x44>
//		Serial.println("Updating Fridge Fast Temps");
		updateTemperatures();					// Update Fast Temperatures every 200ms
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	0e 94 b2 14 	call	0x2964	; 0x2964 <_ZN20FridgeTempController18updateTemperaturesEv>
	}
	if((_timer % 10000) == 0){					// Update Slow Temperatures every 10 seconds
    2b62:	c4 5b       	subi	r28, 0xB4	; 180
    2b64:	df 4f       	sbci	r29, 0xFF	; 255
    2b66:	68 81       	ld	r22, Y
    2b68:	79 81       	ldd	r23, Y+1	; 0x01
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6e:	cc 54       	subi	r28, 0x4C	; 76
    2b70:	d0 40       	sbci	r29, 0x00	; 0
    2b72:	20 e1       	ldi	r18, 0x10	; 16
    2b74:	37 e2       	ldi	r19, 0x27	; 39
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    2b7e:	61 15       	cp	r22, r1
    2b80:	71 05       	cpc	r23, r1
    2b82:	81 05       	cpc	r24, r1
    2b84:	91 05       	cpc	r25, r1
    2b86:	a1 f5       	brne	.+104    	; 0x2bf0 <_ZN20FridgeTempController11UpdateTimerEv+0xd2>
//		Serial.println("Updating Fridge Slow Temps");
		updateSlowFilteredTemperatures();
    2b88:	ce 01       	movw	r24, r28
    2b8a:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>
		Serial.print(TempFast[3]);
    2b8e:	4e 89       	ldd	r20, Y+22	; 0x16
    2b90:	5f 89       	ldd	r21, Y+23	; 0x17
    2b92:	68 8d       	ldd	r22, Y+24	; 0x18
    2b94:	79 8d       	ldd	r23, Y+25	; 0x19
    2b96:	8c e7       	ldi	r24, 0x7C	; 124
    2b98:	93 e0       	ldi	r25, 0x03	; 3
    2b9a:	22 e0       	ldi	r18, 0x02	; 2
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    2ba2:	8c e7       	ldi	r24, 0x7C	; 124
    2ba4:	93 e0       	ldi	r25, 0x03	; 3
    2ba6:	6c e2       	ldi	r22, 0x2C	; 44
    2ba8:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
		Serial.print(TempFiltFast[3]);
    2bac:	4e a1       	ldd	r20, Y+38	; 0x26
    2bae:	5f a1       	ldd	r21, Y+39	; 0x27
    2bb0:	68 a5       	ldd	r22, Y+40	; 0x28
    2bb2:	79 a5       	ldd	r23, Y+41	; 0x29
    2bb4:	8c e7       	ldi	r24, 0x7C	; 124
    2bb6:	93 e0       	ldi	r25, 0x03	; 3
    2bb8:	22 e0       	ldi	r18, 0x02	; 2
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    2bc0:	8c e7       	ldi	r24, 0x7C	; 124
    2bc2:	93 e0       	ldi	r25, 0x03	; 3
    2bc4:	6c e2       	ldi	r22, 0x2C	; 44
    2bc6:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
		Serial.print(TempFiltSlow[3]);
    2bca:	ca 5b       	subi	r28, 0xBA	; 186
    2bcc:	df 4f       	sbci	r29, 0xFF	; 255
    2bce:	48 81       	ld	r20, Y
    2bd0:	59 81       	ldd	r21, Y+1	; 0x01
    2bd2:	6a 81       	ldd	r22, Y+2	; 0x02
    2bd4:	7b 81       	ldd	r23, Y+3	; 0x03
    2bd6:	c6 54       	subi	r28, 0x46	; 70
    2bd8:	d0 40       	sbci	r29, 0x00	; 0
    2bda:	8c e7       	ldi	r24, 0x7C	; 124
    2bdc:	93 e0       	ldi	r25, 0x03	; 3
    2bde:	22 e0       	ldi	r18, 0x02	; 2
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(',');
    2be6:	8c e7       	ldi	r24, 0x7C	; 124
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	6c e2       	ldi	r22, 0x2C	; 44
    2bec:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>
	}
	if((_timer % 60000) == 0){
    2bf0:	8e 01       	movw	r16, r28
    2bf2:	04 5b       	subi	r16, 0xB4	; 180
    2bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf6:	f8 01       	movw	r30, r16
    2bf8:	60 81       	ld	r22, Z
    2bfa:	71 81       	ldd	r23, Z+1	; 0x01
    2bfc:	82 81       	ldd	r24, Z+2	; 0x02
    2bfe:	93 81       	ldd	r25, Z+3	; 0x03
    2c00:	20 e6       	ldi	r18, 0x60	; 96
    2c02:	3a ee       	ldi	r19, 0xEA	; 234
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    2c0c:	61 15       	cp	r22, r1
    2c0e:	71 05       	cpc	r23, r1
    2c10:	81 05       	cpc	r24, r1
    2c12:	91 05       	cpc	r25, r1
    2c14:	41 f4       	brne	.+16     	; 0x2c26 <_ZN20FridgeTempController11UpdateTimerEv+0x108>
//		Serial.println("Updating Fridge Slope");
		updateSlope();
    2c16:	ce 01       	movw	r24, r28
    2c18:	0e 94 6d 13 	call	0x26da	; 0x26da <_ZN20FridgeTempController11updateSlopeEv>
		_timer = 0;
    2c1c:	f8 01       	movw	r30, r16
    2c1e:	10 82       	st	Z, r1
    2c20:	11 82       	std	Z+1, r1	; 0x01
    2c22:	12 82       	std	Z+2, r1	; 0x02
    2c24:	13 82       	std	Z+3, r1	; 0x03
	}
//	Serial.print("Fridge After ");
//	Serial.println(_timer);
}
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	08 95       	ret

00002c30 <_ZN20FridgeTempControllerD0Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

FridgeTempController::~FridgeTempController() {
    2c30:	fc 01       	movw	r30, r24
    2c32:	86 e5       	ldi	r24, 0x56	; 86
    2c34:	92 e0       	ldi	r25, 0x02	; 2
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2c3a:	cf 01       	movw	r24, r30
    2c3c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
    2c40:	08 95       	ret

00002c42 <_ZN20FridgeTempControllerC1Ev>:
 */

#include "FridgeTempController.h"
#include "TCLExample.h"

FridgeTempController::FridgeTempController() {
    2c42:	0f 93       	push	r16
    2c44:	1f 93       	push	r17
    2c46:	cf 93       	push	r28
    2c48:	df 93       	push	r29
    2c4a:	ec 01       	movw	r28, r24
    2c4c:	86 e5       	ldi	r24, 0x56	; 86
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	99 83       	std	Y+1, r25	; 0x01
    2c52:	88 83       	st	Y, r24
	_timer = 0;
    2c54:	c4 5b       	subi	r28, 0xB4	; 180
    2c56:	df 4f       	sbci	r29, 0xFF	; 255
    2c58:	18 82       	st	Y, r1
    2c5a:	19 82       	std	Y+1, r1	; 0x01
    2c5c:	1a 82       	std	Y+2, r1	; 0x02
    2c5e:	1b 82       	std	Y+3, r1	; 0x03
    2c60:	cc 54       	subi	r28, 0x4C	; 76
    2c62:	d0 40       	sbci	r29, 0x00	; 0
	_Temp = new TempSensors("Fridge",0);
    2c64:	86 e2       	ldi	r24, 0x26	; 38
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    2c6c:	18 2f       	mov	r17, r24
    2c6e:	09 2f       	mov	r16, r25
    2c70:	65 e7       	ldi	r22, 0x75	; 117
    2c72:	71 e0       	ldi	r23, 0x01	; 1
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_ZN11TempSensorsC1EPKch>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e6 5b       	subi	r30, 0xB6	; 182
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	10 83       	st	Z, r17
    2c82:	01 83       	std	Z+1, r16	; 0x01

	_Temp->_lastTempRequest = 0;
    2c84:	10 92 f3 02 	sts	0x02F3, r1
    2c88:	10 92 f2 02 	sts	0x02F2, r1

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	aa e7       	ldi	r26, 0x7A	; 122
    2c92:	b3 e4       	ldi	r27, 0x43	; 67
    2c94:	8e 83       	std	Y+6, r24	; 0x06
    2c96:	9f 83       	std	Y+7, r25	; 0x07
    2c98:	a8 87       	std	Y+8, r26	; 0x08
    2c9a:	b9 87       	std	Y+9, r27	; 0x09
	TemperatureActual = _Temp->GetTemperature();
    2c9c:	80 81       	ld	r24, Z
    2c9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ca0:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <_ZN11TempSensors14GetTemperatureEv>
    2ca4:	6a 83       	std	Y+2, r22	; 0x02
    2ca6:	7b 83       	std	Y+3, r23	; 0x03
    2ca8:	8c 83       	std	Y+4, r24	; 0x04
    2caa:	9d 83       	std	Y+5, r25	; 0x05
    2cac:	fe 01       	movw	r30, r28
	for (int i = 0; i < 4; i++) {
    2cae:	9e 01       	movw	r18, r28
    2cb0:	20 5f       	subi	r18, 0xF0	; 240
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
		TempFast[i] = TemperatureActual;
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	ac 81       	ldd	r26, Y+4	; 0x04
    2cba:	bd 81       	ldd	r27, Y+5	; 0x05
    2cbc:	82 87       	std	Z+10, r24	; 0x0a
    2cbe:	93 87       	std	Z+11, r25	; 0x0b
    2cc0:	a4 87       	std	Z+12, r26	; 0x0c
    2cc2:	b5 87       	std	Z+13, r27	; 0x0d
		TempFiltFast[i] = TemperatureActual;
    2cc4:	82 8f       	std	Z+26, r24	; 0x1a
    2cc6:	93 8f       	std	Z+27, r25	; 0x1b
    2cc8:	a4 8f       	std	Z+28, r26	; 0x1c
    2cca:	b5 8f       	std	Z+29, r27	; 0x1d
    2ccc:	34 96       	adiw	r30, 0x04	; 4

	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    2cce:	e2 17       	cp	r30, r18
    2cd0:	f3 07       	cpc	r31, r19
    2cd2:	81 f7       	brne	.-32     	; 0x2cb4 <_ZN20FridgeTempControllerC1Ev+0x72>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ba 96       	adiw	r30, 0x2a	; 42
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2cd8:	9e 01       	movw	r18, r28
    2cda:	26 5c       	subi	r18, 0xC6	; 198
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
		TempSlow[i] = TempFiltFast[3];
    2cde:	8e a1       	ldd	r24, Y+38	; 0x26
    2ce0:	9f a1       	ldd	r25, Y+39	; 0x27
    2ce2:	a8 a5       	ldd	r26, Y+40	; 0x28
    2ce4:	b9 a5       	ldd	r27, Y+41	; 0x29
    2ce6:	80 83       	st	Z, r24
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	a2 83       	std	Z+2, r26	; 0x02
    2cec:	b3 83       	std	Z+3, r27	; 0x03
		TempFiltSlow[i] = TempFiltFast[3];
    2cee:	80 8b       	std	Z+16, r24	; 0x10
    2cf0:	91 8b       	std	Z+17, r25	; 0x11
    2cf2:	a2 8b       	std	Z+18, r26	; 0x12
    2cf4:	b3 8b       	std	Z+19, r27	; 0x13
    2cf6:	34 96       	adiw	r30, 0x04	; 4
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2cf8:	e2 17       	cp	r30, r18
    2cfa:	f3 07       	cpc	r31, r19
    2cfc:	81 f7       	brne	.-32     	; 0x2cde <_ZN20FridgeTempControllerC1Ev+0x9c>
		TempSlow[i] = TempFiltFast[3];
		TempFiltSlow[i] = TempFiltFast[3];
	}
		updateSlowFilteredTemperatures();
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>

	Slope = 0;
    2d04:	c0 5b       	subi	r28, 0xB0	; 176
    2d06:	df 4f       	sbci	r29, 0xFF	; 255
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	a0 e0       	ldi	r26, 0x00	; 0
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	88 83       	st	Y, r24
    2d12:	99 83       	std	Y+1, r25	; 0x01
    2d14:	aa 83       	std	Y+2, r26	; 0x02
    2d16:	bb 83       	std	Y+3, r27	; 0x03
    2d18:	c0 55       	subi	r28, 0x50	; 80
    2d1a:	d0 40       	sbci	r29, 0x00	; 0
	TempHistoryIndex = 0;
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e4 53       	subi	r30, 0x34	; 52
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	10 82       	st	Z, r1
    2d24:	9e 01       	movw	r18, r28
    2d26:	2c 5a       	subi	r18, 0xAC	; 172
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255

	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
    2d2a:	ca 5b       	subi	r28, 0xBA	; 186
    2d2c:	df 4f       	sbci	r29, 0xFF	; 255
		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    2d2e:	af 01       	movw	r20, r30
		TempHistory[i] = TempFiltSlow[3];
    2d30:	88 81       	ld	r24, Y
    2d32:	99 81       	ldd	r25, Y+1	; 0x01
    2d34:	aa 81       	ldd	r26, Y+2	; 0x02
    2d36:	bb 81       	ldd	r27, Y+3	; 0x03
    2d38:	f9 01       	movw	r30, r18
    2d3a:	81 93       	st	Z+, r24
    2d3c:	91 93       	st	Z+, r25
    2d3e:	a1 93       	st	Z+, r26
    2d40:	b1 93       	st	Z+, r27
    2d42:	9f 01       	movw	r18, r30
		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    2d44:	e4 17       	cp	r30, r20
    2d46:	f5 07       	cpc	r31, r21
    2d48:	99 f7       	brne	.-26     	; 0x2d30 <_ZN20FridgeTempControllerC1Ev+0xee>
		TempHistory[i] = TempFiltSlow[3];
	}
}
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <_ZN5Relay8SetStateEb>:
Relay::~Relay() {
	// TODO Auto-generated destructor stub
}

//Returns false if it does NOT perform a state change
bool Relay::SetState(bool newState){
    2d54:	fc 01       	movw	r30, r24
	if(_state == newState)
    2d56:	81 81       	ldd	r24, Z+1	; 0x01
    2d58:	86 17       	cp	r24, r22
    2d5a:	11 f4       	brne	.+4      	; 0x2d60 <_ZN5Relay8SetStateEb+0xc>
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	08 95       	ret
		return false;
	else if(newState){
    2d60:	66 23       	and	r22, r22
    2d62:	41 f0       	breq	.+16     	; 0x2d74 <_ZN5Relay8SetStateEb+0x20>
		_state = true;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	81 83       	std	Z+1, r24	; 0x01
		digitalWrite(_pin, LOW);
    2d68:	80 81       	ld	r24, Z
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	08 95       	ret
		return true;
	}
	else if(!newState){
		_state = false;
    2d74:	11 82       	std	Z+1, r1	; 0x01
		digitalWrite(_pin, HIGH);
    2d76:	80 81       	ld	r24, Z
    2d78:	61 e0       	ldi	r22, 0x01	; 1
    2d7a:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	return false;
}
    2d80:	08 95       	ret

00002d82 <_ZN5RelayC1Ehb>:
 *      Author: sfeltner
 */

#include "Relay.h"

Relay::Relay(uint8_t pin, bool startState) {
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	ec 01       	movw	r28, r24
    2d8a:	86 2f       	mov	r24, r22
    2d8c:	14 2f       	mov	r17, r20

	_pin = pin;
    2d8e:	68 83       	st	Y, r22
	_state = startState;
    2d90:	49 83       	std	Y+1, r20	; 0x01

	pinMode(_pin, OUTPUT);
    2d92:	61 e0       	ldi	r22, 0x01	; 1
    2d94:	0e 94 6e 27 	call	0x4edc	; 0x4edc <pinMode>
	if(startState)
    2d98:	11 23       	and	r17, r17
    2d9a:	19 f0       	breq	.+6      	; 0x2da2 <_ZN5RelayC1Ehb+0x20>
		digitalWrite(_pin, LOW);
    2d9c:	88 81       	ld	r24, Y
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <_ZN5RelayC1Ehb+0x24>
	else
		digitalWrite(_pin, HIGH);
    2da2:	88 81       	ld	r24, Y
    2da4:	61 e0       	ldi	r22, 0x01	; 1
    2da6:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <digitalWrite>

}
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	08 95       	ret

00002db2 <_ZN8SettingsC1Ev>:


#include <EEPROM.h>
#include "Settings.h"

Settings::Settings() {
    2db2:	fc 01       	movw	r30, r24
    2db4:	8e e5       	ldi	r24, 0x5E	; 94
    2db6:	92 e0       	ldi	r25, 0x02	; 2
    2db8:	91 83       	std	Z+1, r25	; 0x01
    2dba:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub

}
    2dbc:	08 95       	ret

00002dbe <_ZN8SettingsD1Ev>:

Settings::~Settings() {
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	8e e5       	ldi	r24, 0x5E	; 94
    2dc2:	92 e0       	ldi	r25, 0x02	; 2
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2dc8:	08 95       	ret

00002dca <_ZN8Settings4SaveEv>:
//     _writeFloat(EEPROM_HEAT_ESTIMATOR, heatOvershootEstimator);
//  }
//  if(coolOvershootEstimator != _readFloat(EEPROM_COOL_ESTIMATOR)){
//     _writeFloat(EEPROM_COOL_ESTIMATOR, coolOvershootEstimator);
//  }
}
    2dca:	08 95       	ret

00002dcc <_ZN8SettingsD0Ev>:
Settings::Settings() {
	// TODO Auto-generated constructor stub

}

Settings::~Settings() {
    2dcc:	fc 01       	movw	r30, r24
    2dce:	8e e5       	ldi	r24, 0x5E	; 94
    2dd0:	92 e0       	ldi	r25, 0x02	; 2
    2dd2:	91 83       	std	Z+1, r25	; 0x01
    2dd4:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2dd6:	cf 01       	movw	r24, r30
    2dd8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
    2ddc:	08 95       	ret

00002dde <timerISR>:
	MsTimer2::start();
}

void timerISR(){
//	Serial.print('.');
	Services |= CLK_SERVICE;			// service Clock once a second
    2dde:	80 91 b6 02 	lds	r24, 0x02B6
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	80 93 b6 02 	sts	0x02B6, r24
//	Serial.print('`');
}
    2de8:	08 95       	ret

00002dea <_Z41__static_initialization_and_destruction_0ii>:
//	if(Serial.available()){
//		processSyncMessage();
//	}


}
    2dea:	af 92       	push	r10
    2dec:	cf 92       	push	r12
    2dee:	ef 92       	push	r14
    2df0:	0f 93       	push	r16
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	91 05       	cpc	r25, r1
    2df6:	09 f5       	brne	.+66     	; 0x2e3a <_Z41__static_initialization_and_destruction_0ii+0x50>
    2df8:	6f 5f       	subi	r22, 0xFF	; 255
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfc:	79 f5       	brne	.+94     	; 0x2e5c <_Z41__static_initialization_and_destruction_0ii+0x72>

#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
    2dfe:	84 ea       	ldi	r24, 0xA4	; 164
    2e00:	92 e0       	ldi	r25, 0x02	; 2
    2e02:	63 e1       	ldi	r22, 0x13	; 19
    2e04:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6ButtonC1Eh>
Button buttonUp(BUTTONUP_PIN);
    2e08:	8a ea       	ldi	r24, 0xAA	; 170
    2e0a:	92 e0       	ldi	r25, 0x02	; 2
    2e0c:	65 e1       	ldi	r22, 0x15	; 21
    2e0e:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6ButtonC1Eh>
Button buttonDown(BUTTONDOWN_PIN);
    2e12:	80 eb       	ldi	r24, 0xB0	; 176
    2e14:	92 e0       	ldi	r25, 0x02	; 2
    2e16:	64 e1       	ldi	r22, 0x14	; 20
    2e18:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN6ButtonC1Eh>
byte updateTemperatures_Interval = 0;
byte updateSlowFilteredTemperatures_Interval = 0;
byte updateSlope_Interval = 0;

// init the OLED
OLEDFourBit lcd(3, 4, 5, 6, 7, 8, 9);
    2e1c:	87 eb       	ldi	r24, 0xB7	; 183
    2e1e:	92 e0       	ldi	r25, 0x02	; 2
    2e20:	63 e0       	ldi	r22, 0x03	; 3
    2e22:	44 e0       	ldi	r20, 0x04	; 4
    2e24:	25 e0       	ldi	r18, 0x05	; 5
    2e26:	06 e0       	ldi	r16, 0x06	; 6
    2e28:	77 e0       	ldi	r23, 0x07	; 7
    2e2a:	e7 2e       	mov	r14, r23
    2e2c:	58 e0       	ldi	r21, 0x08	; 8
    2e2e:	c5 2e       	mov	r12, r21
    2e30:	39 e0       	ldi	r19, 0x09	; 9
    2e32:	a3 2e       	mov	r10, r19
    2e34:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN11OLEDFourBitC1Ehhhhhhh>
    2e38:	11 c0       	rjmp	.+34     	; 0x2e5c <_Z41__static_initialization_and_destruction_0ii+0x72>
    2e3a:	89 2b       	or	r24, r25
    2e3c:	79 f4       	brne	.+30     	; 0x2e5c <_Z41__static_initialization_and_destruction_0ii+0x72>
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	61 f4       	brne	.+24     	; 0x2e5c <_Z41__static_initialization_and_destruction_0ii+0x72>
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
Button buttonUp(BUTTONUP_PIN);
Button buttonDown(BUTTONDOWN_PIN);
    2e44:	80 eb       	ldi	r24, 0xB0	; 176
    2e46:	92 e0       	ldi	r25, 0x02	; 2
    2e48:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN6ButtonD1Ev>
#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
Button buttonUp(BUTTONUP_PIN);
    2e4c:	8a ea       	ldi	r24, 0xAA	; 170
    2e4e:	92 e0       	ldi	r25, 0x02	; 2
    2e50:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN6ButtonD1Ev>

#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
    2e54:	84 ea       	ldi	r24, 0xA4	; 164
    2e56:	92 e0       	ldi	r25, 0x02	; 2
    2e58:	0e 94 6e 10 	call	0x20dc	; 0x20dc <_ZN6ButtonD1Ev>
//	if(Serial.available()){
//		processSyncMessage();
//	}


}
    2e5c:	0f 91       	pop	r16
    2e5e:	ef 90       	pop	r14
    2e60:	cf 90       	pop	r12
    2e62:	af 90       	pop	r10
    2e64:	08 95       	ret

00002e66 <_GLOBAL__D_DHT>:
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	6f ef       	ldi	r22, 0xFF	; 255
    2e6c:	7f ef       	ldi	r23, 0xFF	; 255
    2e6e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_Z41__static_initialization_and_destruction_0ii>
    2e72:	08 95       	ret

00002e74 <_GLOBAL__I_DHT>:
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	6f ef       	ldi	r22, 0xFF	; 255
    2e7a:	7f ef       	ldi	r23, 0xFF	; 255
    2e7c:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_Z41__static_initialization_and_destruction_0ii>
    2e80:	08 95       	ret

00002e82 <loop>:
//	Serial.print('.');
	Services |= CLK_SERVICE;			// service Clock once a second
//	Serial.print('`');
}

void loop(void)
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17

//	if (Services & CLK_SERVICE){
//		CLKControl();
//	}

	if (buttonUp.IsPressed()){
    2e86:	8a ea       	ldi	r24, 0xAA	; 170
    2e88:	92 e0       	ldi	r25, 0x02	; 2
    2e8a:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN6Button9IsPressedEv>
    2e8e:	88 23       	and	r24, r24
    2e90:	69 f0       	breq	.+26     	; 0x2eac <loop+0x2a>
		Serial.println("UP Button Pressed ");
    2e92:	8c e7       	ldi	r24, 0x7C	; 124
    2e94:	93 e0       	ldi	r25, 0x03	; 3
    2e96:	6c e7       	ldi	r22, 0x7C	; 124
    2e98:	71 e0       	ldi	r23, 0x01	; 1
    2e9a:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
//		if (menuFlag){
			tempControl->SetCurrentTempSetting(1);
    2e9e:	80 91 c9 02 	lds	r24, 0x02C9
    2ea2:	90 91 ca 02 	lds	r25, 0x02CA
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN11TempControl21SetCurrentTempSettingEc>
//		}
	}

	if (buttonDown.IsPressed()){
    2eac:	80 eb       	ldi	r24, 0xB0	; 176
    2eae:	92 e0       	ldi	r25, 0x02	; 2
    2eb0:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN6Button9IsPressedEv>
    2eb4:	88 23       	and	r24, r24
    2eb6:	69 f0       	breq	.+26     	; 0x2ed2 <loop+0x50>
		Serial.println("DOWN Button Pressed ");
    2eb8:	8c e7       	ldi	r24, 0x7C	; 124
    2eba:	93 e0       	ldi	r25, 0x03	; 3
    2ebc:	6f e8       	ldi	r22, 0x8F	; 143
    2ebe:	71 e0       	ldi	r23, 0x01	; 1
    2ec0:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
//		if (menuFlag){
			tempControl->SetCurrentTempSetting(-1);
    2ec4:	80 91 c9 02 	lds	r24, 0x02C9
    2ec8:	90 91 ca 02 	lds	r25, 0x02CA
    2ecc:	6f ef       	ldi	r22, 0xFF	; 255
    2ece:	0e 94 ba 20 	call	0x4174	; 0x4174 <_ZN11TempControl21SetCurrentTempSettingEc>
//		}
	}

	if (buttonMenu.IsPressed()){
    2ed2:	84 ea       	ldi	r24, 0xA4	; 164
    2ed4:	92 e0       	ldi	r25, 0x02	; 2
    2ed6:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN6Button9IsPressedEv>
    2eda:	88 23       	and	r24, r24
    2edc:	89 f0       	breq	.+34     	; 0x2f00 <loop+0x7e>
		menuTemp = (byte)menuFlag + 1;
    2ede:	60 91 cf 02 	lds	r22, 0x02CF
    2ee2:	6f 5f       	subi	r22, 0xFF	; 255
		if (menuTemp > TempControl::modes_LAST){
    2ee4:	63 30       	cpi	r22, 0x03	; 3
    2ee6:	08 f0       	brcs	.+2      	; 0x2eea <loop+0x68>
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
			menuTemp = TempControl::modes_FIRST;
		}
		menuFlag = (TempControl::modes_t)menuTemp;
    2eea:	60 93 cf 02 	sts	0x02CF, r22
    2eee:	10 92 d0 02 	sts	0x02D0, r1
		tempControl->SetMode(menuFlag);
    2ef2:	80 91 c9 02 	lds	r24, 0x02C9
    2ef6:	90 91 ca 02 	lds	r25, 0x02CA
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN11TempControl7SetModeENS_7modes_tE>
////			lcd.setCursor(10,1);
////			lcd.print(modeStrDest);
//		}
	}

	tempControl->UpdateTimers();
    2f00:	80 91 c9 02 	lds	r24, 0x02C9
    2f04:	90 91 ca 02 	lds	r25, 0x02CA
    2f08:	0e 94 a7 20 	call	0x414e	; 0x414e <_ZN11TempControl12UpdateTimersEv>
	Services &= ~CLK_SERVICE;
    2f0c:	80 91 b6 02 	lds	r24, 0x02B6
    2f10:	87 7f       	andi	r24, 0xF7	; 247
    2f12:	80 93 b6 02 	sts	0x02B6, r24

	//redraw the LCD display
	display->LiquidTemp = tempControl->GetBeerTemp();
    2f16:	00 91 cb 02 	lds	r16, 0x02CB
    2f1a:	10 91 cc 02 	lds	r17, 0x02CC
    2f1e:	80 91 c9 02 	lds	r24, 0x02C9
    2f22:	90 91 ca 02 	lds	r25, 0x02CA
    2f26:	0e 94 4b 1c 	call	0x3896	; 0x3896 <_ZN11TempControl11GetBeerTempEv>
    2f2a:	f8 01       	movw	r30, r16
    2f2c:	66 83       	std	Z+6, r22	; 0x06
    2f2e:	77 83       	std	Z+7, r23	; 0x07
    2f30:	80 87       	std	Z+8, r24	; 0x08
    2f32:	91 87       	std	Z+9, r25	; 0x09
	display->AtmosphereTemp = tempControl->GetFridgeTemp();
    2f34:	00 91 cb 02 	lds	r16, 0x02CB
    2f38:	10 91 cc 02 	lds	r17, 0x02CC
    2f3c:	80 91 c9 02 	lds	r24, 0x02C9
    2f40:	90 91 ca 02 	lds	r25, 0x02CA
    2f44:	0e 94 3f 1c 	call	0x387e	; 0x387e <_ZN11TempControl13GetFridgeTempEv>
    2f48:	f8 01       	movw	r30, r16
    2f4a:	62 83       	std	Z+2, r22	; 0x02
    2f4c:	73 83       	std	Z+3, r23	; 0x03
    2f4e:	84 83       	std	Z+4, r24	; 0x04
    2f50:	95 83       	std	Z+5, r25	; 0x05
	display->TargetTemp = tempControl->GetCurrentTempSetting();
    2f52:	00 91 cb 02 	lds	r16, 0x02CB
    2f56:	10 91 cc 02 	lds	r17, 0x02CC
    2f5a:	80 91 c9 02 	lds	r24, 0x02C9
    2f5e:	90 91 ca 02 	lds	r25, 0x02CA
    2f62:	0e 94 6f 1b 	call	0x36de	; 0x36de <_ZN11TempControl21GetCurrentTempSettingEv>
    2f66:	f8 01       	movw	r30, r16
    2f68:	66 87       	std	Z+14, r22	; 0x0e
    2f6a:	77 87       	std	Z+15, r23	; 0x0f
    2f6c:	80 8b       	std	Z+16, r24	; 0x10
    2f6e:	91 8b       	std	Z+17, r25	; 0x11
	display->SetMode(tempControl->GetModeStr());
    2f70:	00 91 cb 02 	lds	r16, 0x02CB
    2f74:	10 91 cc 02 	lds	r17, 0x02CC
    2f78:	80 91 c9 02 	lds	r24, 0x02C9
    2f7c:	90 91 ca 02 	lds	r25, 0x02CA
    2f80:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN11TempControl10GetModeStrEv>
    2f84:	bc 01       	movw	r22, r24
    2f86:	c8 01       	movw	r24, r16
    2f88:	0e 94 ed 11 	call	0x23da	; 0x23da <_ZN7Display7SetModeEPKc>
	display->SetState(tempControl->GetStateStr());
    2f8c:	00 91 cb 02 	lds	r16, 0x02CB
    2f90:	10 91 cc 02 	lds	r17, 0x02CC
    2f94:	80 91 c9 02 	lds	r24, 0x02C9
    2f98:	90 91 ca 02 	lds	r25, 0x02CA
    2f9c:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_ZN11TempControl11GetStateStrEv>
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	c8 01       	movw	r24, r16
    2fa4:	0e 94 b2 11 	call	0x2364	; 0x2364 <_ZN7Display8SetStateEPKc>
	display->Draw();
    2fa8:	80 91 cb 02 	lds	r24, 0x02CB
    2fac:	90 91 cc 02 	lds	r25, 0x02CC
    2fb0:	0e 94 30 12 	call	0x2460	; 0x2460 <_ZN7Display4DrawEv>

	command->Execute();
    2fb4:	80 91 cd 02 	lds	r24, 0x02CD
    2fb8:	90 91 ce 02 	lds	r25, 0x02CE
    2fbc:	0e 94 36 11 	call	0x226c	; 0x226c <_ZN7Command7ExecuteEv>
//	if(Serial.available()){
//		processSyncMessage();
//	}


}
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <setup>:

TempControl *tempControl;
Display *display;
Command * command;

void setup(void)
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
{
	// start serial port
	Serial.begin(9600);
    2fca:	0c e7       	ldi	r16, 0x7C	; 124
    2fcc:	13 e0       	ldi	r17, 0x03	; 3
    2fce:	c8 01       	movw	r24, r16
    2fd0:	40 e8       	ldi	r20, 0x80	; 128
    2fd2:	55 e2       	ldi	r21, 0x25	; 37
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	0e 94 cd 22 	call	0x459a	; 0x459a <_ZN14HardwareSerial5beginEm>

	// analog pins are input by default - for the buttons - move to class?
	analogReference(2); //set analog reference to internal 1.1V
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	0e 94 49 27 	call	0x4e92	; 0x4e92 <analogReference>
	delay(100);
    2fe2:	64 e6       	ldi	r22, 0x64	; 100
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 ab 26 	call	0x4d56	; 0x4d56 <delay>

	Serial.println("BEER TEST PROGRAM ");
    2fee:	c8 01       	movw	r24, r16
    2ff0:	64 ea       	ldi	r22, 0xA4	; 164
    2ff2:	71 e0       	ldi	r23, 0x01	; 1
    2ff4:	0e 94 2d 26 	call	0x4c5a	; 0x4c5a <_ZN5Print7printlnEPKc>
	Serial.println();
    2ff8:	c8 01       	movw	r24, r16
    2ffa:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN5Print7printlnEv>

	tempControl = new TempControl();
    2ffe:	80 e6       	ldi	r24, 0x60	; 96
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    3006:	18 2f       	mov	r17, r24
    3008:	09 2f       	mov	r16, r25
    300a:	0e 94 10 21 	call	0x4220	; 0x4220 <_ZN11TempControlC1Ev>
    300e:	10 93 c9 02 	sts	0x02C9, r17
    3012:	00 93 ca 02 	sts	0x02CA, r16
	command = new Command(tempControl);
    3016:	84 e3       	ldi	r24, 0x34	; 52
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    301e:	18 2f       	mov	r17, r24
    3020:	09 2f       	mov	r16, r25
    3022:	60 91 c9 02 	lds	r22, 0x02C9
    3026:	70 91 ca 02 	lds	r23, 0x02CA
    302a:	0e 94 24 11 	call	0x2248	; 0x2248 <_ZN7CommandC1EP11TempControl>
    302e:	10 93 cd 02 	sts	0x02CD, r17
    3032:	00 93 ce 02 	sts	0x02CE, r16

	lcd.begin(20, 4);
    3036:	07 eb       	ldi	r16, 0xB7	; 183
    3038:	12 e0       	ldi	r17, 0x02	; 2
    303a:	c8 01       	movw	r24, r16
    303c:	64 e1       	ldi	r22, 0x14	; 20
    303e:	44 e0       	ldi	r20, 0x04	; 4
    3040:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <_ZN11OLEDFourBit5beginEhh>
	lcd.clear();
    3044:	c8 01       	movw	r24, r16
    3046:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN11OLEDFourBit5clearEv>
	lcd.home();
    304a:	c8 01       	movw	r24, r16
    304c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_ZN11OLEDFourBit4homeEv>

	lcd.setCursor(0,0);
    3050:	c8 01       	movw	r24, r16
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11OLEDFourBit9setCursorEhh>
	lcd.print("DHT-DS TEST PROGRAM ");
    305a:	c8 01       	movw	r24, r16
    305c:	67 eb       	ldi	r22, 0xB7	; 183
    305e:	71 e0       	ldi	r23, 0x01	; 1
    3060:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>

	lcd.display();		// Make sure the display is turned on!
    3064:	c8 01       	movw	r24, r16
    3066:	0e 94 33 0b 	call	0x1666	; 0x1666 <_ZN11OLEDFourBit7displayEv>

	display = new Display();
    306a:	8a e2       	ldi	r24, 0x2A	; 42
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    3072:	18 2f       	mov	r17, r24
    3074:	09 2f       	mov	r16, r25
    3076:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN7DisplayC1Ev>
    307a:	10 93 cb 02 	sts	0x02CB, r17
    307e:	00 93 cc 02 	sts	0x02CC, r16

	// fire up the timer interrupt!
	MsTimer2::set(CLOCK_RESOLUTION_MS, timerISR);
    3082:	68 ec       	ldi	r22, 0xC8	; 200
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	4f ee       	ldi	r20, 0xEF	; 239
    308c:	56 e1       	ldi	r21, 0x16	; 22
    308e:	0e 94 37 0c 	call	0x186e	; 0x186e <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
    3092:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <_ZN8MsTimer25startEv>
}
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	08 95       	ret

0000309c <_ZN11TempControlD1Ev>:
	_coolOvershootEstimator = 5;

	_timer        = 0;
}

TempControl::~TempControl() {
    309c:	fc 01       	movw	r30, r24
    309e:	86 e6       	ldi	r24, 0x66	; 102
    30a0:	92 e0       	ldi	r25, 0x02	; 2
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    30a6:	08 95       	ret

000030a8 <_ZN11TempControl7SetModeENS_7modes_tE>:
	_currentStateString[len] = '\0';
	return _currentStateString;
}

void TempControl::SetMode(modes_t newMode){
	_mode = newMode;
    30a8:	fc 01       	movw	r30, r24
    30aa:	75 8b       	std	Z+21, r23	; 0x15
    30ac:	64 8b       	std	Z+20, r22	; 0x14
}
    30ae:	08 95       	ret

000030b0 <_ZN11TempControl20InitializePIDControlEv>:
		timeSinceLastOn = (currentTime + 1440000) - (_lastIdleTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}

void TempControl::InitializePIDControl(void){
    30b0:	cf 93       	push	r28
    30b2:	df 93       	push	r29
    30b4:	ec 01       	movw	r28, r24
	if(_beerTemp->GetTempSetting() < _beerTemp->TempFiltSlow[3]){
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    30be:	ea 81       	ldd	r30, Y+2	; 0x02
    30c0:	fb 81       	ldd	r31, Y+3	; 0x03
    30c2:	fe 96       	adiw	r30, 0x3e	; 62
    30c4:	20 81       	ld	r18, Z
    30c6:	31 81       	ldd	r19, Z+1	; 0x01
    30c8:	42 81       	ldd	r20, Z+2	; 0x02
    30ca:	53 81       	ldd	r21, Z+3	; 0x03
    30cc:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    30d0:	88 23       	and	r24, r24
    30d2:	6c f4       	brge	.+26     	; 0x30ee <_ZN11TempControl20InitializePIDControlEv+0x3e>
		_Kp=KpCool;
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 ea       	ldi	r26, 0xA0	; 160
    30da:	b0 e4       	ldi	r27, 0x40	; 64
    30dc:	8e 8b       	std	Y+22, r24	; 0x16
    30de:	9f 8b       	std	Y+23, r25	; 0x17
    30e0:	a8 8f       	std	Y+24, r26	; 0x18
    30e2:	b9 8f       	std	Y+25, r27	; 0x19
		_Kd=KdCool;
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 ea       	ldi	r26, 0xA0	; 160
    30ea:	b0 ec       	ldi	r27, 0xC0	; 192
    30ec:	0c c0       	rjmp	.+24     	; 0x3106 <_ZN11TempControl20InitializePIDControlEv+0x56>
	}
	else{
		_Kp=KpHeat;
    30ee:	80 e0       	ldi	r24, 0x00	; 0
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	a0 e2       	ldi	r26, 0x20	; 32
    30f4:	b1 e4       	ldi	r27, 0x41	; 65
    30f6:	8e 8b       	std	Y+22, r24	; 0x16
    30f8:	9f 8b       	std	Y+23, r25	; 0x17
    30fa:	a8 8f       	std	Y+24, r26	; 0x18
    30fc:	b9 8f       	std	Y+25, r27	; 0x19
		_Kd=KdHeat;
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a0 e2       	ldi	r26, 0x20	; 32
    3104:	b1 ec       	ldi	r27, 0xC1	; 193
    3106:	8a 8f       	std	Y+26, r24	; 0x1a
    3108:	9b 8f       	std	Y+27, r25	; 0x1b
    310a:	ac 8f       	std	Y+28, r26	; 0x1c
    310c:	bd 8f       	std	Y+29, r27	; 0x1d
	}
}
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <_ZN11TempControl13timeSinceIdleEv>:
	}
	return timeSinceLastOn;
}


unsigned long TempControl::timeSinceIdle(void){
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
    3118:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    311a:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    311e:	9b 01       	movw	r18, r22
    3120:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastIdleTime){
    3122:	f8 01       	movw	r30, r16
    3124:	82 a5       	ldd	r24, Z+42	; 0x2a
    3126:	93 a5       	ldd	r25, Z+43	; 0x2b
    3128:	a4 a5       	ldd	r26, Z+44	; 0x2c
    312a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    312c:	28 1b       	sub	r18, r24
    312e:	39 0b       	sbc	r19, r25
    3130:	4a 0b       	sbc	r20, r26
    3132:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastIdleTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    3134:	b9 01       	movw	r22, r18
    3136:	ca 01       	movw	r24, r20
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	08 95       	ret

0000313e <_ZN11TempControl16timeSinceHeatingEv>:
	}
	return timeSinceLastOn;
}


unsigned long TempControl::timeSinceHeating(void){
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    3144:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    3148:	9b 01       	movw	r18, r22
    314a:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastHeatTime){
    314c:	f8 01       	movw	r30, r16
    314e:	86 a1       	ldd	r24, Z+38	; 0x26
    3150:	97 a1       	ldd	r25, Z+39	; 0x27
    3152:	a0 a5       	ldd	r26, Z+40	; 0x28
    3154:	b1 a5       	ldd	r27, Z+41	; 0x29
    3156:	28 1b       	sub	r18, r24
    3158:	39 0b       	sbc	r19, r25
    315a:	4a 0b       	sbc	r20, r26
    315c:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastHeatTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    315e:	b9 01       	movw	r22, r18
    3160:	ca 01       	movw	r24, r20
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	08 95       	ret

00003168 <_ZN11TempControl16timeSinceCoolingEv>:


}


unsigned long TempControl::timeSinceCooling(void){
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    316e:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    3172:	9b 01       	movw	r18, r22
    3174:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastCoolTime){
    3176:	f8 01       	movw	r30, r16
    3178:	82 a1       	ldd	r24, Z+34	; 0x22
    317a:	93 a1       	ldd	r25, Z+35	; 0x23
    317c:	a4 a1       	ldd	r26, Z+36	; 0x24
    317e:	b5 a1       	ldd	r27, Z+37	; 0x25
    3180:	28 1b       	sub	r18, r24
    3182:	39 0b       	sbc	r19, r25
    3184:	4a 0b       	sbc	r20, r26
    3186:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastCoolTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    3188:	b9 01       	movw	r22, r18
    318a:	ca 01       	movw	r24, r20
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	08 95       	ret

00003192 <_ZN11TempControl11detectPeaksEv>:
float TempControl::_GetSettingForNegPeakEstimate()
{
	return _SettingForNegPeakEstimate;
}

void TempControl::detectPeaks(void){
    3192:	4f 92       	push	r4
    3194:	5f 92       	push	r5
    3196:	6f 92       	push	r6
    3198:	7f 92       	push	r7
    319a:	8f 92       	push	r8
    319c:	9f 92       	push	r9
    319e:	af 92       	push	r10
    31a0:	bf 92       	push	r11
    31a2:	cf 92       	push	r12
    31a4:	df 92       	push	r13
    31a6:	ef 92       	push	r14
    31a8:	ff 92       	push	r15
    31aa:	0f 93       	push	r16
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	8c 01       	movw	r16, r24
//	Serial.print(_fridgeTemp->TempFiltSlow[2]);
//	Serial.print("\tfridge->TempFiltSlow[3]");
//	Serial.println(_fridgeTemp->TempFiltSlow[3]);

	//detect peaks in fridge temperature to tune overshoot estimators
	if(_doPosPeakDetect &&_state!=HEATING){
    31b4:	dc 01       	movw	r26, r24
    31b6:	d3 96       	adiw	r26, 0x33	; 51
    31b8:	8c 91       	ld	r24, X
    31ba:	d3 97       	sbiw	r26, 0x33	; 51
    31bc:	88 23       	and	r24, r24
    31be:	09 f4       	brne	.+2      	; 0x31c2 <_ZN11TempControl11detectPeaksEv+0x30>
    31c0:	33 c1       	rjmp	.+614    	; 0x3428 <_ZN11TempControl11detectPeaksEv+0x296>
    31c2:	52 96       	adiw	r26, 0x12	; 18
    31c4:	8d 91       	ld	r24, X+
    31c6:	9c 91       	ld	r25, X
    31c8:	53 97       	sbiw	r26, 0x13	; 19
    31ca:	02 97       	sbiw	r24, 0x02	; 2
    31cc:	09 f4       	brne	.+2      	; 0x31d0 <_ZN11TempControl11detectPeaksEv+0x3e>
    31ce:	2c c1       	rjmp	.+600    	; 0x3428 <_ZN11TempControl11detectPeaksEv+0x296>
		if(_fridgeTemp->TempFiltSlow[3] <=_fridgeTemp->TempFiltSlow[2] &&_fridgeTemp->TempFiltSlow[2] >=_fridgeTemp->TempFiltSlow[1]){ // maximum
    31d0:	14 96       	adiw	r26, 0x04	; 4
    31d2:	cd 91       	ld	r28, X+
    31d4:	dc 91       	ld	r29, X
    31d6:	15 97       	sbiw	r26, 0x05	; 5
    31d8:	ce 5b       	subi	r28, 0xBE	; 190
    31da:	df 4f       	sbci	r29, 0xFF	; 255
    31dc:	c8 80       	ld	r12, Y
    31de:	d9 80       	ldd	r13, Y+1	; 0x01
    31e0:	ea 80       	ldd	r14, Y+2	; 0x02
    31e2:	fb 80       	ldd	r15, Y+3	; 0x03
    31e4:	c2 54       	subi	r28, 0x42	; 66
    31e6:	d0 40       	sbci	r29, 0x00	; 0
    31e8:	fe 01       	movw	r30, r28
    31ea:	ea 5b       	subi	r30, 0xBA	; 186
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	a7 01       	movw	r20, r14
    31f8:	96 01       	movw	r18, r12
    31fa:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	0c f4       	brge	.+2      	; 0x3204 <_ZN11TempControl11detectPeaksEv+0x72>
    3202:	94 c0       	rjmp	.+296    	; 0x332c <_ZN11TempControl11detectPeaksEv+0x19a>
    3204:	ee 96       	adiw	r28, 0x3e	; 62
    3206:	c7 01       	movw	r24, r14
    3208:	b6 01       	movw	r22, r12
    320a:	28 81       	ld	r18, Y
    320c:	39 81       	ldd	r19, Y+1	; 0x01
    320e:	4a 81       	ldd	r20, Y+2	; 0x02
    3210:	5b 81       	ldd	r21, Y+3	; 0x03
    3212:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3216:	88 23       	and	r24, r24
    3218:	0c f4       	brge	.+2      	; 0x321c <_ZN11TempControl11detectPeaksEv+0x8a>
    321a:	88 c0       	rjmp	.+272    	; 0x332c <_ZN11TempControl11detectPeaksEv+0x19a>
			_posPeak = _fridgeTemp->TempFiltSlow[2];
    321c:	f8 01       	movw	r30, r16
    321e:	c4 aa       	std	Z+52, r12	; 0x34
    3220:	d5 aa       	std	Z+53, r13	; 0x35
    3222:	e6 aa       	std	Z+54, r14	; 0x36
    3224:	f7 aa       	std	Z+55, r15	; 0x37
			if(_posPeak > _GetSettingForPosPeakEstimate() + HEATING_TARGET_UPPER){
    3226:	e0 5c       	subi	r30, 0xC0	; 192
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	50 e4       	ldi	r21, 0x40	; 64
    323a:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    323e:	4b 01       	movw	r8, r22
    3240:	5c 01       	movw	r10, r24
    3242:	c7 01       	movw	r24, r14
    3244:	b6 01       	movw	r22, r12
    3246:	a5 01       	movw	r20, r10
    3248:	94 01       	movw	r18, r8
    324a:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    324e:	18 16       	cp	r1, r24
    3250:	0c f0       	brlt	.+2      	; 0x3254 <_ZN11TempControl11detectPeaksEv+0xc2>
    3252:	42 c0       	rjmp	.+132    	; 0x32d8 <_ZN11TempControl11detectPeaksEv+0x146>
				//should not happen, estimated overshoot was too low, so adjust overshoot estimator
				_heatOvershootEstimator=_heatOvershootEstimator*(1.2+min((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_UPPER))*.03,0.3));
    3254:	0c 5b       	subi	r16, 0xBC	; 188
    3256:	1f 4f       	sbci	r17, 0xFF	; 255
    3258:	d8 01       	movw	r26, r16
    325a:	4d 90       	ld	r4, X+
    325c:	5d 90       	ld	r5, X+
    325e:	6d 90       	ld	r6, X+
    3260:	7c 90       	ld	r7, X
    3262:	04 54       	subi	r16, 0x44	; 68
    3264:	10 40       	sbci	r17, 0x00	; 0
    3266:	c7 01       	movw	r24, r14
    3268:	b6 01       	movw	r22, r12
    326a:	a5 01       	movw	r20, r10
    326c:	94 01       	movw	r18, r8
    326e:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    3272:	2f e8       	ldi	r18, 0x8F	; 143
    3274:	32 ec       	ldi	r19, 0xC2	; 194
    3276:	45 ef       	ldi	r20, 0xF5	; 245
    3278:	5c e3       	ldi	r21, 0x3C	; 60
    327a:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    327e:	6b 01       	movw	r12, r22
    3280:	7c 01       	movw	r14, r24
    3282:	2a e9       	ldi	r18, 0x9A	; 154
    3284:	39 e9       	ldi	r19, 0x99	; 153
    3286:	49 e9       	ldi	r20, 0x99	; 153
    3288:	5e e3       	ldi	r21, 0x3E	; 62
    328a:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    328e:	87 fd       	sbrc	r24, 7
    3290:	05 c0       	rjmp	.+10     	; 0x329c <_ZN11TempControl11detectPeaksEv+0x10a>
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 ec       	ldi	r20, 0xC0	; 192
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0a c0       	rjmp	.+20     	; 0x32b0 <_ZN11TempControl11detectPeaksEv+0x11e>
    329c:	c7 01       	movw	r24, r14
    329e:	b6 01       	movw	r22, r12
    32a0:	2a e9       	ldi	r18, 0x9A	; 154
    32a2:	39 e9       	ldi	r19, 0x99	; 153
    32a4:	49 e9       	ldi	r20, 0x99	; 153
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    32ac:	9b 01       	movw	r18, r22
    32ae:	ac 01       	movw	r20, r24
    32b0:	0c 5b       	subi	r16, 0xBC	; 188
    32b2:	1f 4f       	sbci	r17, 0xFF	; 255
    32b4:	c3 01       	movw	r24, r6
    32b6:	b2 01       	movw	r22, r4
    32b8:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    32bc:	f8 01       	movw	r30, r16
    32be:	60 83       	st	Z, r22
    32c0:	71 83       	std	Z+1, r23	; 0x01
    32c2:	82 83       	std	Z+2, r24	; 0x02
    32c4:	93 83       	std	Z+3, r25	; 0x03
    32c6:	04 54       	subi	r16, 0x44	; 68
    32c8:	10 40       	sbci	r17, 0x00	; 0
				_settings->Save();
    32ca:	d8 01       	movw	r26, r16
    32cc:	1a 96       	adiw	r26, 0x0a	; 10
    32ce:	8d 91       	ld	r24, X+
    32d0:	9c 91       	ld	r25, X
    32d2:	1b 97       	sbiw	r26, 0x0b	; 11
    32d4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN8Settings4SaveEv>
			}
			if(_posPeak < _GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER){
    32d8:	f8 01       	movw	r30, r16
    32da:	84 a8       	ldd	r8, Z+52	; 0x34
    32dc:	95 a8       	ldd	r9, Z+53	; 0x35
    32de:	a6 a8       	ldd	r10, Z+54	; 0x36
    32e0:	b7 a8       	ldd	r11, Z+55	; 0x37
    32e2:	e0 5c       	subi	r30, 0xC0	; 192
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	60 81       	ld	r22, Z
    32e8:	71 81       	ldd	r23, Z+1	; 0x01
    32ea:	82 81       	ldd	r24, Z+2	; 0x02
    32ec:	93 81       	ldd	r25, Z+3	; 0x03
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e8       	ldi	r20, 0x80	; 128
    32f4:	5f e3       	ldi	r21, 0x3F	; 63
    32f6:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    32fa:	6b 01       	movw	r12, r22
    32fc:	7c 01       	movw	r14, r24
    32fe:	c5 01       	movw	r24, r10
    3300:	b4 01       	movw	r22, r8
    3302:	a7 01       	movw	r20, r14
    3304:	96 01       	movw	r18, r12
    3306:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    330a:	88 23       	and	r24, r24
    330c:	0c f0       	brlt	.+2      	; 0x3310 <_ZN11TempControl11detectPeaksEv+0x17e>
    330e:	8a c0       	rjmp	.+276    	; 0x3424 <_ZN11TempControl11detectPeaksEv+0x292>
				//should not happen, estimated overshoot was too high, so adjust overshoot estimator
				_heatOvershootEstimator=_heatOvershootEstimator*(0.8+max((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER))*.03,-0.3));
    3310:	0c 5b       	subi	r16, 0xBC	; 188
    3312:	1f 4f       	sbci	r17, 0xFF	; 255
    3314:	d8 01       	movw	r26, r16
    3316:	4d 90       	ld	r4, X+
    3318:	5d 90       	ld	r5, X+
    331a:	6d 90       	ld	r6, X+
    331c:	7c 90       	ld	r7, X
    331e:	04 54       	subi	r16, 0x44	; 68
    3320:	10 40       	sbci	r17, 0x00	; 0
    3322:	c5 01       	movw	r24, r10
    3324:	b4 01       	movw	r22, r8
    3326:	a7 01       	movw	r20, r14
    3328:	96 01       	movw	r18, r12
    332a:	47 c0       	rjmp	.+142    	; 0x33ba <_ZN11TempControl11detectPeaksEv+0x228>
				_settings->Save();
			}
			_doPosPeakDetect = false;
			// serialFridgeMessage(POSPEAK);
		}
		else if(timeSinceHeating() > 580000UL && timeSinceCooling() > 900000UL &&_fridgeTemp->TempFiltSlow[3] < _GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER){
    332c:	c8 01       	movw	r24, r16
    332e:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN11TempControl16timeSinceHeatingEv>
    3332:	61 5a       	subi	r22, 0xA1	; 161
    3334:	79 4d       	sbci	r23, 0xD9	; 217
    3336:	88 40       	sbci	r24, 0x08	; 8
    3338:	90 40       	sbci	r25, 0x00	; 0
    333a:	08 f4       	brcc	.+2      	; 0x333e <_ZN11TempControl11detectPeaksEv+0x1ac>
    333c:	75 c0       	rjmp	.+234    	; 0x3428 <_ZN11TempControl11detectPeaksEv+0x296>
    333e:	c8 01       	movw	r24, r16
    3340:	0e 94 b4 18 	call	0x3168	; 0x3168 <_ZN11TempControl16timeSinceCoolingEv>
    3344:	61 5a       	subi	r22, 0xA1	; 161
    3346:	7b 4b       	sbci	r23, 0xBB	; 187
    3348:	8d 40       	sbci	r24, 0x0D	; 13
    334a:	90 40       	sbci	r25, 0x00	; 0
    334c:	08 f4       	brcc	.+2      	; 0x3350 <_ZN11TempControl11detectPeaksEv+0x1be>
    334e:	6c c0       	rjmp	.+216    	; 0x3428 <_ZN11TempControl11detectPeaksEv+0x296>
    3350:	d8 01       	movw	r26, r16
    3352:	14 96       	adiw	r26, 0x04	; 4
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	15 97       	sbiw	r26, 0x05	; 5
    335a:	ea 5b       	subi	r30, 0xBA	; 186
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	c0 80       	ld	r12, Z
    3360:	d1 80       	ldd	r13, Z+1	; 0x01
    3362:	e2 80       	ldd	r14, Z+2	; 0x02
    3364:	f3 80       	ldd	r15, Z+3	; 0x03
    3366:	f8 01       	movw	r30, r16
    3368:	e0 5c       	subi	r30, 0xC0	; 192
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    3380:	4b 01       	movw	r8, r22
    3382:	5c 01       	movw	r10, r24
    3384:	c7 01       	movw	r24, r14
    3386:	b6 01       	movw	r22, r12
    3388:	a5 01       	movw	r20, r10
    338a:	94 01       	movw	r18, r8
    338c:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3390:	88 23       	and	r24, r24
    3392:	0c f0       	brlt	.+2      	; 0x3396 <_ZN11TempControl11detectPeaksEv+0x204>
    3394:	49 c0       	rjmp	.+146    	; 0x3428 <_ZN11TempControl11detectPeaksEv+0x296>
			//there was no peak, but the estimator is too low. This is the heat, then drift up situation.
			_posPeak = _fridgeTemp->TempFiltSlow[3];
    3396:	f8 01       	movw	r30, r16
    3398:	c4 aa       	std	Z+52, r12	; 0x34
    339a:	d5 aa       	std	Z+53, r13	; 0x35
    339c:	e6 aa       	std	Z+54, r14	; 0x36
    339e:	f7 aa       	std	Z+55, r15	; 0x37
			_heatOvershootEstimator=_heatOvershootEstimator*(0.8+max((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER))*.03,-0.3));
    33a0:	0c 5b       	subi	r16, 0xBC	; 188
    33a2:	1f 4f       	sbci	r17, 0xFF	; 255
    33a4:	d8 01       	movw	r26, r16
    33a6:	4d 90       	ld	r4, X+
    33a8:	5d 90       	ld	r5, X+
    33aa:	6d 90       	ld	r6, X+
    33ac:	7c 90       	ld	r7, X
    33ae:	04 54       	subi	r16, 0x44	; 68
    33b0:	10 40       	sbci	r17, 0x00	; 0
    33b2:	c7 01       	movw	r24, r14
    33b4:	b6 01       	movw	r22, r12
    33b6:	a5 01       	movw	r20, r10
    33b8:	94 01       	movw	r18, r8
    33ba:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    33be:	2f e8       	ldi	r18, 0x8F	; 143
    33c0:	32 ec       	ldi	r19, 0xC2	; 194
    33c2:	45 ef       	ldi	r20, 0xF5	; 245
    33c4:	5c e3       	ldi	r21, 0x3C	; 60
    33c6:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    33ca:	6b 01       	movw	r12, r22
    33cc:	7c 01       	movw	r14, r24
    33ce:	2a e9       	ldi	r18, 0x9A	; 154
    33d0:	39 e9       	ldi	r19, 0x99	; 153
    33d2:	49 e9       	ldi	r20, 0x99	; 153
    33d4:	5e eb       	ldi	r21, 0xBE	; 190
    33d6:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    33da:	18 16       	cp	r1, r24
    33dc:	2c f0       	brlt	.+10     	; 0x33e8 <_ZN11TempControl11detectPeaksEv+0x256>
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0a c0       	rjmp	.+20     	; 0x33fc <_ZN11TempControl11detectPeaksEv+0x26a>
    33e8:	c7 01       	movw	r24, r14
    33ea:	b6 01       	movw	r22, r12
    33ec:	2d ec       	ldi	r18, 0xCD	; 205
    33ee:	3c ec       	ldi	r19, 0xCC	; 204
    33f0:	4c e4       	ldi	r20, 0x4C	; 76
    33f2:	5f e3       	ldi	r21, 0x3F	; 63
    33f4:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    33f8:	9b 01       	movw	r18, r22
    33fa:	ac 01       	movw	r20, r24
    33fc:	0c 5b       	subi	r16, 0xBC	; 188
    33fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3400:	c3 01       	movw	r24, r6
    3402:	b2 01       	movw	r22, r4
    3404:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3408:	f8 01       	movw	r30, r16
    340a:	60 83       	st	Z, r22
    340c:	71 83       	std	Z+1, r23	; 0x01
    340e:	82 83       	std	Z+2, r24	; 0x02
    3410:	93 83       	std	Z+3, r25	; 0x03
    3412:	04 54       	subi	r16, 0x44	; 68
    3414:	10 40       	sbci	r17, 0x00	; 0
			_settings->Save();
    3416:	d8 01       	movw	r26, r16
    3418:	1a 96       	adiw	r26, 0x0a	; 10
    341a:	8d 91       	ld	r24, X+
    341c:	9c 91       	ld	r25, X
    341e:	1b 97       	sbiw	r26, 0x0b	; 11
    3420:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN8Settings4SaveEv>
			_doPosPeakDetect = false;
    3424:	f8 01       	movw	r30, r16
    3426:	13 aa       	std	Z+51, r1	; 0x33
			// serialFridgeMessage(POSDRIFT);
		}
	}
	if(_doNegPeakDetect &&_state!=COOLING){
    3428:	d8 01       	movw	r26, r16
    342a:	d2 96       	adiw	r26, 0x32	; 50
    342c:	8c 91       	ld	r24, X
    342e:	d2 97       	sbiw	r26, 0x32	; 50
    3430:	88 23       	and	r24, r24
    3432:	09 f4       	brne	.+2      	; 0x3436 <_ZN11TempControl11detectPeaksEv+0x2a4>
    3434:	21 c1       	rjmp	.+578    	; 0x3678 <_ZN11TempControl11detectPeaksEv+0x4e6>
    3436:	52 96       	adiw	r26, 0x12	; 18
    3438:	8d 91       	ld	r24, X+
    343a:	9c 91       	ld	r25, X
    343c:	53 97       	sbiw	r26, 0x13	; 19
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	09 f4       	brne	.+2      	; 0x3444 <_ZN11TempControl11detectPeaksEv+0x2b2>
    3442:	1a c1       	rjmp	.+564    	; 0x3678 <_ZN11TempControl11detectPeaksEv+0x4e6>
		if(_fridgeTemp->TempFiltSlow[3] >= _fridgeTemp->TempFiltSlow[2] &&_fridgeTemp->TempFiltSlow[2] <=_fridgeTemp->TempFiltSlow[1]){ // minimum
    3444:	14 96       	adiw	r26, 0x04	; 4
    3446:	cd 91       	ld	r28, X+
    3448:	dc 91       	ld	r29, X
    344a:	15 97       	sbiw	r26, 0x05	; 5
    344c:	ce 5b       	subi	r28, 0xBE	; 190
    344e:	df 4f       	sbci	r29, 0xFF	; 255
    3450:	c8 80       	ld	r12, Y
    3452:	d9 80       	ldd	r13, Y+1	; 0x01
    3454:	ea 80       	ldd	r14, Y+2	; 0x02
    3456:	fb 80       	ldd	r15, Y+3	; 0x03
    3458:	c2 54       	subi	r28, 0x42	; 66
    345a:	d0 40       	sbci	r29, 0x00	; 0
    345c:	fe 01       	movw	r30, r28
    345e:	ea 5b       	subi	r30, 0xBA	; 186
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	60 81       	ld	r22, Z
    3464:	71 81       	ldd	r23, Z+1	; 0x01
    3466:	82 81       	ldd	r24, Z+2	; 0x02
    3468:	93 81       	ldd	r25, Z+3	; 0x03
    346a:	a7 01       	movw	r20, r14
    346c:	96 01       	movw	r18, r12
    346e:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3472:	88 23       	and	r24, r24
    3474:	0c f4       	brge	.+2      	; 0x3478 <_ZN11TempControl11detectPeaksEv+0x2e6>
    3476:	83 c0       	rjmp	.+262    	; 0x357e <_ZN11TempControl11detectPeaksEv+0x3ec>
    3478:	ee 96       	adiw	r28, 0x3e	; 62
    347a:	c7 01       	movw	r24, r14
    347c:	b6 01       	movw	r22, r12
    347e:	28 81       	ld	r18, Y
    3480:	39 81       	ldd	r19, Y+1	; 0x01
    3482:	4a 81       	ldd	r20, Y+2	; 0x02
    3484:	5b 81       	ldd	r21, Y+3	; 0x03
    3486:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    348a:	18 16       	cp	r1, r24
    348c:	0c f4       	brge	.+2      	; 0x3490 <_ZN11TempControl11detectPeaksEv+0x2fe>
    348e:	77 c0       	rjmp	.+238    	; 0x357e <_ZN11TempControl11detectPeaksEv+0x3ec>
			_negPeak = _fridgeTemp->TempFiltSlow[2];
    3490:	f8 01       	movw	r30, r16
    3492:	c0 ae       	std	Z+56, r12	; 0x38
    3494:	d1 ae       	std	Z+57, r13	; 0x39
    3496:	e2 ae       	std	Z+58, r14	; 0x3a
    3498:	f3 ae       	std	Z+59, r15	; 0x3b
			if(_negPeak < _GetSettingForNegPeakEstimate() + COOLING_TARGET_LOWER){
    349a:	64 ad       	ldd	r22, Z+60	; 0x3c
    349c:	75 ad       	ldd	r23, Z+61	; 0x3d
    349e:	86 ad       	ldd	r24, Z+62	; 0x3e
    34a0:	97 ad       	ldd	r25, Z+63	; 0x3f
    34a2:	20 e0       	ldi	r18, 0x00	; 0
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	40 e0       	ldi	r20, 0x00	; 0
    34a8:	50 e4       	ldi	r21, 0x40	; 64
    34aa:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    34ae:	4b 01       	movw	r8, r22
    34b0:	5c 01       	movw	r10, r24
    34b2:	c7 01       	movw	r24, r14
    34b4:	b6 01       	movw	r22, r12
    34b6:	a5 01       	movw	r20, r10
    34b8:	94 01       	movw	r18, r8
    34ba:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    34be:	88 23       	and	r24, r24
    34c0:	0c f0       	brlt	.+2      	; 0x34c4 <_ZN11TempControl11detectPeaksEv+0x332>
    34c2:	42 c0       	rjmp	.+132    	; 0x3548 <_ZN11TempControl11detectPeaksEv+0x3b6>
				//should not happen, estimated overshoot was too low, so adjust overshoot estimator
				_coolOvershootEstimator=_coolOvershootEstimator*(1.2+min(((_GetSettingForNegPeakEstimate() + COOLING_TARGET_LOWER)-_negPeak)*.03,0.3));
    34c4:	08 5b       	subi	r16, 0xB8	; 184
    34c6:	1f 4f       	sbci	r17, 0xFF	; 255
    34c8:	d8 01       	movw	r26, r16
    34ca:	4d 90       	ld	r4, X+
    34cc:	5d 90       	ld	r5, X+
    34ce:	6d 90       	ld	r6, X+
    34d0:	7c 90       	ld	r7, X
    34d2:	08 54       	subi	r16, 0x48	; 72
    34d4:	10 40       	sbci	r17, 0x00	; 0
    34d6:	c5 01       	movw	r24, r10
    34d8:	b4 01       	movw	r22, r8
    34da:	a7 01       	movw	r20, r14
    34dc:	96 01       	movw	r18, r12
    34de:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    34e2:	2f e8       	ldi	r18, 0x8F	; 143
    34e4:	32 ec       	ldi	r19, 0xC2	; 194
    34e6:	45 ef       	ldi	r20, 0xF5	; 245
    34e8:	5c e3       	ldi	r21, 0x3C	; 60
    34ea:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    34ee:	6b 01       	movw	r12, r22
    34f0:	7c 01       	movw	r14, r24
    34f2:	2a e9       	ldi	r18, 0x9A	; 154
    34f4:	39 e9       	ldi	r19, 0x99	; 153
    34f6:	49 e9       	ldi	r20, 0x99	; 153
    34f8:	5e e3       	ldi	r21, 0x3E	; 62
    34fa:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    34fe:	87 fd       	sbrc	r24, 7
    3500:	05 c0       	rjmp	.+10     	; 0x350c <_ZN11TempControl11detectPeaksEv+0x37a>
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 ec       	ldi	r20, 0xC0	; 192
    3508:	5f e3       	ldi	r21, 0x3F	; 63
    350a:	0a c0       	rjmp	.+20     	; 0x3520 <_ZN11TempControl11detectPeaksEv+0x38e>
    350c:	c7 01       	movw	r24, r14
    350e:	b6 01       	movw	r22, r12
    3510:	2a e9       	ldi	r18, 0x9A	; 154
    3512:	39 e9       	ldi	r19, 0x99	; 153
    3514:	49 e9       	ldi	r20, 0x99	; 153
    3516:	5f e3       	ldi	r21, 0x3F	; 63
    3518:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    351c:	9b 01       	movw	r18, r22
    351e:	ac 01       	movw	r20, r24
    3520:	08 5b       	subi	r16, 0xB8	; 184
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	c3 01       	movw	r24, r6
    3526:	b2 01       	movw	r22, r4
    3528:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    352c:	f8 01       	movw	r30, r16
    352e:	60 83       	st	Z, r22
    3530:	71 83       	std	Z+1, r23	; 0x01
    3532:	82 83       	std	Z+2, r24	; 0x02
    3534:	93 83       	std	Z+3, r25	; 0x03
    3536:	08 54       	subi	r16, 0x48	; 72
    3538:	10 40       	sbci	r17, 0x00	; 0
				_settings->Save();
    353a:	d8 01       	movw	r26, r16
    353c:	1a 96       	adiw	r26, 0x0a	; 10
    353e:	8d 91       	ld	r24, X+
    3540:	9c 91       	ld	r25, X
    3542:	1b 97       	sbiw	r26, 0x0b	; 11
    3544:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN8Settings4SaveEv>
			}
			if(_negPeak > _GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER){
    3548:	f8 01       	movw	r30, r16
    354a:	80 ac       	ldd	r8, Z+56	; 0x38
    354c:	91 ac       	ldd	r9, Z+57	; 0x39
    354e:	a2 ac       	ldd	r10, Z+58	; 0x3a
    3550:	b3 ac       	ldd	r11, Z+59	; 0x3b
    3552:	64 ad       	ldd	r22, Z+60	; 0x3c
    3554:	75 ad       	ldd	r23, Z+61	; 0x3d
    3556:	86 ad       	ldd	r24, Z+62	; 0x3e
    3558:	97 ad       	ldd	r25, Z+63	; 0x3f
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e8       	ldi	r20, 0x80	; 128
    3560:	5f e3       	ldi	r21, 0x3F	; 63
    3562:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3566:	6b 01       	movw	r12, r22
    3568:	7c 01       	movw	r14, r24
    356a:	c5 01       	movw	r24, r10
    356c:	b4 01       	movw	r22, r8
    356e:	a7 01       	movw	r20, r14
    3570:	96 01       	movw	r18, r12
    3572:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3576:	18 16       	cp	r1, r24
    3578:	0c f4       	brge	.+2      	; 0x357c <_ZN11TempControl11detectPeaksEv+0x3ea>
    357a:	3a c0       	rjmp	.+116    	; 0x35f0 <_ZN11TempControl11detectPeaksEv+0x45e>
    357c:	7b c0       	rjmp	.+246    	; 0x3674 <_ZN11TempControl11detectPeaksEv+0x4e2>
				_settings->Save();
			}
			_doNegPeakDetect = false;
			// serialFridgeMessage(NEGPEAK);
		}
		else if(timeSinceCooling() > 1780000UL && timeSinceHeating() > 1800000UL &&_fridgeTemp->TempFiltSlow[3] > _GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER){
    357e:	c8 01       	movw	r24, r16
    3580:	0e 94 b4 18 	call	0x3168	; 0x3168 <_ZN11TempControl16timeSinceCoolingEv>
    3584:	61 52       	subi	r22, 0x21	; 33
    3586:	79 42       	sbci	r23, 0x29	; 41
    3588:	8b 41       	sbci	r24, 0x1B	; 27
    358a:	90 40       	sbci	r25, 0x00	; 0
    358c:	08 f4       	brcc	.+2      	; 0x3590 <_ZN11TempControl11detectPeaksEv+0x3fe>
    358e:	74 c0       	rjmp	.+232    	; 0x3678 <_ZN11TempControl11detectPeaksEv+0x4e6>
    3590:	c8 01       	movw	r24, r16
    3592:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN11TempControl16timeSinceHeatingEv>
    3596:	61 54       	subi	r22, 0x41	; 65
    3598:	77 47       	sbci	r23, 0x77	; 119
    359a:	8b 41       	sbci	r24, 0x1B	; 27
    359c:	90 40       	sbci	r25, 0x00	; 0
    359e:	08 f4       	brcc	.+2      	; 0x35a2 <_ZN11TempControl11detectPeaksEv+0x410>
    35a0:	6b c0       	rjmp	.+214    	; 0x3678 <_ZN11TempControl11detectPeaksEv+0x4e6>
    35a2:	d8 01       	movw	r26, r16
    35a4:	14 96       	adiw	r26, 0x04	; 4
    35a6:	ed 91       	ld	r30, X+
    35a8:	fc 91       	ld	r31, X
    35aa:	15 97       	sbiw	r26, 0x05	; 5
    35ac:	ea 5b       	subi	r30, 0xBA	; 186
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	c0 80       	ld	r12, Z
    35b2:	d1 80       	ldd	r13, Z+1	; 0x01
    35b4:	e2 80       	ldd	r14, Z+2	; 0x02
    35b6:	f3 80       	ldd	r15, Z+3	; 0x03
    35b8:	dc 96       	adiw	r26, 0x3c	; 60
    35ba:	6d 91       	ld	r22, X+
    35bc:	7d 91       	ld	r23, X+
    35be:	8d 91       	ld	r24, X+
    35c0:	9c 91       	ld	r25, X
    35c2:	df 97       	sbiw	r26, 0x3f	; 63
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    35d0:	4b 01       	movw	r8, r22
    35d2:	5c 01       	movw	r10, r24
    35d4:	c7 01       	movw	r24, r14
    35d6:	b6 01       	movw	r22, r12
    35d8:	a5 01       	movw	r20, r10
    35da:	94 01       	movw	r18, r8
    35dc:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    35e0:	18 16       	cp	r1, r24
    35e2:	0c f0       	brlt	.+2      	; 0x35e6 <_ZN11TempControl11detectPeaksEv+0x454>
    35e4:	49 c0       	rjmp	.+146    	; 0x3678 <_ZN11TempControl11detectPeaksEv+0x4e6>
			//there was no peak, but the estimator is too low. This is the cool, then drift down situation.
			_negPeak = _fridgeTemp->TempFiltSlow[3];
    35e6:	f8 01       	movw	r30, r16
    35e8:	c0 ae       	std	Z+56, r12	; 0x38
    35ea:	d1 ae       	std	Z+57, r13	; 0x39
    35ec:	e2 ae       	std	Z+58, r14	; 0x3a
    35ee:	f3 ae       	std	Z+59, r15	; 0x3b
			_coolOvershootEstimator=_coolOvershootEstimator*(0.8+max((_negPeak-(_GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER))*.03,-0.3));
    35f0:	08 5b       	subi	r16, 0xB8	; 184
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	d8 01       	movw	r26, r16
    35f6:	4d 90       	ld	r4, X+
    35f8:	5d 90       	ld	r5, X+
    35fa:	6d 90       	ld	r6, X+
    35fc:	7c 90       	ld	r7, X
    35fe:	08 54       	subi	r16, 0x48	; 72
    3600:	10 40       	sbci	r17, 0x00	; 0
    3602:	c7 01       	movw	r24, r14
    3604:	b6 01       	movw	r22, r12
    3606:	a5 01       	movw	r20, r10
    3608:	94 01       	movw	r18, r8
    360a:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    360e:	2f e8       	ldi	r18, 0x8F	; 143
    3610:	32 ec       	ldi	r19, 0xC2	; 194
    3612:	45 ef       	ldi	r20, 0xF5	; 245
    3614:	5c e3       	ldi	r21, 0x3C	; 60
    3616:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    361a:	6b 01       	movw	r12, r22
    361c:	7c 01       	movw	r14, r24
    361e:	2a e9       	ldi	r18, 0x9A	; 154
    3620:	39 e9       	ldi	r19, 0x99	; 153
    3622:	49 e9       	ldi	r20, 0x99	; 153
    3624:	5e eb       	ldi	r21, 0xBE	; 190
    3626:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    362a:	18 16       	cp	r1, r24
    362c:	2c f0       	brlt	.+10     	; 0x3638 <_ZN11TempControl11detectPeaksEv+0x4a6>
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0a c0       	rjmp	.+20     	; 0x364c <_ZN11TempControl11detectPeaksEv+0x4ba>
    3638:	c7 01       	movw	r24, r14
    363a:	b6 01       	movw	r22, r12
    363c:	2d ec       	ldi	r18, 0xCD	; 205
    363e:	3c ec       	ldi	r19, 0xCC	; 204
    3640:	4c e4       	ldi	r20, 0x4C	; 76
    3642:	5f e3       	ldi	r21, 0x3F	; 63
    3644:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3648:	9b 01       	movw	r18, r22
    364a:	ac 01       	movw	r20, r24
    364c:	08 5b       	subi	r16, 0xB8	; 184
    364e:	1f 4f       	sbci	r17, 0xFF	; 255
    3650:	c3 01       	movw	r24, r6
    3652:	b2 01       	movw	r22, r4
    3654:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3658:	f8 01       	movw	r30, r16
    365a:	60 83       	st	Z, r22
    365c:	71 83       	std	Z+1, r23	; 0x01
    365e:	82 83       	std	Z+2, r24	; 0x02
    3660:	93 83       	std	Z+3, r25	; 0x03
    3662:	08 54       	subi	r16, 0x48	; 72
    3664:	10 40       	sbci	r17, 0x00	; 0
			_settings->Save();
    3666:	d8 01       	movw	r26, r16
    3668:	1a 96       	adiw	r26, 0x0a	; 10
    366a:	8d 91       	ld	r24, X+
    366c:	9c 91       	ld	r25, X
    366e:	1b 97       	sbiw	r26, 0x0b	; 11
    3670:	0e 94 e5 16 	call	0x2dca	; 0x2dca <_ZN8Settings4SaveEv>
			_doNegPeakDetect = false;
    3674:	f8 01       	movw	r30, r16
    3676:	12 aa       	std	Z+50, r1	; 0x32
//	Serial.print(_heatOvershootEstimator);
//	Serial.print("\t_coolOvershootEstimator:");
//	Serial.println(_coolOvershootEstimator);


}
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	df 90       	pop	r13
    3686:	cf 90       	pop	r12
    3688:	bf 90       	pop	r11
    368a:	af 90       	pop	r10
    368c:	9f 90       	pop	r9
    368e:	8f 90       	pop	r8
    3690:	7f 90       	pop	r7
    3692:	6f 90       	pop	r6
    3694:	5f 90       	pop	r5
    3696:	4f 90       	pop	r4
    3698:	08 95       	ret

0000369a <_ZN11TempControl19_SetPosPeakEstimateEv>:
void TempControl::_SetNegPeakEstimate()
{
  _SettingForNegPeakEstimate = _fridgeTemp->GetTempSetting();
}

void TempControl::_SetPosPeakEstimate()
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	8c 01       	movw	r16, r24
{
  _SettingForPosPeakEstimate = _fridgeTemp->GetTempSetting();
    36a0:	fc 01       	movw	r30, r24
    36a2:	84 81       	ldd	r24, Z+4	; 0x04
    36a4:	95 81       	ldd	r25, Z+5	; 0x05
    36a6:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    36aa:	00 5c       	subi	r16, 0xC0	; 192
    36ac:	1f 4f       	sbci	r17, 0xFF	; 255
    36ae:	f8 01       	movw	r30, r16
    36b0:	60 83       	st	Z, r22
    36b2:	71 83       	std	Z+1, r23	; 0x01
    36b4:	82 83       	std	Z+2, r24	; 0x02
    36b6:	93 83       	std	Z+3, r25	; 0x03
}
    36b8:	1f 91       	pop	r17
    36ba:	0f 91       	pop	r16
    36bc:	08 95       	ret

000036be <_ZN11TempControl19_SetNegPeakEstimateEv>:
		_Heater->SetState(false);
		break;
	}
}

void TempControl::_SetNegPeakEstimate()
    36be:	0f 93       	push	r16
    36c0:	1f 93       	push	r17
    36c2:	8c 01       	movw	r16, r24
{
  _SettingForNegPeakEstimate = _fridgeTemp->GetTempSetting();
    36c4:	fc 01       	movw	r30, r24
    36c6:	84 81       	ldd	r24, Z+4	; 0x04
    36c8:	95 81       	ldd	r25, Z+5	; 0x05
    36ca:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    36ce:	f8 01       	movw	r30, r16
    36d0:	64 af       	std	Z+60, r22	; 0x3c
    36d2:	75 af       	std	Z+61, r23	; 0x3d
    36d4:	86 af       	std	Z+62, r24	; 0x3e
    36d6:	97 af       	std	Z+63, r25	; 0x3f
}
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret

000036de <_ZN11TempControl21GetCurrentTempSettingEv>:
	else{
		// something is horribly wrong
	}
}

float TempControl::GetCurrentTempSetting()
    36de:	fc 01       	movw	r30, r24
{
	if(_mode == BEER_CONSTANT || _mode == BEER_PROFILE){
    36e0:	84 89       	ldd	r24, Z+20	; 0x14
    36e2:	95 89       	ldd	r25, Z+21	; 0x15
    36e4:	01 97       	sbiw	r24, 0x01	; 1
    36e6:	02 97       	sbiw	r24, 0x02	; 2
    36e8:	28 f4       	brcc	.+10     	; 0x36f4 <_ZN11TempControl21GetCurrentTempSettingEv+0x16>
		return _beerTemp->GetTempSetting()/10;
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <_ZN11TempControl21GetCurrentTempSettingEv+0x1e>
	}
	else {
		return _fridgeTemp->GetTempSetting()/10;
    36f4:	84 81       	ldd	r24, Z+4	; 0x04
    36f6:	95 81       	ldd	r25, Z+5	; 0x05
    36f8:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	40 e2       	ldi	r20, 0x20	; 32
    3702:	51 e4       	ldi	r21, 0x41	; 65
    3704:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3708:	e6 2f       	mov	r30, r22
	}
}
    370a:	2e 2f       	mov	r18, r30
    370c:	37 2f       	mov	r19, r23
    370e:	48 2f       	mov	r20, r24
    3710:	59 2f       	mov	r21, r25
    3712:	b9 01       	movw	r22, r18
    3714:	ca 01       	movw	r24, r20
    3716:	08 95       	ret

00003718 <_ZN11TempControl13UpdateOutputsEv>:
void TempControl::LcdPrintBeerTemp(OLEDFourBit *lcd)
{
	return _beerTemp->LcdPrintActualTemp(lcd);
}

void TempControl::UpdateOutputs(void){
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	ec 01       	movw	r28, r24
	switch (_state){
    371e:	8a 89       	ldd	r24, Y+18	; 0x12
    3720:	9b 89       	ldd	r25, Y+19	; 0x13
    3722:	82 30       	cpi	r24, 0x02	; 2
    3724:	91 05       	cpc	r25, r1
    3726:	49 f0       	breq	.+18     	; 0x373a <_ZN11TempControl13UpdateOutputsEv+0x22>
    3728:	83 30       	cpi	r24, 0x03	; 3
    372a:	91 05       	cpc	r25, r1
    372c:	7c f4       	brge	.+30     	; 0x374c <_ZN11TempControl13UpdateOutputsEv+0x34>
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	69 f4       	brne	.+26     	; 0x374c <_ZN11TempControl13UpdateOutputsEv+0x34>
	case STARTUP:
		_Compressor->SetState(false);
		_Heater->SetState(false);
		break;
	case COOLING:
		_Compressor->SetState(true);
    3732:	8e 81       	ldd	r24, Y+6	; 0x06
    3734:	9f 81       	ldd	r25, Y+7	; 0x07
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	0c c0       	rjmp	.+24     	; 0x3752 <_ZN11TempControl13UpdateOutputsEv+0x3a>
		_Heater->SetState(false);
		break;
	case HEATING:
		//  case DOOR_OPEN:
		_Compressor->SetState(false);
    373a:	8e 81       	ldd	r24, Y+6	; 0x06
    373c:	9f 81       	ldd	r25, Y+7	; 0x07
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_ZN5Relay8SetStateEb>
		_Heater->SetState(true);
    3744:	88 85       	ldd	r24, Y+8	; 0x08
    3746:	99 85       	ldd	r25, Y+9	; 0x09
    3748:	61 e0       	ldi	r22, 0x01	; 1
    374a:	08 c0       	rjmp	.+16     	; 0x375c <_ZN11TempControl13UpdateOutputsEv+0x44>
		break;
	default:
		_Compressor->SetState(false);
    374c:	8e 81       	ldd	r24, Y+6	; 0x06
    374e:	9f 81       	ldd	r25, Y+7	; 0x07
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_ZN5Relay8SetStateEb>
		_Heater->SetState(false);
    3756:	88 85       	ldd	r24, Y+8	; 0x08
    3758:	99 85       	ldd	r25, Y+9	; 0x09
    375a:	60 e0       	ldi	r22, 0x00	; 0
    375c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <_ZN5Relay8SetStateEb>
		break;
	}
}
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	08 95       	ret

00003766 <_ZN11TempControl11GetStateStrEv>:
		return "UNKNOWN";
	}
	return _currentModeString;
}

const char* TempControl::GetStateStr(){
    3766:	ef 92       	push	r14
    3768:	ff 92       	push	r15
    376a:	0f 93       	push	r16
    376c:	1f 93       	push	r17
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
    3772:	ec 01       	movw	r28, r24

	char *src;

	switch(_state){
    3774:	8a 89       	ldd	r24, Y+18	; 0x12
    3776:	9b 89       	ldd	r25, Y+19	; 0x13
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	91 05       	cpc	r25, r1
    377c:	c9 f0       	breq	.+50     	; 0x37b0 <_ZN11TempControl11GetStateStrEv+0x4a>
    377e:	83 30       	cpi	r24, 0x03	; 3
    3780:	91 05       	cpc	r25, r1
    3782:	2c f4       	brge	.+10     	; 0x378e <_ZN11TempControl11GetStateStrEv+0x28>
    3784:	00 97       	sbiw	r24, 0x00	; 0
    3786:	71 f0       	breq	.+28     	; 0x37a4 <_ZN11TempControl11GetStateStrEv+0x3e>
    3788:	01 97       	sbiw	r24, 0x01	; 1
    378a:	49 f4       	brne	.+18     	; 0x379e <_ZN11TempControl11GetStateStrEv+0x38>
    378c:	0e c0       	rjmp	.+28     	; 0x37aa <_ZN11TempControl11GetStateStrEv+0x44>
    378e:	84 30       	cpi	r24, 0x04	; 4
    3790:	91 05       	cpc	r25, r1
    3792:	a1 f0       	breq	.+40     	; 0x37bc <_ZN11TempControl11GetStateStrEv+0x56>
    3794:	84 30       	cpi	r24, 0x04	; 4
    3796:	91 05       	cpc	r25, r1
    3798:	74 f0       	brlt	.+28     	; 0x37b6 <_ZN11TempControl11GetStateStrEv+0x50>
    379a:	05 97       	sbiw	r24, 0x05	; 5
    379c:	91 f0       	breq	.+36     	; 0x37c2 <_ZN11TempControl11GetStateStrEv+0x5c>
    379e:	2c ec       	ldi	r18, 0xCC	; 204
    37a0:	31 e0       	ldi	r19, 0x01	; 1
    37a2:	29 c0       	rjmp	.+82     	; 0x37f6 <_ZN11TempControl11GetStateStrEv+0x90>
	case UNKNOWN:
		src = "UNKNOWN";
    37a4:	6c ec       	ldi	r22, 0xCC	; 204
    37a6:	71 e0       	ldi	r23, 0x01	; 1
    37a8:	0e c0       	rjmp	.+28     	; 0x37c6 <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case COOLING:
		src = "COOLING";
    37aa:	64 ed       	ldi	r22, 0xD4	; 212
    37ac:	71 e0       	ldi	r23, 0x01	; 1
    37ae:	0b c0       	rjmp	.+22     	; 0x37c6 <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case HEATING:
		src = "HEATING";
    37b0:	6c ed       	ldi	r22, 0xDC	; 220
    37b2:	71 e0       	ldi	r23, 0x01	; 1
    37b4:	08 c0       	rjmp	.+16     	; 0x37c6 <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case IDLE:
		src = "IDLE";
    37b6:	64 ee       	ldi	r22, 0xE4	; 228
    37b8:	71 e0       	ldi	r23, 0x01	; 1
    37ba:	05 c0       	rjmp	.+10     	; 0x37c6 <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case STARTUP:
		src = "STARTUP";
    37bc:	69 ee       	ldi	r22, 0xE9	; 233
    37be:	71 e0       	ldi	r23, 0x01	; 1
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case DOOR_OPEN:
		src = "DOOR_OPEN";
    37c2:	61 ef       	ldi	r22, 0xF1	; 241
    37c4:	71 e0       	ldi	r23, 0x01	; 1
		break;
	default:
		return "UNKNOWN";
	}
	int len = strlen(src);
    37c6:	db 01       	movw	r26, r22
    37c8:	0d 90       	ld	r0, X+
    37ca:	00 20       	and	r0, r0
    37cc:	e9 f7       	brne	.-6      	; 0x37c8 <_ZN11TempControl11GetStateStrEv+0x62>
    37ce:	8d 01       	movw	r16, r26
    37d0:	01 50       	subi	r16, 0x01	; 1
    37d2:	10 40       	sbci	r17, 0x00	; 0
    37d4:	06 1b       	sub	r16, r22
    37d6:	17 0b       	sbc	r17, r23
	strncpy(_currentStateString, src,len );
    37d8:	86 e5       	ldi	r24, 0x56	; 86
    37da:	e8 2e       	mov	r14, r24
    37dc:	f1 2c       	mov	r15, r1
    37de:	ec 0e       	add	r14, r28
    37e0:	fd 1e       	adc	r15, r29
    37e2:	c7 01       	movw	r24, r14
    37e4:	a8 01       	movw	r20, r16
    37e6:	0e 94 26 02 	call	0x44c	; 0x44c <strncpy>
	_currentStateString[len] = '\0';
    37ea:	c0 0f       	add	r28, r16
    37ec:	d1 1f       	adc	r29, r17
    37ee:	ca 5a       	subi	r28, 0xAA	; 170
    37f0:	df 4f       	sbci	r29, 0xFF	; 255
    37f2:	18 82       	st	Y, r1
    37f4:	97 01       	movw	r18, r14
	return _currentStateString;
}
    37f6:	c9 01       	movw	r24, r18
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
    3800:	ff 90       	pop	r15
    3802:	ef 90       	pop	r14
    3804:	08 95       	ret

00003806 <_ZN11TempControl10GetModeStrEv>:

TempControl::modes_t TempControl::GetMode(){
	return _mode;
}

const char* TempControl::GetModeStr(){
    3806:	cf 93       	push	r28
    3808:	df 93       	push	r29
    380a:	fc 01       	movw	r30, r24

	switch(_mode){
    380c:	84 89       	ldd	r24, Z+20	; 0x14
    380e:	95 89       	ldd	r25, Z+21	; 0x15
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	91 05       	cpc	r25, r1
    3814:	99 f0       	breq	.+38     	; 0x383c <_ZN11TempControl10GetModeStrEv+0x36>
    3816:	82 30       	cpi	r24, 0x02	; 2
    3818:	91 05       	cpc	r25, r1
    381a:	d9 f0       	breq	.+54     	; 0x3852 <_ZN11TempControl10GetModeStrEv+0x4c>
    381c:	89 2b       	or	r24, r25
    381e:	19 f0       	breq	.+6      	; 0x3826 <_ZN11TempControl10GetModeStrEv+0x20>
    3820:	2c ec       	ldi	r18, 0xCC	; 204
    3822:	31 e0       	ldi	r19, 0x01	; 1
    3824:	28 c0       	rjmp	.+80     	; 0x3876 <_ZN11TempControl10GetModeStrEv+0x70>
	case FRIDGE_CONSTANT:
		strncpy(_currentModeString, "FRDG_CONST", 10);
    3826:	ef 01       	movw	r28, r30
    3828:	c4 5b       	subi	r28, 0xB4	; 180
    382a:	df 4f       	sbci	r29, 0xFF	; 255
    382c:	ab ef       	ldi	r26, 0xFB	; 251
    382e:	b1 e0       	ldi	r27, 0x01	; 1
    3830:	8a e0       	ldi	r24, 0x0A	; 10
    3832:	0d 90       	ld	r0, X+
    3834:	09 92       	st	Y+, r0
    3836:	81 50       	subi	r24, 0x01	; 1
    3838:	e1 f7       	brne	.-8      	; 0x3832 <_ZN11TempControl10GetModeStrEv+0x2c>
    383a:	15 c0       	rjmp	.+42     	; 0x3866 <_ZN11TempControl10GetModeStrEv+0x60>
		_currentModeString[10] = '\0';
		break;
	case BEER_CONSTANT:
		strncpy(_currentModeString, "BEER_CONST", 10);
    383c:	ef 01       	movw	r28, r30
    383e:	c4 5b       	subi	r28, 0xB4	; 180
    3840:	df 4f       	sbci	r29, 0xFF	; 255
    3842:	a6 e0       	ldi	r26, 0x06	; 6
    3844:	b2 e0       	ldi	r27, 0x02	; 2
    3846:	8a e0       	ldi	r24, 0x0A	; 10
    3848:	0d 90       	ld	r0, X+
    384a:	09 92       	st	Y+, r0
    384c:	81 50       	subi	r24, 0x01	; 1
    384e:	e1 f7       	brne	.-8      	; 0x3848 <_ZN11TempControl10GetModeStrEv+0x42>
    3850:	0a c0       	rjmp	.+20     	; 0x3866 <_ZN11TempControl10GetModeStrEv+0x60>
		_currentModeString[10] = '\0';
		break;
	case BEER_PROFILE:
		strncpy(_currentModeString, "BEER_PROFL", 10);
    3852:	ef 01       	movw	r28, r30
    3854:	c4 5b       	subi	r28, 0xB4	; 180
    3856:	df 4f       	sbci	r29, 0xFF	; 255
    3858:	a1 e1       	ldi	r26, 0x11	; 17
    385a:	b2 e0       	ldi	r27, 0x02	; 2
    385c:	8a e0       	ldi	r24, 0x0A	; 10
    385e:	0d 90       	ld	r0, X+
    3860:	09 92       	st	Y+, r0
    3862:	81 50       	subi	r24, 0x01	; 1
    3864:	e1 f7       	brne	.-8      	; 0x385e <_ZN11TempControl10GetModeStrEv+0x58>
		_currentModeString[10] = '\0';
    3866:	ea 5a       	subi	r30, 0xAA	; 170
    3868:	ff 4f       	sbci	r31, 0xFF	; 255
    386a:	10 82       	st	Z, r1
    386c:	e6 55       	subi	r30, 0x56	; 86
    386e:	f0 40       	sbci	r31, 0x00	; 0
		break;
	default:
		return "UNKNOWN";
	}
	return _currentModeString;
    3870:	9f 01       	movw	r18, r30
    3872:	24 5b       	subi	r18, 0xB4	; 180
    3874:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3876:	c9 01       	movw	r24, r18
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	08 95       	ret

0000387e <_ZN11TempControl13GetFridgeTempEv>:
	return _beerTemp->GetTempActual()/10;
}

float TempControl::GetFridgeTemp()
{
	return _fridgeTemp->GetTempActual()/10;
    387e:	fc 01       	movw	r30, r24
    3880:	84 81       	ldd	r24, Z+4	; 0x04
    3882:	95 81       	ldd	r25, Z+5	; 0x05
    3884:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
}
    3894:	08 95       	ret

00003896 <_ZN11TempControl11GetBeerTempEv>:

}

float TempControl::GetBeerTemp()
{
	return _beerTemp->GetTempActual()/10;
    3896:	fc 01       	movw	r30, r24
    3898:	82 81       	ldd	r24, Z+2	; 0x02
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN18BeerTempController13GetTempActualEv>
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e2       	ldi	r20, 0x20	; 32
    38a6:	51 e4       	ldi	r21, 0x41	; 65
    38a8:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
}
    38ac:	08 95       	ret

000038ae <_ZN11TempControl11UpdateStateEv>:
	else if(_mode == FRIDGE_CONSTANT){
		_fridgeTemp->SetTempSetting(_fridgeTemp->GetTempSetting() + (float)adj);
	}
}

void TempControl::UpdateState()
    38ae:	2f 92       	push	r2
    38b0:	3f 92       	push	r3
    38b2:	4f 92       	push	r4
    38b4:	5f 92       	push	r5
    38b6:	6f 92       	push	r6
    38b8:	7f 92       	push	r7
    38ba:	8f 92       	push	r8
    38bc:	9f 92       	push	r9
    38be:	af 92       	push	r10
    38c0:	bf 92       	push	r11
    38c2:	cf 92       	push	r12
    38c4:	df 92       	push	r13
    38c6:	ef 92       	push	r14
    38c8:	ff 92       	push	r15
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	ec 01       	movw	r28, r24
	//			serialFridgeMessage(FRIDGE_DOOR_OPEN);
	//		}
	//		state=DOOR_OPEN;
	//		return;
	//	}
	switch(_state){
    38d4:	8a 89       	ldd	r24, Y+18	; 0x12
    38d6:	9b 89       	ldd	r25, Y+19	; 0x13
    38d8:	85 30       	cpi	r24, 0x05	; 5
    38da:	91 05       	cpc	r25, r1
    38dc:	5c f4       	brge	.+22     	; 0x38f4 <_ZN11TempControl11UpdateStateEv+0x46>
    38de:	83 30       	cpi	r24, 0x03	; 3
    38e0:	91 05       	cpc	r25, r1
    38e2:	64 f4       	brge	.+24     	; 0x38fc <_ZN11TempControl11UpdateStateEv+0x4e>
    38e4:	81 30       	cpi	r24, 0x01	; 1
    38e6:	91 05       	cpc	r25, r1
    38e8:	09 f4       	brne	.+2      	; 0x38ec <_ZN11TempControl11UpdateStateEv+0x3e>
    38ea:	ae c0       	rjmp	.+348    	; 0x3a48 <_ZN11TempControl11UpdateStateEv+0x19a>
    38ec:	02 97       	sbiw	r24, 0x02	; 2
    38ee:	09 f0       	breq	.+2      	; 0x38f2 <_ZN11TempControl11UpdateStateEv+0x44>
    38f0:	89 c1       	rjmp	.+786    	; 0x3c04 <_ZN11TempControl11UpdateStateEv+0x356>
    38f2:	1a c1       	rjmp	.+564    	; 0x3b28 <_ZN11TempControl11UpdateStateEv+0x27a>
    38f4:	05 97       	sbiw	r24, 0x05	; 5
    38f6:	09 f0       	breq	.+2      	; 0x38fa <_ZN11TempControl11UpdateStateEv+0x4c>
    38f8:	85 c1       	rjmp	.+778    	; 0x3c04 <_ZN11TempControl11UpdateStateEv+0x356>
    38fa:	88 c1       	rjmp	.+784    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
	case STARTUP:
	case IDLE:
		_lastIdleTime=millis();
    38fc:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    3900:	6a a7       	std	Y+42, r22	; 0x2a
    3902:	7b a7       	std	Y+43, r23	; 0x2b
    3904:	8c a7       	std	Y+44, r24	; 0x2c
    3906:	9d a7       	std	Y+45, r25	; 0x2d
		if(((timeSinceCooling() > 900000UL || _doNegPeakDetect == false) &&
    3908:	ce 01       	movw	r24, r28
    390a:	0e 94 b4 18 	call	0x3168	; 0x3168 <_ZN11TempControl16timeSinceCoolingEv>
    390e:	61 5a       	subi	r22, 0xA1	; 161
    3910:	7b 4b       	sbci	r23, 0xBB	; 187
    3912:	8d 40       	sbci	r24, 0x0D	; 13
    3914:	90 40       	sbci	r25, 0x00	; 0
    3916:	18 f4       	brcc	.+6      	; 0x391e <_ZN11TempControl11UpdateStateEv+0x70>
    3918:	8a a9       	ldd	r24, Y+50	; 0x32
    391a:	88 23       	and	r24, r24
    391c:	59 f4       	brne	.+22     	; 0x3934 <_ZN11TempControl11UpdateStateEv+0x86>
    391e:	ce 01       	movw	r24, r28
    3920:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN11TempControl16timeSinceHeatingEv>
    3924:	61 5c       	subi	r22, 0xC1	; 193
    3926:	77 42       	sbci	r23, 0x27	; 39
    3928:	89 40       	sbci	r24, 0x09	; 9
    392a:	90 40       	sbci	r25, 0x00	; 0
    392c:	40 f4       	brcc	.+16     	; 0x393e <_ZN11TempControl11UpdateStateEv+0x90>
    392e:	8b a9       	ldd	r24, Y+51	; 0x33
    3930:	88 23       	and	r24, r24
    3932:	29 f0       	breq	.+10     	; 0x393e <_ZN11TempControl11UpdateStateEv+0x90>
    3934:	8a 89       	ldd	r24, Y+18	; 0x12
    3936:	9b 89       	ldd	r25, Y+19	; 0x13
    3938:	04 97       	sbiw	r24, 0x04	; 4
    393a:	09 f0       	breq	.+2      	; 0x393e <_ZN11TempControl11UpdateStateEv+0x90>
    393c:	71 c0       	rjmp	.+226    	; 0x3a20 <_ZN11TempControl11UpdateStateEv+0x172>
				(timeSinceHeating() > 600000UL || _doPosPeakDetect == false)) ||
				_state==STARTUP){ //if cooling is 15 min ago and heating 10
			if(_fridgeTemp->GetTempActual() > _fridgeTemp->GetTempSetting() + IDLE_RANGE_HIGH){
    393e:	8c 81       	ldd	r24, Y+4	; 0x04
    3940:	9d 81       	ldd	r25, Y+5	; 0x05
    3942:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    3946:	7b 01       	movw	r14, r22
    3948:	8c 01       	movw	r16, r24
    394a:	8c 81       	ldd	r24, Y+4	; 0x04
    394c:	9d 81       	ldd	r25, Y+5	; 0x05
    394e:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e4       	ldi	r20, 0x40	; 64
    3958:	50 e4       	ldi	r21, 0x40	; 64
    395a:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    395e:	9b 01       	movw	r18, r22
    3960:	ac 01       	movw	r20, r24
    3962:	c8 01       	movw	r24, r16
    3964:	b7 01       	movw	r22, r14
    3966:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    396a:	18 16       	cp	r1, r24
    396c:	0c f5       	brge	.+66     	; 0x39b0 <_ZN11TempControl11UpdateStateEv+0x102>
				if (_mode!=FRIDGE_CONSTANT){
    396e:	8c 89       	ldd	r24, Y+20	; 0x14
    3970:	9d 89       	ldd	r25, Y+21	; 0x15
    3972:	89 2b       	or	r24, r25
    3974:	d1 f0       	breq	.+52     	; 0x39aa <_ZN11TempControl11UpdateStateEv+0xfc>
					if(_beerTemp->TempFiltSlow[3] > _beerTemp->GetTempSetting() + 0.5){
    3976:	ea 81       	ldd	r30, Y+2	; 0x02
    3978:	fb 81       	ldd	r31, Y+3	; 0x03
    397a:	fe 96       	adiw	r30, 0x3e	; 62
    397c:	e0 80       	ld	r14, Z
    397e:	f1 80       	ldd	r15, Z+1	; 0x01
    3980:	02 81       	ldd	r16, Z+2	; 0x02
    3982:	13 81       	ldd	r17, Z+3	; 0x03
    3984:	fe 97       	sbiw	r30, 0x3e	; 62
    3986:	cf 01       	movw	r24, r30
    3988:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	5f e3       	ldi	r21, 0x3F	; 63
    3994:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3998:	9b 01       	movw	r18, r22
    399a:	ac 01       	movw	r20, r24
    399c:	c8 01       	movw	r24, r16
    399e:	b7 01       	movw	r22, r14
    39a0:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    39a4:	18 16       	cp	r1, r24
    39a6:	0c f0       	brlt	.+2      	; 0x39aa <_ZN11TempControl11UpdateStateEv+0xfc>
    39a8:	31 c1       	rjmp	.+610    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
						_state=COOLING;   // only start cooling when beer is too warm (0.05 degree idle space)
					}
				}
				else{
					_state=COOLING;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	2c c1       	rjmp	.+600    	; 0x3c08 <_ZN11TempControl11UpdateStateEv+0x35a>
				}
				return;
			}
			if (_fridgeTemp->GetTempActual() < _fridgeTemp->GetTempSetting() + IDLE_RANGE_LOW){
    39b0:	8c 81       	ldd	r24, Y+4	; 0x04
    39b2:	9d 81       	ldd	r25, Y+5	; 0x05
    39b4:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    39b8:	7b 01       	movw	r14, r22
    39ba:	8c 01       	movw	r16, r24
    39bc:	8c 81       	ldd	r24, Y+4	; 0x04
    39be:	9d 81       	ldd	r25, Y+5	; 0x05
    39c0:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	40 e4       	ldi	r20, 0x40	; 64
    39ca:	50 e4       	ldi	r21, 0x40	; 64
    39cc:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    39d0:	9b 01       	movw	r18, r22
    39d2:	ac 01       	movw	r20, r24
    39d4:	c8 01       	movw	r24, r16
    39d6:	b7 01       	movw	r22, r14
    39d8:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    39dc:	88 23       	and	r24, r24
    39de:	04 f5       	brge	.+64     	; 0x3a20 <_ZN11TempControl11UpdateStateEv+0x172>
				if (_mode != FRIDGE_CONSTANT){
    39e0:	8c 89       	ldd	r24, Y+20	; 0x14
    39e2:	9d 89       	ldd	r25, Y+21	; 0x15
    39e4:	89 2b       	or	r24, r25
    39e6:	c9 f0       	breq	.+50     	; 0x3a1a <_ZN11TempControl11UpdateStateEv+0x16c>
					if(_beerTemp->GetTempActual() < _beerTemp->GetTempSetting() - 0.5){
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN18BeerTempController13GetTempActualEv>
    39f0:	7b 01       	movw	r14, r22
    39f2:	8c 01       	movw	r16, r24
    39f4:	8a 81       	ldd	r24, Y+2	; 0x02
    39f6:	9b 81       	ldd	r25, Y+3	; 0x03
    39f8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    3a08:	9b 01       	movw	r18, r22
    3a0a:	ac 01       	movw	r20, r24
    3a0c:	c8 01       	movw	r24, r16
    3a0e:	b7 01       	movw	r22, r14
    3a10:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3a14:	88 23       	and	r24, r24
    3a16:	0c f0       	brlt	.+2      	; 0x3a1a <_ZN11TempControl11UpdateStateEv+0x16c>
    3a18:	f9 c0       	rjmp	.+498    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
						_state=HEATING;   // only start heating when beer is too cold (0.05 degree idle space)
					}
				}
				else{
					_state=HEATING;
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	f4 c0       	rjmp	.+488    	; 0x3c08 <_ZN11TempControl11UpdateStateEv+0x35a>
				}
				return;
			}
		}
		if(timeSinceCooling()>1800000UL){ // 30 minutes since the last time the cooler was on
    3a20:	ce 01       	movw	r24, r28
    3a22:	0e 94 b4 18 	call	0x3168	; 0x3168 <_ZN11TempControl16timeSinceCoolingEv>
    3a26:	61 54       	subi	r22, 0x41	; 65
    3a28:	77 47       	sbci	r23, 0x77	; 119
    3a2a:	8b 41       	sbci	r24, 0x1B	; 27
    3a2c:	90 40       	sbci	r25, 0x00	; 0
    3a2e:	08 f0       	brcs	.+2      	; 0x3a32 <_ZN11TempControl11UpdateStateEv+0x184>
			_doNegPeakDetect = false;     // peak would be from drifting in idle, not from cooling
    3a30:	1a aa       	std	Y+50, r1	; 0x32
		}
		if(timeSinceHeating()>900000UL){  // 20 minutes since the last time the cooler was on
    3a32:	ce 01       	movw	r24, r28
    3a34:	0e 94 9f 18 	call	0x313e	; 0x313e <_ZN11TempControl16timeSinceHeatingEv>
    3a38:	61 5a       	subi	r22, 0xA1	; 161
    3a3a:	7b 4b       	sbci	r23, 0xBB	; 187
    3a3c:	8d 40       	sbci	r24, 0x0D	; 13
    3a3e:	90 40       	sbci	r25, 0x00	; 0
    3a40:	08 f4       	brcc	.+2      	; 0x3a44 <_ZN11TempControl11UpdateStateEv+0x196>
    3a42:	e4 c0       	rjmp	.+456    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
			_doPosPeakDetect = false;     // peak would be from drifting in idle, not from heating
    3a44:	1b aa       	std	Y+51, r1	; 0x33
    3a46:	e2 c0       	rjmp	.+452    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
		}
		break;
	case COOLING:
		_doNegPeakDetect = true;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	8a ab       	std	Y+50, r24	; 0x32
		_lastCoolTime = millis();
    3a4c:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    3a50:	6a a3       	std	Y+34, r22	; 0x22
    3a52:	7b a3       	std	Y+35, r23	; 0x23
    3a54:	8c a3       	std	Y+36, r24	; 0x24
    3a56:	9d a3       	std	Y+37, r25	; 0x25
		estimatedOvershoot = _coolOvershootEstimator  * min(MAX_COOL_TIME_FOR_ESTIMATE, (float) timeSinceIdle()/(1000))/60;
    3a58:	c8 5b       	subi	r28, 0xB8	; 184
    3a5a:	df 4f       	sbci	r29, 0xFF	; 255
    3a5c:	28 80       	ld	r2, Y
    3a5e:	39 80       	ldd	r3, Y+1	; 0x01
    3a60:	4a 80       	ldd	r4, Y+2	; 0x02
    3a62:	5b 80       	ldd	r5, Y+3	; 0x03
    3a64:	c8 54       	subi	r28, 0x48	; 72
    3a66:	d0 40       	sbci	r29, 0x00	; 0
    3a68:	ce 01       	movw	r24, r28
    3a6a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN11TempControl13timeSinceIdleEv>
    3a6e:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	4a e7       	ldi	r20, 0x7A	; 122
    3a78:	54 e4       	ldi	r21, 0x44	; 68
    3a7a:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3a7e:	20 e0       	ldi	r18, 0x00	; 0
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	46 e9       	ldi	r20, 0x96	; 150
    3a84:	54 e4       	ldi	r21, 0x44	; 68
    3a86:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3a8a:	18 16       	cp	r1, r24
    3a8c:	5c f4       	brge	.+22     	; 0x3aa4 <_ZN11TempControl11UpdateStateEv+0x1f6>
    3a8e:	0f 2e       	mov	r0, r31
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	6f 2e       	mov	r6, r31
    3a94:	f0 e0       	ldi	r31, 0x00	; 0
    3a96:	7f 2e       	mov	r7, r31
    3a98:	f6 e9       	ldi	r31, 0x96	; 150
    3a9a:	8f 2e       	mov	r8, r31
    3a9c:	f4 e4       	ldi	r31, 0x44	; 68
    3a9e:	9f 2e       	mov	r9, r31
    3aa0:	f0 2d       	mov	r31, r0
    3aa2:	0d c0       	rjmp	.+26     	; 0x3abe <_ZN11TempControl11UpdateStateEv+0x210>
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN11TempControl13timeSinceIdleEv>
    3aaa:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	4a e7       	ldi	r20, 0x7A	; 122
    3ab4:	54 e4       	ldi	r21, 0x44	; 68
    3ab6:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3aba:	3b 01       	movw	r6, r22
    3abc:	4c 01       	movw	r8, r24
		estimatedPeakTemperature = _fridgeTemp->GetTempActual() - estimatedOvershoot;
    3abe:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ac2:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    3ac6:	7b 01       	movw	r14, r22
    3ac8:	8c 01       	movw	r16, r24
//		Serial.print(estimatedOvershoot);
//		Serial.print("\testimatedPeakTemperature:");
//		Serial.print(estimatedPeakTemperature);
//		Serial.print("\t_fridgeTemp->GetTempSetting() + COOLING_TARGET:");
//		Serial.println(_fridgeTemp->GetTempSetting() + COOLING_TARGET);
		if(estimatedPeakTemperature <= _fridgeTemp->GetTempSetting() + COOLING_TARGET){
    3aca:	8c 81       	ldd	r24, Y+4	; 0x04
    3acc:	9d 81       	ldd	r25, Y+5	; 0x05
    3ace:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    3ad2:	5b 01       	movw	r10, r22
    3ad4:	6c 01       	movw	r12, r24
    3ad6:	c2 01       	movw	r24, r4
    3ad8:	b1 01       	movw	r22, r2
    3ada:	a4 01       	movw	r20, r8
    3adc:	93 01       	movw	r18, r6
    3ade:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e7       	ldi	r20, 0x70	; 112
    3ae8:	52 e4       	ldi	r21, 0x42	; 66
    3aea:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3aee:	9b 01       	movw	r18, r22
    3af0:	ac 01       	movw	r20, r24
    3af2:	c8 01       	movw	r24, r16
    3af4:	b7 01       	movw	r22, r14
    3af6:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    3afa:	7b 01       	movw	r14, r22
    3afc:	8c 01       	movw	r16, r24
    3afe:	c6 01       	movw	r24, r12
    3b00:	b5 01       	movw	r22, r10
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	40 e0       	ldi	r20, 0x00	; 0
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3b0e:	9b 01       	movw	r18, r22
    3b10:	ac 01       	movw	r20, r24
    3b12:	c8 01       	movw	r24, r16
    3b14:	b7 01       	movw	r22, r14
    3b16:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	0c f4       	brge	.+2      	; 0x3b20 <_ZN11TempControl11UpdateStateEv+0x272>
    3b1e:	76 c0       	rjmp	.+236    	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
			_SetNegPeakEstimate();
    3b20:	ce 01       	movw	r24, r28
    3b22:	0e 94 5f 1b 	call	0x36be	; 0x36be <_ZN11TempControl19_SetNegPeakEstimateEv>
    3b26:	6e c0       	rjmp	.+220    	; 0x3c04 <_ZN11TempControl11UpdateStateEv+0x356>
			_state=IDLE;
			return;
		}
		break;
	case HEATING:
		_lastHeatTime=millis();
    3b28:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    3b2c:	6e a3       	std	Y+38, r22	; 0x26
    3b2e:	7f a3       	std	Y+39, r23	; 0x27
    3b30:	88 a7       	std	Y+40, r24	; 0x28
    3b32:	99 a7       	std	Y+41, r25	; 0x29
		_doPosPeakDetect = true;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	8b ab       	std	Y+51, r24	; 0x33
		estimatedOvershoot = _heatOvershootEstimator * min(MAX_HEAT_TIME_FOR_ESTIMATE, (float) timeSinceIdle()/(1000))/60;
    3b38:	cc 5b       	subi	r28, 0xBC	; 188
    3b3a:	df 4f       	sbci	r29, 0xFF	; 255
    3b3c:	28 80       	ld	r2, Y
    3b3e:	39 80       	ldd	r3, Y+1	; 0x01
    3b40:	4a 80       	ldd	r4, Y+2	; 0x02
    3b42:	5b 80       	ldd	r5, Y+3	; 0x03
    3b44:	c4 54       	subi	r28, 0x44	; 68
    3b46:	d0 40       	sbci	r29, 0x00	; 0
    3b48:	ce 01       	movw	r24, r28
    3b4a:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN11TempControl13timeSinceIdleEv>
    3b4e:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	4a e7       	ldi	r20, 0x7A	; 122
    3b58:	54 e4       	ldi	r21, 0x44	; 68
    3b5a:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3b5e:	20 e0       	ldi	r18, 0x00	; 0
    3b60:	30 e0       	ldi	r19, 0x00	; 0
    3b62:	46 e1       	ldi	r20, 0x16	; 22
    3b64:	54 e4       	ldi	r21, 0x44	; 68
    3b66:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3b6a:	18 16       	cp	r1, r24
    3b6c:	5c f4       	brge	.+22     	; 0x3b84 <_ZN11TempControl11UpdateStateEv+0x2d6>
    3b6e:	0f 2e       	mov	r0, r31
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	6f 2e       	mov	r6, r31
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	7f 2e       	mov	r7, r31
    3b78:	f6 e1       	ldi	r31, 0x16	; 22
    3b7a:	8f 2e       	mov	r8, r31
    3b7c:	f4 e4       	ldi	r31, 0x44	; 68
    3b7e:	9f 2e       	mov	r9, r31
    3b80:	f0 2d       	mov	r31, r0
    3b82:	0d c0       	rjmp	.+26     	; 0x3b9e <_ZN11TempControl11UpdateStateEv+0x2f0>
    3b84:	ce 01       	movw	r24, r28
    3b86:	0e 94 8a 18 	call	0x3114	; 0x3114 <_ZN11TempControl13timeSinceIdleEv>
    3b8a:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	4a e7       	ldi	r20, 0x7A	; 122
    3b94:	54 e4       	ldi	r21, 0x44	; 68
    3b96:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3b9a:	3b 01       	movw	r6, r22
    3b9c:	4c 01       	movw	r8, r24
		estimatedPeakTemperature = _fridgeTemp->GetTempActual() + estimatedOvershoot;
    3b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba2:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    3ba6:	7b 01       	movw	r14, r22
    3ba8:	8c 01       	movw	r16, r24
		if(estimatedPeakTemperature >= _fridgeTemp->GetTempSetting() + HEATING_TARGET){
    3baa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bac:	9d 81       	ldd	r25, Y+5	; 0x05
    3bae:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    3bb2:	5b 01       	movw	r10, r22
    3bb4:	6c 01       	movw	r12, r24
    3bb6:	c2 01       	movw	r24, r4
    3bb8:	b1 01       	movw	r22, r2
    3bba:	a4 01       	movw	r20, r8
    3bbc:	93 01       	movw	r18, r6
    3bbe:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	40 e7       	ldi	r20, 0x70	; 112
    3bc8:	52 e4       	ldi	r21, 0x42	; 66
    3bca:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    3bce:	9b 01       	movw	r18, r22
    3bd0:	ac 01       	movw	r20, r24
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	b7 01       	movw	r22, r14
    3bd6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3bda:	7b 01       	movw	r14, r22
    3bdc:	8c 01       	movw	r16, r24
    3bde:	c6 01       	movw	r24, r12
    3be0:	b5 01       	movw	r22, r10
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3bee:	9b 01       	movw	r18, r22
    3bf0:	ac 01       	movw	r20, r24
    3bf2:	c8 01       	movw	r24, r16
    3bf4:	b7 01       	movw	r22, r14
    3bf6:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3bfa:	88 23       	and	r24, r24
    3bfc:	3c f0       	brlt	.+14     	; 0x3c0c <_ZN11TempControl11UpdateStateEv+0x35e>
			_SetPosPeakEstimate();
    3bfe:	ce 01       	movw	r24, r28
    3c00:	0e 94 4d 1b 	call	0x369a	; 0x369a <_ZN11TempControl19_SetPosPeakEstimateEv>
		//			serialFridgeMessage(FRIDGE_DOOR_CLOSED);
		//			_state=IDLE;
		return;
	case UNKNOWN:
	default:
		_state = IDLE; //go to unknown state, should never happen
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	9b 8b       	std	Y+19, r25	; 0x13
    3c0a:	8a 8b       	std	Y+18, r24	; 0x12
		break;
	}
}
    3c0c:	df 91       	pop	r29
    3c0e:	cf 91       	pop	r28
    3c10:	1f 91       	pop	r17
    3c12:	0f 91       	pop	r16
    3c14:	ff 90       	pop	r15
    3c16:	ef 90       	pop	r14
    3c18:	df 90       	pop	r13
    3c1a:	cf 90       	pop	r12
    3c1c:	bf 90       	pop	r11
    3c1e:	af 90       	pop	r10
    3c20:	9f 90       	pop	r9
    3c22:	8f 90       	pop	r8
    3c24:	7f 90       	pop	r7
    3c26:	6f 90       	pop	r6
    3c28:	5f 90       	pop	r5
    3c2a:	4f 90       	pop	r4
    3c2c:	3f 90       	pop	r3
    3c2e:	2f 90       	pop	r2
    3c30:	08 95       	ret

00003c32 <_ZN11TempControl17UpdatePIDSettingsEv>:
	//Run through the updates

}

// update fridge temperature setting, difference with beer setting is PID actuator
void TempControl::UpdatePIDSettings(void){
    3c32:	8f 92       	push	r8
    3c34:	9f 92       	push	r9
    3c36:	af 92       	push	r10
    3c38:	bf 92       	push	r11
    3c3a:	cf 92       	push	r12
    3c3c:	df 92       	push	r13
    3c3e:	ef 92       	push	r14
    3c40:	ff 92       	push	r15
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	ec 01       	movw	r28, r24
	if(_mode == BEER_CONSTANT || _mode == BEER_PROFILE){
    3c4c:	8c 89       	ldd	r24, Y+20	; 0x14
    3c4e:	9d 89       	ldd	r25, Y+21	; 0x15
    3c50:	01 97       	sbiw	r24, 0x01	; 1
    3c52:	02 97       	sbiw	r24, 0x02	; 2
    3c54:	08 f0       	brcs	.+2      	; 0x3c58 <_ZN11TempControl17UpdatePIDSettingsEv+0x26>
    3c56:	e5 c1       	rjmp	.+970    	; 0x4022 <_ZN11TempControl17UpdatePIDSettingsEv+0x3f0>
		float beerTemperatureDifference =  _beerTemp->GetTempSetting() - _beerTemp->TempFiltSlow[3];
    3c58:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    3c60:	0a 81       	ldd	r16, Y+2	; 0x02
    3c62:	1b 81       	ldd	r17, Y+3	; 0x03
    3c64:	f8 01       	movw	r30, r16
    3c66:	fe 96       	adiw	r30, 0x3e	; 62
    3c68:	20 81       	ld	r18, Z
    3c6a:	31 81       	ldd	r19, Z+1	; 0x01
    3c6c:	42 81       	ldd	r20, Z+2	; 0x02
    3c6e:	53 81       	ldd	r21, Z+3	; 0x03
    3c70:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    3c74:	5b 01       	movw	r10, r22
    3c76:	6c 01       	movw	r12, r24
		if((abs(beerTemperatureDifference) < 5)
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	40 e0       	ldi	r20, 0x00	; 0
    3c7e:	50 e0       	ldi	r21, 0x00	; 0
    3c80:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3c84:	18 16       	cp	r1, r24
    3c86:	5c f4       	brge	.+22     	; 0x3c9e <_ZN11TempControl17UpdatePIDSettingsEv+0x6c>
    3c88:	c6 01       	movw	r24, r12
    3c8a:	b5 01       	movw	r22, r10
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 ea       	ldi	r20, 0xA0	; 160
    3c92:	50 e4       	ldi	r21, 0x40	; 64
    3c94:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3c98:	87 fd       	sbrc	r24, 7
    3c9a:	0c c0       	rjmp	.+24     	; 0x3cb4 <_ZN11TempControl17UpdatePIDSettingsEv+0x82>
    3c9c:	62 c0       	rjmp	.+196    	; 0x3d62 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3c9e:	c6 01       	movw	r24, r12
    3ca0:	b5 01       	movw	r22, r10
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 ea       	ldi	r20, 0xA0	; 160
    3ca8:	50 ec       	ldi	r21, 0xC0	; 192
    3caa:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3cae:	18 16       	cp	r1, r24
    3cb0:	0c f0       	brlt	.+2      	; 0x3cb4 <_ZN11TempControl17UpdatePIDSettingsEv+0x82>
    3cb2:	57 c0       	rjmp	.+174    	; 0x3d62 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3cb4:	0e 5b       	subi	r16, 0xBE	; 190
    3cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb8:	f8 01       	movw	r30, r16
    3cba:	e0 80       	ld	r14, Z
    3cbc:	f1 80       	ldd	r15, Z+1	; 0x01
    3cbe:	02 81       	ldd	r16, Z+2	; 0x02
    3cc0:	13 81       	ldd	r17, Z+3	; 0x03
    3cc2:	c8 01       	movw	r24, r16
    3cc4:	b7 01       	movw	r22, r14
    3cc6:	23 e3       	ldi	r18, 0x33	; 51
    3cc8:	33 e3       	ldi	r19, 0x33	; 51
    3cca:	43 e3       	ldi	r20, 0x33	; 51
    3ccc:	5f e3       	ldi	r21, 0x3F	; 63
    3cce:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3cd2:	18 16       	cp	r1, r24
    3cd4:	54 f0       	brlt	.+20     	; 0x3cea <_ZN11TempControl17UpdatePIDSettingsEv+0xb8>
    3cd6:	c8 01       	movw	r24, r16
    3cd8:	b7 01       	movw	r22, r14
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	50 e0       	ldi	r21, 0x00	; 0
    3ce2:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3ce6:	87 ff       	sbrs	r24, 7
    3ce8:	14 c0       	rjmp	.+40     	; 0x3d12 <_ZN11TempControl17UpdatePIDSettingsEv+0xe0>
    3cea:	c8 01       	movw	r24, r16
    3cec:	b7 01       	movw	r22, r14
    3cee:	23 e3       	ldi	r18, 0x33	; 51
    3cf0:	33 e3       	ldi	r19, 0x33	; 51
    3cf2:	43 eb       	ldi	r20, 0xB3	; 179
    3cf4:	5f eb       	ldi	r21, 0xBF	; 191
    3cf6:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3cfa:	88 23       	and	r24, r24
    3cfc:	94 f1       	brlt	.+100    	; 0x3d62 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3cfe:	c8 01       	movw	r24, r16
    3d00:	b7 01       	movw	r22, r14
    3d02:	20 e0       	ldi	r18, 0x00	; 0
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3d0e:	18 16       	cp	r1, r24
    3d10:	44 f1       	brlt	.+80     	; 0x3d62 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
				&& ((_beerTemp->Slope <= 0.7 && _beerTemp->Slope >= 0)
				|| (_beerTemp->Slope >= -1.4 && _beerTemp->Slope <= 0))){     //difference is smaller than .5 degree and slope is almost horizontal
			if(abs(beerTemperatureDifference)> 0.5){
    3d12:	c6 01       	movw	r24, r12
    3d14:	b5 01       	movw	r22, r10
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3d22:	18 16       	cp	r1, r24
    3d24:	5c f4       	brge	.+22     	; 0x3d3c <_ZN11TempControl17UpdatePIDSettingsEv+0x10a>
    3d26:	c6 01       	movw	r24, r12
    3d28:	b5 01       	movw	r22, r10
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e0       	ldi	r20, 0x00	; 0
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3d36:	18 16       	cp	r1, r24
    3d38:	5c f0       	brlt	.+22     	; 0x3d50 <_ZN11TempControl17UpdatePIDSettingsEv+0x11e>
    3d3a:	21 c0       	rjmp	.+66     	; 0x3d7e <_ZN11TempControl17UpdatePIDSettingsEv+0x14c>
    3d3c:	c6 01       	movw	r24, r12
    3d3e:	b5 01       	movw	r22, r10
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	5f eb       	ldi	r21, 0xBF	; 191
    3d48:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3d4c:	88 23       	and	r24, r24
    3d4e:	bc f4       	brge	.+46     	; 0x3d7e <_ZN11TempControl17UpdatePIDSettingsEv+0x14c>
				differenceIntegral = differenceIntegral + beerTemperatureDifference;
    3d50:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d52:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d54:	88 a9       	ldd	r24, Y+48	; 0x30
    3d56:	99 a9       	ldd	r25, Y+49	; 0x31
    3d58:	a6 01       	movw	r20, r12
    3d5a:	95 01       	movw	r18, r10
    3d5c:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3d60:	0a c0       	rjmp	.+20     	; 0x3d76 <_ZN11TempControl17UpdatePIDSettingsEv+0x144>
			}
		}
		else{
			differenceIntegral = differenceIntegral*0.9;
    3d62:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d64:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d66:	88 a9       	ldd	r24, Y+48	; 0x30
    3d68:	99 a9       	ldd	r25, Y+49	; 0x31
    3d6a:	26 e6       	ldi	r18, 0x66	; 102
    3d6c:	36 e6       	ldi	r19, 0x66	; 102
    3d6e:	46 e6       	ldi	r20, 0x66	; 102
    3d70:	5f e3       	ldi	r21, 0x3F	; 63
    3d72:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3d76:	6e a7       	std	Y+46, r22	; 0x2e
    3d78:	7f a7       	std	Y+47, r23	; 0x2f
    3d7a:	88 ab       	std	Y+48, r24	; 0x30
    3d7c:	99 ab       	std	Y+49, r25	; 0x31
		}

		if(beerTemperatureDifference<0){ //linearly go to cool parameters in 3 hours
    3d7e:	c6 01       	movw	r24, r12
    3d80:	b5 01       	movw	r22, r10
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	30 e0       	ldi	r19, 0x00	; 0
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	50 e0       	ldi	r21, 0x00	; 0
    3d8a:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
			_Kp = constrain(_Kp + (KpCool-KpHeat)/(360*3), KpCool, KpHeat);
			_Kd = constrain(_Kd + (KdCool-KdHeat)/(360*3), KdHeat, KdCool);
		}
		else{ //linearly go to heat parameters in 3 hours
			_Kp = constrain(_Kp + (KpHeat-KpCool)/(360*3), KpCool, KpHeat);
    3d8e:	6e 89       	ldd	r22, Y+22	; 0x16
    3d90:	7f 89       	ldd	r23, Y+23	; 0x17
    3d92:	88 8d       	ldd	r24, Y+24	; 0x18
    3d94:	99 8d       	ldd	r25, Y+25	; 0x19
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e0       	ldi	r20, 0x00	; 0
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3da2:	7b 01       	movw	r14, r22
    3da4:	8c 01       	movw	r16, r24
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 ea       	ldi	r20, 0xA0	; 160
    3dac:	50 e4       	ldi	r21, 0x40	; 64
    3dae:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3db2:	88 23       	and	r24, r24
    3db4:	5c f4       	brge	.+22     	; 0x3dcc <_ZN11TempControl17UpdatePIDSettingsEv+0x19a>
    3db6:	0f 2e       	mov	r0, r31
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	ef 2e       	mov	r14, r31
    3dbc:	f0 e0       	ldi	r31, 0x00	; 0
    3dbe:	ff 2e       	mov	r15, r31
    3dc0:	f0 ea       	ldi	r31, 0xA0	; 160
    3dc2:	0f 2f       	mov	r16, r31
    3dc4:	f0 e4       	ldi	r31, 0x40	; 64
    3dc6:	1f 2f       	mov	r17, r31
    3dc8:	f0 2d       	mov	r31, r0
    3dca:	14 c0       	rjmp	.+40     	; 0x3df4 <_ZN11TempControl17UpdatePIDSettingsEv+0x1c2>
    3dcc:	c8 01       	movw	r24, r16
    3dce:	b7 01       	movw	r22, r14
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e2       	ldi	r20, 0x20	; 32
    3dd6:	51 e4       	ldi	r21, 0x41	; 65
    3dd8:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3ddc:	18 16       	cp	r1, r24
    3dde:	54 f4       	brge	.+20     	; 0x3df4 <_ZN11TempControl17UpdatePIDSettingsEv+0x1c2>
    3de0:	0f 2e       	mov	r0, r31
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	ef 2e       	mov	r14, r31
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	ff 2e       	mov	r15, r31
    3dea:	f0 e2       	ldi	r31, 0x20	; 32
    3dec:	0f 2f       	mov	r16, r31
    3dee:	f1 e4       	ldi	r31, 0x41	; 65
    3df0:	1f 2f       	mov	r17, r31
    3df2:	f0 2d       	mov	r31, r0
    3df4:	ee 8a       	std	Y+22, r14	; 0x16
    3df6:	ff 8a       	std	Y+23, r15	; 0x17
    3df8:	08 8f       	std	Y+24, r16	; 0x18
    3dfa:	19 8f       	std	Y+25, r17	; 0x19
			_Kd = constrain(_Kd + (KdHeat-KdCool)/(360*3), KdHeat, KdCool);
    3dfc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3dfe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e00:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e02:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	50 e0       	ldi	r21, 0x00	; 0
    3e0c:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3e10:	7b 01       	movw	r14, r22
    3e12:	8c 01       	movw	r16, r24
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e2       	ldi	r20, 0x20	; 32
    3e1a:	51 ec       	ldi	r21, 0xC1	; 193
    3e1c:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3e20:	88 23       	and	r24, r24
    3e22:	5c f4       	brge	.+22     	; 0x3e3a <_ZN11TempControl17UpdatePIDSettingsEv+0x208>
    3e24:	0f 2e       	mov	r0, r31
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	ef 2e       	mov	r14, r31
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	ff 2e       	mov	r15, r31
    3e2e:	f0 e2       	ldi	r31, 0x20	; 32
    3e30:	0f 2f       	mov	r16, r31
    3e32:	f1 ec       	ldi	r31, 0xC1	; 193
    3e34:	1f 2f       	mov	r17, r31
    3e36:	f0 2d       	mov	r31, r0
    3e38:	14 c0       	rjmp	.+40     	; 0x3e62 <_ZN11TempControl17UpdatePIDSettingsEv+0x230>
    3e3a:	c8 01       	movw	r24, r16
    3e3c:	b7 01       	movw	r22, r14
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 ea       	ldi	r20, 0xA0	; 160
    3e44:	50 ec       	ldi	r21, 0xC0	; 192
    3e46:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3e4a:	18 16       	cp	r1, r24
    3e4c:	54 f4       	brge	.+20     	; 0x3e62 <_ZN11TempControl17UpdatePIDSettingsEv+0x230>
    3e4e:	0f 2e       	mov	r0, r31
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	ef 2e       	mov	r14, r31
    3e54:	f0 e0       	ldi	r31, 0x00	; 0
    3e56:	ff 2e       	mov	r15, r31
    3e58:	f0 ea       	ldi	r31, 0xA0	; 160
    3e5a:	0f 2f       	mov	r16, r31
    3e5c:	f0 ec       	ldi	r31, 0xC0	; 192
    3e5e:	1f 2f       	mov	r17, r31
    3e60:	f0 2d       	mov	r31, r0
    3e62:	ea 8e       	std	Y+26, r14	; 0x1a
    3e64:	fb 8e       	std	Y+27, r15	; 0x1b
    3e66:	0c 8f       	std	Y+28, r16	; 0x1c
    3e68:	1d 8f       	std	Y+29, r17	; 0x1d
		}
		_beerTemp->SetTempSetting(constrain(_beerTemp->GetTempSetting() + (_Kp * beerTemperatureDifference) + (_Ki * differenceIntegral) + (_Kd * _beerTemp->Slope), 40, 300));
    3e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e6e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    3e72:	7b 01       	movw	r14, r22
    3e74:	8c 01       	movw	r16, r24
    3e76:	8a 80       	ldd	r8, Y+2	; 0x02
    3e78:	9b 80       	ldd	r9, Y+3	; 0x03
    3e7a:	c6 01       	movw	r24, r12
    3e7c:	b5 01       	movw	r22, r10
    3e7e:	2e 89       	ldd	r18, Y+22	; 0x16
    3e80:	3f 89       	ldd	r19, Y+23	; 0x17
    3e82:	48 8d       	ldd	r20, Y+24	; 0x18
    3e84:	59 8d       	ldd	r21, Y+25	; 0x19
    3e86:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3e8a:	9b 01       	movw	r18, r22
    3e8c:	ac 01       	movw	r20, r24
    3e8e:	c8 01       	movw	r24, r16
    3e90:	b7 01       	movw	r22, r14
    3e92:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3e96:	7b 01       	movw	r14, r22
    3e98:	8c 01       	movw	r16, r24
    3e9a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3e9c:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3e9e:	88 a1       	ldd	r24, Y+32	; 0x20
    3ea0:	99 a1       	ldd	r25, Y+33	; 0x21
    3ea2:	2e a5       	ldd	r18, Y+46	; 0x2e
    3ea4:	3f a5       	ldd	r19, Y+47	; 0x2f
    3ea6:	48 a9       	ldd	r20, Y+48	; 0x30
    3ea8:	59 a9       	ldd	r21, Y+49	; 0x31
    3eaa:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3eae:	9b 01       	movw	r18, r22
    3eb0:	ac 01       	movw	r20, r24
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	b7 01       	movw	r22, r14
    3eb6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3eba:	7b 01       	movw	r14, r22
    3ebc:	8c 01       	movw	r16, r24
    3ebe:	f4 01       	movw	r30, r8
    3ec0:	ee 5b       	subi	r30, 0xBE	; 190
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3ec6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3ec8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3eca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ecc:	20 81       	ld	r18, Z
    3ece:	31 81       	ldd	r19, Z+1	; 0x01
    3ed0:	42 81       	ldd	r20, Z+2	; 0x02
    3ed2:	53 81       	ldd	r21, Z+3	; 0x03
    3ed4:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3ed8:	9b 01       	movw	r18, r22
    3eda:	ac 01       	movw	r20, r24
    3edc:	c8 01       	movw	r24, r16
    3ede:	b7 01       	movw	r22, r14
    3ee0:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e2       	ldi	r20, 0x20	; 32
    3eea:	52 e4       	ldi	r21, 0x42	; 66
    3eec:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    3ef0:	88 23       	and	r24, r24
    3ef2:	2c f4       	brge	.+10     	; 0x3efe <_ZN11TempControl17UpdatePIDSettingsEv+0x2cc>
    3ef4:	a0 e0       	ldi	r26, 0x00	; 0
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	40 e2       	ldi	r20, 0x20	; 32
    3efa:	62 e4       	ldi	r22, 0x42	; 66
    3efc:	89 c0       	rjmp	.+274    	; 0x4010 <_ZN11TempControl17UpdatePIDSettingsEv+0x3de>
    3efe:	c4 01       	movw	r24, r8
    3f00:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    3f04:	7b 01       	movw	r14, r22
    3f06:	8c 01       	movw	r16, r24
    3f08:	8a 80       	ldd	r8, Y+2	; 0x02
    3f0a:	9b 80       	ldd	r9, Y+3	; 0x03
    3f0c:	c6 01       	movw	r24, r12
    3f0e:	b5 01       	movw	r22, r10
    3f10:	2e 89       	ldd	r18, Y+22	; 0x16
    3f12:	3f 89       	ldd	r19, Y+23	; 0x17
    3f14:	48 8d       	ldd	r20, Y+24	; 0x18
    3f16:	59 8d       	ldd	r21, Y+25	; 0x19
    3f18:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3f1c:	9b 01       	movw	r18, r22
    3f1e:	ac 01       	movw	r20, r24
    3f20:	c8 01       	movw	r24, r16
    3f22:	b7 01       	movw	r22, r14
    3f24:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3f28:	7b 01       	movw	r14, r22
    3f2a:	8c 01       	movw	r16, r24
    3f2c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3f2e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3f30:	88 a1       	ldd	r24, Y+32	; 0x20
    3f32:	99 a1       	ldd	r25, Y+33	; 0x21
    3f34:	2e a5       	ldd	r18, Y+46	; 0x2e
    3f36:	3f a5       	ldd	r19, Y+47	; 0x2f
    3f38:	48 a9       	ldd	r20, Y+48	; 0x30
    3f3a:	59 a9       	ldd	r21, Y+49	; 0x31
    3f3c:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3f40:	9b 01       	movw	r18, r22
    3f42:	ac 01       	movw	r20, r24
    3f44:	c8 01       	movw	r24, r16
    3f46:	b7 01       	movw	r22, r14
    3f48:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3f4c:	7b 01       	movw	r14, r22
    3f4e:	8c 01       	movw	r16, r24
    3f50:	f4 01       	movw	r30, r8
    3f52:	ee 5b       	subi	r30, 0xBE	; 190
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f58:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3f5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f5e:	20 81       	ld	r18, Z
    3f60:	31 81       	ldd	r19, Z+1	; 0x01
    3f62:	42 81       	ldd	r20, Z+2	; 0x02
    3f64:	53 81       	ldd	r21, Z+3	; 0x03
    3f66:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	ac 01       	movw	r20, r24
    3f6e:	c8 01       	movw	r24, r16
    3f70:	b7 01       	movw	r22, r14
    3f72:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	46 e9       	ldi	r20, 0x96	; 150
    3f7c:	53 e4       	ldi	r21, 0x43	; 67
    3f7e:	0e 94 08 2a 	call	0x5410	; 0x5410 <__gesf2>
    3f82:	18 16       	cp	r1, r24
    3f84:	2c f4       	brge	.+10     	; 0x3f90 <_ZN11TempControl17UpdatePIDSettingsEv+0x35e>
    3f86:	a0 e0       	ldi	r26, 0x00	; 0
    3f88:	50 e0       	ldi	r21, 0x00	; 0
    3f8a:	46 e9       	ldi	r20, 0x96	; 150
    3f8c:	63 e4       	ldi	r22, 0x43	; 67
    3f8e:	40 c0       	rjmp	.+128    	; 0x4010 <_ZN11TempControl17UpdatePIDSettingsEv+0x3de>
    3f90:	c4 01       	movw	r24, r8
    3f92:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    3f96:	7b 01       	movw	r14, r22
    3f98:	8c 01       	movw	r16, r24
    3f9a:	8a 80       	ldd	r8, Y+2	; 0x02
    3f9c:	9b 80       	ldd	r9, Y+3	; 0x03
    3f9e:	c6 01       	movw	r24, r12
    3fa0:	b5 01       	movw	r22, r10
    3fa2:	2e 89       	ldd	r18, Y+22	; 0x16
    3fa4:	3f 89       	ldd	r19, Y+23	; 0x17
    3fa6:	48 8d       	ldd	r20, Y+24	; 0x18
    3fa8:	59 8d       	ldd	r21, Y+25	; 0x19
    3faa:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3fae:	9b 01       	movw	r18, r22
    3fb0:	ac 01       	movw	r20, r24
    3fb2:	c8 01       	movw	r24, r16
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3fba:	7b 01       	movw	r14, r22
    3fbc:	8c 01       	movw	r16, r24
    3fbe:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3fc0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3fc2:	88 a1       	ldd	r24, Y+32	; 0x20
    3fc4:	99 a1       	ldd	r25, Y+33	; 0x21
    3fc6:	2e a5       	ldd	r18, Y+46	; 0x2e
    3fc8:	3f a5       	ldd	r19, Y+47	; 0x2f
    3fca:	48 a9       	ldd	r20, Y+48	; 0x30
    3fcc:	59 a9       	ldd	r21, Y+49	; 0x31
    3fce:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3fd2:	9b 01       	movw	r18, r22
    3fd4:	ac 01       	movw	r20, r24
    3fd6:	c8 01       	movw	r24, r16
    3fd8:	b7 01       	movw	r22, r14
    3fda:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    3fde:	7b 01       	movw	r14, r22
    3fe0:	8c 01       	movw	r16, r24
    3fe2:	f4 01       	movw	r30, r8
    3fe4:	ee 5b       	subi	r30, 0xBE	; 190
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3fea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3fec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ff0:	20 81       	ld	r18, Z
    3ff2:	31 81       	ldd	r19, Z+1	; 0x01
    3ff4:	42 81       	ldd	r20, Z+2	; 0x02
    3ff6:	53 81       	ldd	r21, Z+3	; 0x03
    3ff8:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    3ffc:	9b 01       	movw	r18, r22
    3ffe:	ac 01       	movw	r20, r24
    4000:	c8 01       	movw	r24, r16
    4002:	b7 01       	movw	r22, r14
    4004:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    4008:	a6 2f       	mov	r26, r22
    400a:	57 2f       	mov	r21, r23
    400c:	48 2f       	mov	r20, r24
    400e:	69 2f       	mov	r22, r25
    4010:	c4 01       	movw	r24, r8
    4012:	2a 2f       	mov	r18, r26
    4014:	35 2f       	mov	r19, r21
    4016:	e4 2f       	mov	r30, r20
    4018:	f6 2f       	mov	r31, r22
    401a:	a9 01       	movw	r20, r18
    401c:	bf 01       	movw	r22, r30
    401e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN18BeerTempController14SetTempSettingEf>
		// _beerTemp->SetTempSetting(0.0);
	}
	else{
		// something is horribly wrong
	}
}
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	bf 90       	pop	r11
    4034:	af 90       	pop	r10
    4036:	9f 90       	pop	r9
    4038:	8f 90       	pop	r8
    403a:	08 95       	ret

0000403c <_ZN11TempControl11UpdateTimerEv>:
	//	Serial.println("tempControlUpdate");
	UpdateTimer();
	//	Serial.println("DoneUpdate");
}

void TempControl::UpdateTimer()
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	ec 01       	movw	r28, r24
{
	char stateStrDest[20];
	_timer+=200;
    4042:	6e 85       	ldd	r22, Y+14	; 0x0e
    4044:	7f 85       	ldd	r23, Y+15	; 0x0f
    4046:	88 89       	ldd	r24, Y+16	; 0x10
    4048:	99 89       	ldd	r25, Y+17	; 0x11
    404a:	68 53       	subi	r22, 0x38	; 56
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	8f 4f       	sbci	r24, 0xFF	; 255
    4050:	9f 4f       	sbci	r25, 0xFF	; 255
    4052:	6e 87       	std	Y+14, r22	; 0x0e
    4054:	7f 87       	std	Y+15, r23	; 0x0f
    4056:	88 8b       	std	Y+16, r24	; 0x10
    4058:	99 8b       	std	Y+17, r25	; 0x11
//	Serial.println();
//	Serial.print("_timer in UpdateTimer:");
//	Serial.println(_timer);
	//Check the timers
	if((_timer % 10000) == 0){		// Every 10 seconds
    405a:	20 e1       	ldi	r18, 0x10	; 16
    405c:	37 e2       	ldi	r19, 0x27	; 39
    405e:	40 e0       	ldi	r20, 0x00	; 0
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    4066:	61 15       	cp	r22, r1
    4068:	71 05       	cpc	r23, r1
    406a:	81 05       	cpc	r24, r1
    406c:	91 05       	cpc	r25, r1
    406e:	09 f0       	breq	.+2      	; 0x4072 <_ZN11TempControl11UpdateTimerEv+0x36>
    4070:	43 c0       	rjmp	.+134    	; 0x40f8 <_ZN11TempControl11UpdateTimerEv+0xbc>
		detectPeaks();			// Detect Pos and Neg Temp Peaks
    4072:	ce 01       	movw	r24, r28
    4074:	0e 94 c9 18 	call	0x3192	; 0x3192 <_ZN11TempControl11detectPeaksEv>
		UpdatePIDSettings();	// Update Kp, Ki and Kd settings
    4078:	ce 01       	movw	r24, r28
    407a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN11TempControl17UpdatePIDSettingsEv>

		Serial.print(_fridgeTemp->GetTempActual());
    407e:	8c 81       	ldd	r24, Y+4	; 0x04
    4080:	9d 81       	ldd	r25, Y+5	; 0x05
    4082:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN20FridgeTempController13GetTempActualEv>
    4086:	ab 01       	movw	r20, r22
    4088:	bc 01       	movw	r22, r24
    408a:	8c e7       	ldi	r24, 0x7C	; 124
    408c:	93 e0       	ldi	r25, 0x03	; 3
    408e:	22 e0       	ldi	r18, 0x02	; 2
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(_fridgeTemp->GetTempSetting());
    4096:	8c 81       	ldd	r24, Y+4	; 0x04
    4098:	9d 81       	ldd	r25, Y+5	; 0x05
    409a:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    409e:	ab 01       	movw	r20, r22
    40a0:	bc 01       	movw	r22, r24
    40a2:	8c e7       	ldi	r24, 0x7C	; 124
    40a4:	93 e0       	ldi	r25, 0x03	; 3
    40a6:	22 e0       	ldi	r18, 0x02	; 2
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>
		Serial.print(_beerTemp->GetTempActual());
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	9b 81       	ldd	r25, Y+3	; 0x03
    40b2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <_ZN18BeerTempController13GetTempActualEv>
    40b6:	ab 01       	movw	r20, r22
    40b8:	bc 01       	movw	r22, r24
    40ba:	8c e7       	ldi	r24, 0x7C	; 124
    40bc:	93 e0       	ldi	r25, 0x03	; 3
    40be:	22 e0       	ldi	r18, 0x02	; 2
    40c0:	30 e0       	ldi	r19, 0x00	; 0
    40c2:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <_ZN5Print5printEdi>

//		Serial.print("State set to [");
		Serial.print(GetStateStr());
    40c6:	ce 01       	movw	r24, r28
    40c8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <_ZN11TempControl11GetStateStrEv>
    40cc:	bc 01       	movw	r22, r24
    40ce:	8c e7       	ldi	r24, 0x7C	; 124
    40d0:	93 e0       	ldi	r25, 0x03	; 3
    40d2:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		Serial.print(',');
    40d6:	8c e7       	ldi	r24, 0x7C	; 124
    40d8:	93 e0       	ldi	r25, 0x03	; 3
    40da:	6c e2       	ldi	r22, 0x2C	; 44
    40dc:	0e 94 72 24 	call	0x48e4	; 0x48e4 <_ZN5Print5printEc>

//		Serial.print("\tMode set to [");
		Serial.print(GetModeStr());
    40e0:	ce 01       	movw	r24, r28
    40e2:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN11TempControl10GetModeStrEv>
    40e6:	bc 01       	movw	r22, r24
    40e8:	8c e7       	ldi	r24, 0x7C	; 124
    40ea:	93 e0       	ldi	r25, 0x03	; 3
    40ec:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <_ZN5Print5printEPKc>
		Serial.println();
    40f0:	8c e7       	ldi	r24, 0x7C	; 124
    40f2:	93 e0       	ldi	r25, 0x03	; 3
    40f4:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN5Print7printlnEv>

	}
	if((_timer % 1000) == 0){
    40f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    40fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    40fc:	88 89       	ldd	r24, Y+16	; 0x10
    40fe:	99 89       	ldd	r25, Y+17	; 0x11
    4100:	28 ee       	ldi	r18, 0xE8	; 232
    4102:	33 e0       	ldi	r19, 0x03	; 3
    4104:	40 e0       	ldi	r20, 0x00	; 0
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    410c:	61 15       	cp	r22, r1
    410e:	71 05       	cpc	r23, r1
    4110:	81 05       	cpc	r24, r1
    4112:	91 05       	cpc	r25, r1
    4114:	31 f4       	brne	.+12     	; 0x4122 <_ZN11TempControl11UpdateTimerEv+0xe6>
//		GetModeStr(stateStrDest);
////		Serial.print("\tMode set to [");
//		Serial.print(stateStrDest);
//		Serial.print(',');

		UpdateState();			// Update State and Relay Outputs once a second
    4116:	ce 01       	movw	r24, r28
    4118:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_ZN11TempControl11UpdateStateEv>
		UpdateOutputs();
    411c:	ce 01       	movw	r24, r28
    411e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <_ZN11TempControl13UpdateOutputsEv>
//		GetModeStr(stateStrDest);
////		Serial.print("\tMode set to [");
//		Serial.print(stateStrDest);
//		Serial.println();
	}
	if((_timer % 60000)== 0)
    4122:	6e 85       	ldd	r22, Y+14	; 0x0e
    4124:	7f 85       	ldd	r23, Y+15	; 0x0f
    4126:	88 89       	ldd	r24, Y+16	; 0x10
    4128:	99 89       	ldd	r25, Y+17	; 0x11
    412a:	20 e6       	ldi	r18, 0x60	; 96
    412c:	3a ee       	ldi	r19, 0xEA	; 234
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	50 e0       	ldi	r21, 0x00	; 0
    4132:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    4136:	61 15       	cp	r22, r1
    4138:	71 05       	cpc	r23, r1
    413a:	81 05       	cpc	r24, r1
    413c:	91 05       	cpc	r25, r1
    413e:	21 f4       	brne	.+8      	; 0x4148 <_ZN11TempControl11UpdateTimerEv+0x10c>
		_timer = 0;
    4140:	1e 86       	std	Y+14, r1	; 0x0e
    4142:	1f 86       	std	Y+15, r1	; 0x0f
    4144:	18 8a       	std	Y+16, r1	; 0x10
    4146:	19 8a       	std	Y+17, r1	; 0x11

}
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret

0000414e <_ZN11TempControl12UpdateTimersEv>:
		break;
	}
}

//Update the timers
void TempControl::UpdateTimers()
    414e:	0f 93       	push	r16
    4150:	1f 93       	push	r17
    4152:	8c 01       	movw	r16, r24
{

	//	Serial.println("beerUpdate");
	_beerTemp->UpdateTimer();
    4154:	fc 01       	movw	r30, r24
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <_ZN18BeerTempController11UpdateTimerEv>
	//	Serial.println("fridgeUpdate");
	_fridgeTemp->UpdateTimer();
    415e:	f8 01       	movw	r30, r16
    4160:	84 81       	ldd	r24, Z+4	; 0x04
    4162:	95 81       	ldd	r25, Z+5	; 0x05
    4164:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <_ZN20FridgeTempController11UpdateTimerEv>
	//	Serial.println("tempControlUpdate");
	UpdateTimer();
    4168:	c8 01       	movw	r24, r16
    416a:	0e 94 1e 20 	call	0x403c	; 0x403c <_ZN11TempControl11UpdateTimerEv>
	//	Serial.println("DoneUpdate");
}
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	08 95       	ret

00004174 <_ZN11TempControl21SetCurrentTempSettingEc>:
	else {
		return _fridgeTemp->GetTempSetting()/10;
	}
}

void TempControl::SetCurrentTempSetting(char adj)
    4174:	bf 92       	push	r11
    4176:	cf 92       	push	r12
    4178:	df 92       	push	r13
    417a:	ef 92       	push	r14
    417c:	ff 92       	push	r15
    417e:	0f 93       	push	r16
    4180:	1f 93       	push	r17
    4182:	fc 01       	movw	r30, r24
    4184:	b6 2e       	mov	r11, r22
{
	if(_mode == BEER_CONSTANT){
    4186:	84 89       	ldd	r24, Z+20	; 0x14
    4188:	95 89       	ldd	r25, Z+21	; 0x15
    418a:	81 30       	cpi	r24, 0x01	; 1
    418c:	91 05       	cpc	r25, r1
    418e:	d9 f4       	brne	.+54     	; 0x41c6 <_ZN11TempControl21SetCurrentTempSettingEc+0x52>
		_beerTemp->SetTempSetting(_beerTemp->GetTempSetting() + (float)adj);
    4190:	c2 80       	ldd	r12, Z+2	; 0x02
    4192:	d3 80       	ldd	r13, Z+3	; 0x03
    4194:	c6 01       	movw	r24, r12
    4196:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN18BeerTempController14GetTempSettingEv>
    419a:	7b 01       	movw	r14, r22
    419c:	8c 01       	movw	r16, r24
    419e:	6b 2d       	mov	r22, r11
    41a0:	77 27       	eor	r23, r23
    41a2:	67 fd       	sbrc	r22, 7
    41a4:	70 95       	com	r23
    41a6:	87 2f       	mov	r24, r23
    41a8:	97 2f       	mov	r25, r23
    41aa:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
    41ae:	9b 01       	movw	r18, r22
    41b0:	ac 01       	movw	r20, r24
    41b2:	c8 01       	movw	r24, r16
    41b4:	b7 01       	movw	r22, r14
    41b6:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    41ba:	ab 01       	movw	r20, r22
    41bc:	bc 01       	movw	r22, r24
    41be:	c6 01       	movw	r24, r12
    41c0:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <_ZN18BeerTempController14SetTempSettingEf>
    41c4:	1c c0       	rjmp	.+56     	; 0x41fe <_ZN11TempControl21SetCurrentTempSettingEc+0x8a>
	}
	else if(_mode == FRIDGE_CONSTANT){
    41c6:	89 2b       	or	r24, r25
    41c8:	d1 f4       	brne	.+52     	; 0x41fe <_ZN11TempControl21SetCurrentTempSettingEc+0x8a>
		_fridgeTemp->SetTempSetting(_fridgeTemp->GetTempSetting() + (float)adj);
    41ca:	c4 80       	ldd	r12, Z+4	; 0x04
    41cc:	d5 80       	ldd	r13, Z+5	; 0x05
    41ce:	c6 01       	movw	r24, r12
    41d0:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN20FridgeTempController14GetTempSettingEv>
    41d4:	7b 01       	movw	r14, r22
    41d6:	8c 01       	movw	r16, r24
    41d8:	6b 2d       	mov	r22, r11
    41da:	77 27       	eor	r23, r23
    41dc:	67 fd       	sbrc	r22, 7
    41de:	70 95       	com	r23
    41e0:	87 2f       	mov	r24, r23
    41e2:	97 2f       	mov	r25, r23
    41e4:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
    41e8:	9b 01       	movw	r18, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	c8 01       	movw	r24, r16
    41ee:	b7 01       	movw	r22, r14
    41f0:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    41f4:	ab 01       	movw	r20, r22
    41f6:	bc 01       	movw	r22, r24
    41f8:	c6 01       	movw	r24, r12
    41fa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN20FridgeTempController14SetTempSettingEf>
	}
}
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	df 90       	pop	r13
    4208:	cf 90       	pop	r12
    420a:	bf 90       	pop	r11
    420c:	08 95       	ret

0000420e <_ZN11TempControlD0Ev>:
	_coolOvershootEstimator = 5;

	_timer        = 0;
}

TempControl::~TempControl() {
    420e:	fc 01       	movw	r30, r24
    4210:	86 e6       	ldi	r24, 0x66	; 102
    4212:	92 e0       	ldi	r25, 0x02	; 2
    4214:	91 83       	std	Z+1, r25	; 0x01
    4216:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    4218:	cf 01       	movw	r24, r30
    421a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <_ZdlPv>
    421e:	08 95       	ret

00004220 <_ZN11TempControlC1Ev>:

#include "TempControl.h"
#include "OLEDFourBit.h"
#include "TCLExample.h"

TempControl::TempControl() {
    4220:	ef 92       	push	r14
    4222:	ff 92       	push	r15
    4224:	0f 93       	push	r16
    4226:	1f 93       	push	r17
    4228:	8c 01       	movw	r16, r24
    422a:	86 e6       	ldi	r24, 0x66	; 102
    422c:	92 e0       	ldi	r25, 0x02	; 2
    422e:	f8 01       	movw	r30, r16
    4230:	91 83       	std	Z+1, r25	; 0x01
    4232:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	_Compressor = new Relay(2,true);
    4234:	82 e0       	ldi	r24, 0x02	; 2
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    423c:	f8 2e       	mov	r15, r24
    423e:	e9 2e       	mov	r14, r25
    4240:	62 e0       	ldi	r22, 0x02	; 2
    4242:	41 e0       	ldi	r20, 0x01	; 1
    4244:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN5RelayC1Ehb>
    4248:	f8 01       	movw	r30, r16
    424a:	f6 82       	std	Z+6, r15	; 0x06
    424c:	e7 82       	std	Z+7, r14	; 0x07
	_Heater     = new Relay(10,true);
    424e:	82 e0       	ldi	r24, 0x02	; 2
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    4256:	f8 2e       	mov	r15, r24
    4258:	e9 2e       	mov	r14, r25
    425a:	6a e0       	ldi	r22, 0x0A	; 10
    425c:	41 e0       	ldi	r20, 0x01	; 1
    425e:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <_ZN5RelayC1Ehb>
    4262:	f8 01       	movw	r30, r16
    4264:	f0 86       	std	Z+8, r15	; 0x08
    4266:	e1 86       	std	Z+9, r14	; 0x09
	_beerTemp   = new BeerTempController("Beer", 1);
    4268:	8e ec       	ldi	r24, 0xCE	; 206
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    4270:	f8 2e       	mov	r15, r24
    4272:	e9 2e       	mov	r14, r25
    4274:	6c e1       	ldi	r22, 0x1C	; 28
    4276:	72 e0       	ldi	r23, 0x02	; 2
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <_ZN18BeerTempControllerC1EPKch>
    427e:	f8 01       	movw	r30, r16
    4280:	f2 82       	std	Z+2, r15	; 0x02
    4282:	e3 82       	std	Z+3, r14	; 0x03
	_fridgeTemp = new FridgeTempController();
    4284:	8d ec       	ldi	r24, 0xCD	; 205
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    428c:	f8 2e       	mov	r15, r24
    428e:	e9 2e       	mov	r14, r25
    4290:	0e 94 21 16 	call	0x2c42	; 0x2c42 <_ZN20FridgeTempControllerC1Ev>
    4294:	f8 01       	movw	r30, r16
    4296:	f4 82       	std	Z+4, r15	; 0x04
    4298:	e5 82       	std	Z+5, r14	; 0x05
	_settings   = new Settings();
    429a:	82 e0       	ldi	r24, 0x02	; 2
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    42a2:	f8 2e       	mov	r15, r24
    42a4:	e9 2e       	mov	r14, r25
    42a6:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <_ZN8SettingsC1Ev>
    42aa:	f8 01       	movw	r30, r16
    42ac:	f2 86       	std	Z+10, r15	; 0x0a
    42ae:	e3 86       	std	Z+11, r14	; 0x0b

	_mode       = FRIDGE_CONSTANT;
    42b0:	15 8a       	std	Z+21, r1	; 0x15
    42b2:	14 8a       	std	Z+20, r1	; 0x14
	_state		= STARTUP;
    42b4:	84 e0       	ldi	r24, 0x04	; 4
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	93 8b       	std	Z+19, r25	; 0x13
    42ba:	82 8b       	std	Z+18, r24	; 0x12

	InitializePIDControl();
    42bc:	c8 01       	movw	r24, r16
    42be:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_ZN11TempControl20InitializePIDControlEv>
	UpdatePIDSettings();
    42c2:	c8 01       	movw	r24, r16
    42c4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <_ZN11TempControl17UpdatePIDSettingsEv>

	_lastCoolTime = 0;
    42c8:	f8 01       	movw	r30, r16
    42ca:	12 a2       	std	Z+34, r1	; 0x22
    42cc:	13 a2       	std	Z+35, r1	; 0x23
    42ce:	14 a2       	std	Z+36, r1	; 0x24
    42d0:	15 a2       	std	Z+37, r1	; 0x25
	_lastHeatTime = 0;
    42d2:	16 a2       	std	Z+38, r1	; 0x26
    42d4:	17 a2       	std	Z+39, r1	; 0x27
    42d6:	10 a6       	std	Z+40, r1	; 0x28
    42d8:	11 a6       	std	Z+41, r1	; 0x29
	_lastIdleTime = 0;
    42da:	12 a6       	std	Z+42, r1	; 0x2a
    42dc:	13 a6       	std	Z+43, r1	; 0x2b
    42de:	14 a6       	std	Z+44, r1	; 0x2c
    42e0:	15 a6       	std	Z+45, r1	; 0x2d

	_doNegPeakDetect = false;
    42e2:	12 aa       	std	Z+50, r1	; 0x32
	_doPosPeakDetect = false;
    42e4:	13 aa       	std	Z+51, r1	; 0x33
	_negPeak         = STARTUP_TEMP_DEFAULT - 1;
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	a9 e7       	ldi	r26, 0x79	; 121
    42ec:	b3 e4       	ldi	r27, 0x43	; 67
    42ee:	80 af       	std	Z+56, r24	; 0x38
    42f0:	91 af       	std	Z+57, r25	; 0x39
    42f2:	a2 af       	std	Z+58, r26	; 0x3a
    42f4:	b3 af       	std	Z+59, r27	; 0x3b
	_posPeak		 = STARTUP_TEMP_DEFAULT + 1;
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	ab e7       	ldi	r26, 0x7B	; 123
    42fc:	b3 e4       	ldi	r27, 0x43	; 67
    42fe:	84 ab       	std	Z+52, r24	; 0x34
    4300:	95 ab       	std	Z+53, r25	; 0x35
    4302:	a6 ab       	std	Z+54, r26	; 0x36
    4304:	b7 ab       	std	Z+55, r27	; 0x37

	_heatOvershootEstimator = 0.2;
    4306:	0c 5b       	subi	r16, 0xBC	; 188
    4308:	1f 4f       	sbci	r17, 0xFF	; 255
    430a:	8d ec       	ldi	r24, 0xCD	; 205
    430c:	9c ec       	ldi	r25, 0xCC	; 204
    430e:	ac e4       	ldi	r26, 0x4C	; 76
    4310:	be e3       	ldi	r27, 0x3E	; 62
    4312:	f8 01       	movw	r30, r16
    4314:	81 93       	st	Z+, r24
    4316:	91 93       	st	Z+, r25
    4318:	a1 93       	st	Z+, r26
    431a:	b1 93       	st	Z+, r27
    431c:	8f 01       	movw	r16, r30
	_coolOvershootEstimator = 5;
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	a0 ea       	ldi	r26, 0xA0	; 160
    4324:	b0 e4       	ldi	r27, 0x40	; 64
    4326:	80 83       	st	Z, r24
    4328:	91 83       	std	Z+1, r25	; 0x01
    432a:	a2 83       	std	Z+2, r26	; 0x02
    432c:	b3 83       	std	Z+3, r27	; 0x03
    432e:	08 54       	subi	r16, 0x48	; 72
    4330:	10 40       	sbci	r17, 0x00	; 0

	_timer        = 0;
    4332:	f8 01       	movw	r30, r16
    4334:	16 86       	std	Z+14, r1	; 0x0e
    4336:	17 86       	std	Z+15, r1	; 0x0f
    4338:	10 8a       	std	Z+16, r1	; 0x10
    433a:	11 8a       	std	Z+17, r1	; 0x11
}
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	ff 90       	pop	r15
    4342:	ef 90       	pop	r14
    4344:	08 95       	ret

00004346 <_GLOBAL__I_oneWire>:
	int newMs = millis();
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
		return;
	_sensors->requestTemperatures();
	_lastTempRequest = newMs;
}
    4346:	0f 93       	push	r16
    4348:	1f 93       	push	r17

#define ONE_WIRE_BUS 12

// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    434a:	01 ed       	ldi	r16, 0xD1	; 209
    434c:	12 e0       	ldi	r17, 0x02	; 2
    434e:	c8 01       	movw	r24, r16
    4350:	6c e0       	ldi	r22, 0x0C	; 12
    4352:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    4356:	8f ed       	ldi	r24, 0xDF	; 223
    4358:	92 e0       	ldi	r25, 0x02	; 2
    435a:	b8 01       	movw	r22, r16
    435c:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN17DallasTemperatureC1EP7OneWire>
	int newMs = millis();
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
		return;
	_sensors->requestTemperatures();
	_lastTempRequest = newMs;
}
    4360:	1f 91       	pop	r17
    4362:	0f 91       	pop	r16
    4364:	08 95       	ret

00004366 <_ZN11TempSensors11requestTempEv>:
	  Serial.print(" = ");
	  Serial.print(CurrentTemp);
	  Serial.println((char)248);	// ASCII 248 = degree symbol
}

void TempSensors::requestTemp()
    4366:	ef 92       	push	r14
    4368:	ff 92       	push	r15
    436a:	0f 93       	push	r16
    436c:	1f 93       	push	r17
    436e:	cf 93       	push	r28
    4370:	df 93       	push	r29
    4372:	ec 01       	movw	r28, r24
{
	int newMs = millis();
    4374:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <millis>
    4378:	7b 01       	movw	r14, r22
    437a:	8c 01       	movw	r16, r24
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
    437c:	80 91 f2 02 	lds	r24, 0x02F2
    4380:	90 91 f3 02 	lds	r25, 0x02F3
    4384:	97 01       	movw	r18, r14
    4386:	28 1b       	sub	r18, r24
    4388:	39 0b       	sbc	r19, r25
    438a:	c9 01       	movw	r24, r18
    438c:	84 58       	subi	r24, 0x84	; 132
    438e:	93 40       	sbci	r25, 0x03	; 3
    4390:	44 f0       	brlt	.+16     	; 0x43a2 <_ZN11TempSensors11requestTempEv+0x3c>
		return;
	_sensors->requestTemperatures();
    4392:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4394:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4396:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <_ZN17DallasTemperature19requestTemperaturesEv>
	_lastTempRequest = newMs;
    439a:	f0 92 f3 02 	sts	0x02F3, r15
    439e:	e0 92 f2 02 	sts	0x02F2, r14
}
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	ff 90       	pop	r15
    43ac:	ef 90       	pop	r14
    43ae:	08 95       	ret

000043b0 <_ZN11TempSensors14GetTemperatureEv>:
				_sensorAddr[5],
				_sensorAddr[6],
				_sensorAddr[7]);
}

float TempSensors::GetTemperature()
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	8c 01       	movw	r16, r24
{
//	Serial.print("Requesting Temp for: ");
//	Serial.print(Name);
//	Serial.print(" ");
	requestTemp();
    43b6:	0e 94 b3 21 	call	0x4366	; 0x4366 <_ZN11TempSensors11requestTempEv>
	CurrentTemp = _sensors->getTempCByIndex(SensorIndex) * 10;
    43ba:	f8 01       	movw	r30, r16
    43bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    43be:	95 8d       	ldd	r25, Z+29	; 0x1d
    43c0:	60 8d       	ldd	r22, Z+24	; 0x18
    43c2:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN17DallasTemperature15getTempCByIndexEh>
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	40 e2       	ldi	r20, 0x20	; 32
    43cc:	51 e4       	ldi	r21, 0x41	; 65
    43ce:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    43d2:	9b 01       	movw	r18, r22
    43d4:	ac 01       	movw	r20, r24
    43d6:	f8 01       	movw	r30, r16
    43d8:	20 83       	st	Z, r18
    43da:	31 83       	std	Z+1, r19	; 0x01
    43dc:	42 83       	std	Z+2, r20	; 0x02
    43de:	53 83       	std	Z+3, r21	; 0x03
//	Serial.println(CurrentTemp);
	return CurrentTemp;
}
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	08 95       	ret

000043e6 <_ZN11TempSensorsC1EPKch>:

//Required to support the static member
int TempSensors::_lastTempRequest;

// TempSensors::TempSensors(const char *initName, uint8_t initIndex, DallasTemperature *sensors) {
TempSensors::TempSensors(const char *initName, uint8_t initIndex) {
    43e6:	bf 92       	push	r11
    43e8:	cf 92       	push	r12
    43ea:	df 92       	push	r13
    43ec:	ef 92       	push	r14
    43ee:	ff 92       	push	r15
    43f0:	0f 93       	push	r16
    43f2:	1f 93       	push	r17
    43f4:	8c 01       	movw	r16, r24
    43f6:	6b 01       	movw	r12, r22
    43f8:	b4 2e       	mov	r11, r20
	// Setup a oneWire instance to communicate with any OneWire devices
	// (not just Maxim/Dallas temperature ICs)
	_onewire = new OneWire(ONE_WIRE_BUS);
    43fa:	8e e0       	ldi	r24, 0x0E	; 14
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    4402:	f8 2e       	mov	r15, r24
    4404:	e9 2e       	mov	r14, r25
    4406:	6c e0       	ldi	r22, 0x0C	; 12
    4408:	0e 94 3a 0a 	call	0x1474	; 0x1474 <_ZN7OneWireC1Eh>
    440c:	f8 01       	movw	r30, r16
    440e:	f2 8e       	std	Z+26, r15	; 0x1a
    4410:	e3 8e       	std	Z+27, r14	; 0x1b

	// Pass our oneWire reference to Dallas Temperature.
    _sensors = new DallasTemperature(_onewire);
    4412:	83 e1       	ldi	r24, 0x13	; 19
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <_Znwj>
    441a:	f8 2e       	mov	r15, r24
    441c:	e9 2e       	mov	r14, r25
    441e:	f8 01       	movw	r30, r16
    4420:	62 8d       	ldd	r22, Z+26	; 0x1a
    4422:	73 8d       	ldd	r23, Z+27	; 0x1b
    4424:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN17DallasTemperatureC1EP7OneWire>
    4428:	f8 01       	movw	r30, r16
    442a:	f4 8e       	std	Z+28, r15	; 0x1c
    442c:	e5 8e       	std	Z+29, r14	; 0x1d

	// Start up the DS18B20 library
	_sensors->begin();
    442e:	8f 2d       	mov	r24, r15
    4430:	9e 2d       	mov	r25, r14
    4432:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN17DallasTemperature5beginEv>
	// Set DS18B20 resolution to:
	//   9bit = 0.5C,    93.75ms time to convert (tCONV/8)
	//  10bit = 0.25C,  187.5ms  time to convert (tCONV/4)
	//  11bit = 0.125C  375ms    time to convert (tCONV/2)
	//  12bit = 0.0625C 750ms    time to convert
	_sensors->setResolution(10);
    4436:	f8 01       	movw	r30, r16
    4438:	84 8d       	ldd	r24, Z+28	; 0x1c
    443a:	95 8d       	ldd	r25, Z+29	; 0x1d
    443c:	6a e0       	ldi	r22, 0x0A	; 10
    443e:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN17DallasTemperature13setResolutionEh>



	CurrentTemp = 0;
    4442:	f8 01       	movw	r30, r16
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	a0 e0       	ldi	r26, 0x00	; 0
    444a:	b0 e0       	ldi	r27, 0x00	; 0
    444c:	81 93       	st	Z+, r24
    444e:	91 93       	st	Z+, r25
    4450:	a1 93       	st	Z+, r26
    4452:	b1 93       	st	Z+, r27
	strncpy(Name, initName, 20);
    4454:	cf 01       	movw	r24, r30
    4456:	b6 01       	movw	r22, r12
    4458:	44 e1       	ldi	r20, 0x14	; 20
    445a:	50 e0       	ldi	r21, 0x00	; 0
    445c:	0e 94 26 02 	call	0x44c	; 0x44c <strncpy>
	SensorIndex = initIndex;
    4460:	f8 01       	movw	r30, r16
    4462:	b0 8e       	std	Z+24, r11	; 0x18
	_resolution = 9;
    4464:	89 e0       	ldi	r24, 0x09	; 9
    4466:	81 8f       	std	Z+25, r24	; 0x19
	_sensors->getAddress(_sensorAddr, SensorIndex);
    4468:	b8 01       	movw	r22, r16
    446a:	62 5e       	subi	r22, 0xE2	; 226
    446c:	7f 4f       	sbci	r23, 0xFF	; 255
    446e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4470:	95 8d       	ldd	r25, Z+29	; 0x1d
    4472:	4b 2d       	mov	r20, r11
    4474:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN17DallasTemperature10getAddressEPhh>
	_sensors->setResolution(_resolution);
    4478:	f8 01       	movw	r30, r16
    447a:	84 8d       	ldd	r24, Z+28	; 0x1c
    447c:	95 8d       	ldd	r25, Z+29	; 0x1d
    447e:	61 8d       	ldd	r22, Z+25	; 0x19
    4480:	0e 94 bf 05 	call	0xb7e	; 0xb7e <_ZN17DallasTemperature13setResolutionEh>
}
    4484:	1f 91       	pop	r17
    4486:	0f 91       	pop	r16
    4488:	ff 90       	pop	r15
    448a:	ef 90       	pop	r14
    448c:	df 90       	pop	r13
    448e:	cf 90       	pop	r12
    4490:	bf 90       	pop	r11
    4492:	08 95       	ret

00004494 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    4494:	08 95       	ret

00004496 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    4496:	1f 92       	push	r1
    4498:	0f 92       	push	r0
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	0f 92       	push	r0
    449e:	11 24       	eor	r1, r1
    44a0:	2f 93       	push	r18
    44a2:	3f 93       	push	r19
    44a4:	4f 93       	push	r20
    44a6:	8f 93       	push	r24
    44a8:	9f 93       	push	r25
    44aa:	ef 93       	push	r30
    44ac:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    44ae:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    44b2:	20 91 34 03 	lds	r18, 0x0334
    44b6:	30 91 35 03 	lds	r19, 0x0335

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    44ba:	2f 5f       	subi	r18, 0xFF	; 255
    44bc:	3f 4f       	sbci	r19, 0xFF	; 255
    44be:	2f 73       	andi	r18, 0x3F	; 63
    44c0:	30 70       	andi	r19, 0x00	; 0
    44c2:	80 91 36 03 	lds	r24, 0x0336
    44c6:	90 91 37 03 	lds	r25, 0x0337
    44ca:	28 17       	cp	r18, r24
    44cc:	39 07       	cpc	r19, r25
    44ce:	59 f0       	breq	.+22     	; 0x44e6 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    44d0:	e0 91 34 03 	lds	r30, 0x0334
    44d4:	f0 91 35 03 	lds	r31, 0x0335
    44d8:	ec 50       	subi	r30, 0x0C	; 12
    44da:	fd 4f       	sbci	r31, 0xFD	; 253
    44dc:	40 83       	st	Z, r20
    buffer->head = i;
    44de:	30 93 35 03 	sts	0x0335, r19
    44e2:	20 93 34 03 	sts	0x0334, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    44e6:	ff 91       	pop	r31
    44e8:	ef 91       	pop	r30
    44ea:	9f 91       	pop	r25
    44ec:	8f 91       	pop	r24
    44ee:	4f 91       	pop	r20
    44f0:	3f 91       	pop	r19
    44f2:	2f 91       	pop	r18
    44f4:	0f 90       	pop	r0
    44f6:	0f be       	out	0x3f, r0	; 63
    44f8:	0f 90       	pop	r0
    44fa:	1f 90       	pop	r1
    44fc:	18 95       	reti

000044fe <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    44fe:	e0 91 88 03 	lds	r30, 0x0388
    4502:	f0 91 89 03 	lds	r31, 0x0389
    4506:	e0 5c       	subi	r30, 0xC0	; 192
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	81 91       	ld	r24, Z+
    450c:	91 91       	ld	r25, Z+
    450e:	20 81       	ld	r18, Z
    4510:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4512:	82 1b       	sub	r24, r18
    4514:	93 0b       	sbc	r25, r19
    4516:	8f 73       	andi	r24, 0x3F	; 63
    4518:	90 70       	andi	r25, 0x00	; 0
    451a:	89 2b       	or	r24, r25
    451c:	11 f0       	breq	.+4      	; 0x4522 <_Z14serialEventRunv+0x24>
    451e:	0e 94 4a 22 	call	0x4494	; 0x4494 <_Z11serialEventv>
    4522:	08 95       	ret

00004524 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4524:	1f 92       	push	r1
    4526:	0f 92       	push	r0
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	0f 92       	push	r0
    452c:	11 24       	eor	r1, r1
    452e:	2f 93       	push	r18
    4530:	3f 93       	push	r19
    4532:	8f 93       	push	r24
    4534:	9f 93       	push	r25
    4536:	ef 93       	push	r30
    4538:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    453a:	20 91 78 03 	lds	r18, 0x0378
    453e:	30 91 79 03 	lds	r19, 0x0379
    4542:	80 91 7a 03 	lds	r24, 0x037A
    4546:	90 91 7b 03 	lds	r25, 0x037B
    454a:	28 17       	cp	r18, r24
    454c:	39 07       	cpc	r19, r25
    454e:	31 f4       	brne	.+12     	; 0x455c <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4550:	80 91 c1 00 	lds	r24, 0x00C1
    4554:	8f 7d       	andi	r24, 0xDF	; 223
    4556:	80 93 c1 00 	sts	0x00C1, r24
    455a:	14 c0       	rjmp	.+40     	; 0x4584 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    455c:	e0 91 7a 03 	lds	r30, 0x037A
    4560:	f0 91 7b 03 	lds	r31, 0x037B
    4564:	e8 5c       	subi	r30, 0xC8	; 200
    4566:	fc 4f       	sbci	r31, 0xFC	; 252
    4568:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    456a:	80 91 7a 03 	lds	r24, 0x037A
    456e:	90 91 7b 03 	lds	r25, 0x037B
    4572:	01 96       	adiw	r24, 0x01	; 1
    4574:	8f 73       	andi	r24, 0x3F	; 63
    4576:	90 70       	andi	r25, 0x00	; 0
    4578:	90 93 7b 03 	sts	0x037B, r25
    457c:	80 93 7a 03 	sts	0x037A, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4580:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4584:	ff 91       	pop	r31
    4586:	ef 91       	pop	r30
    4588:	9f 91       	pop	r25
    458a:	8f 91       	pop	r24
    458c:	3f 91       	pop	r19
    458e:	2f 91       	pop	r18
    4590:	0f 90       	pop	r0
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	0f 90       	pop	r0
    4596:	1f 90       	pop	r1
    4598:	18 95       	reti

0000459a <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    459a:	af 92       	push	r10
    459c:	bf 92       	push	r11
    459e:	df 92       	push	r13
    45a0:	ef 92       	push	r14
    45a2:	ff 92       	push	r15
    45a4:	0f 93       	push	r16
    45a6:	1f 93       	push	r17
    45a8:	cf 93       	push	r28
    45aa:	df 93       	push	r29
    45ac:	ec 01       	movw	r28, r24
    45ae:	7a 01       	movw	r14, r20
    45b0:	8b 01       	movw	r16, r22
    45b2:	dd 24       	eor	r13, r13
    45b4:	40 30       	cpi	r20, 0x00	; 0
    45b6:	81 ee       	ldi	r24, 0xE1	; 225
    45b8:	58 07       	cpc	r21, r24
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	68 07       	cpc	r22, r24
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	78 07       	cpc	r23, r24
    45c2:	11 f0       	breq	.+4      	; 0x45c8 <_ZN14HardwareSerial5beginEm+0x2e>
    45c4:	dd 24       	eor	r13, r13
    45c6:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	a9 2e       	mov	r10, r25
    45cc:	b1 2c       	mov	r11, r1
    45ce:	ec 89       	ldd	r30, Y+20	; 0x14
    45d0:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    45d2:	dd 20       	and	r13, r13
    45d4:	69 f0       	breq	.+26     	; 0x45f0 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    45d6:	c5 01       	movw	r24, r10
    45d8:	0e 8c       	ldd	r0, Y+30	; 0x1e
    45da:	02 c0       	rjmp	.+4      	; 0x45e0 <_ZN14HardwareSerial5beginEm+0x46>
    45dc:	88 0f       	add	r24, r24
    45de:	99 1f       	adc	r25, r25
    45e0:	0a 94       	dec	r0
    45e2:	e2 f7       	brpl	.-8      	; 0x45dc <_ZN14HardwareSerial5beginEm+0x42>
    45e4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    45e6:	60 e0       	ldi	r22, 0x00	; 0
    45e8:	79 e0       	ldi	r23, 0x09	; 9
    45ea:	8d e3       	ldi	r24, 0x3D	; 61
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	05 c0       	rjmp	.+10     	; 0x45fa <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    45f0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    45f2:	60 e8       	ldi	r22, 0x80	; 128
    45f4:	74 e8       	ldi	r23, 0x84	; 132
    45f6:	8e e1       	ldi	r24, 0x1E	; 30
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	a8 01       	movw	r20, r16
    45fc:	97 01       	movw	r18, r14
    45fe:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    4602:	21 50       	subi	r18, 0x01	; 1
    4604:	30 40       	sbci	r19, 0x00	; 0
    4606:	40 40       	sbci	r20, 0x00	; 0
    4608:	50 40       	sbci	r21, 0x00	; 0
    460a:	56 95       	lsr	r21
    460c:	47 95       	ror	r20
    460e:	37 95       	ror	r19
    4610:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4612:	80 e1       	ldi	r24, 0x10	; 16
    4614:	20 30       	cpi	r18, 0x00	; 0
    4616:	38 07       	cpc	r19, r24
    4618:	20 f0       	brcs	.+8      	; 0x4622 <_ZN14HardwareSerial5beginEm+0x88>
    461a:	dd 20       	and	r13, r13
    461c:	11 f0       	breq	.+4      	; 0x4622 <_ZN14HardwareSerial5beginEm+0x88>
    461e:	dd 24       	eor	r13, r13
    4620:	d6 cf       	rjmp	.-84     	; 0x45ce <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4622:	e8 89       	ldd	r30, Y+16	; 0x10
    4624:	f9 89       	ldd	r31, Y+17	; 0x11
    4626:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4628:	ea 89       	ldd	r30, Y+18	; 0x12
    462a:	fb 89       	ldd	r31, Y+19	; 0x13
    462c:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    462e:	ee 89       	ldd	r30, Y+22	; 0x16
    4630:	ff 89       	ldd	r31, Y+23	; 0x17
    4632:	40 81       	ld	r20, Z
    4634:	21 e0       	ldi	r18, 0x01	; 1
    4636:	30 e0       	ldi	r19, 0x00	; 0
    4638:	c9 01       	movw	r24, r18
    463a:	0a 8c       	ldd	r0, Y+26	; 0x1a
    463c:	02 c0       	rjmp	.+4      	; 0x4642 <_ZN14HardwareSerial5beginEm+0xa8>
    463e:	88 0f       	add	r24, r24
    4640:	99 1f       	adc	r25, r25
    4642:	0a 94       	dec	r0
    4644:	e2 f7       	brpl	.-8      	; 0x463e <_ZN14HardwareSerial5beginEm+0xa4>
    4646:	48 2b       	or	r20, r24
    4648:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    464a:	ee 89       	ldd	r30, Y+22	; 0x16
    464c:	ff 89       	ldd	r31, Y+23	; 0x17
    464e:	40 81       	ld	r20, Z
    4650:	c9 01       	movw	r24, r18
    4652:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4654:	02 c0       	rjmp	.+4      	; 0x465a <_ZN14HardwareSerial5beginEm+0xc0>
    4656:	88 0f       	add	r24, r24
    4658:	99 1f       	adc	r25, r25
    465a:	0a 94       	dec	r0
    465c:	e2 f7       	brpl	.-8      	; 0x4656 <_ZN14HardwareSerial5beginEm+0xbc>
    465e:	48 2b       	or	r20, r24
    4660:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4662:	ee 89       	ldd	r30, Y+22	; 0x16
    4664:	ff 89       	ldd	r31, Y+23	; 0x17
    4666:	40 81       	ld	r20, Z
    4668:	c9 01       	movw	r24, r18
    466a:	0c 8c       	ldd	r0, Y+28	; 0x1c
    466c:	02 c0       	rjmp	.+4      	; 0x4672 <_ZN14HardwareSerial5beginEm+0xd8>
    466e:	88 0f       	add	r24, r24
    4670:	99 1f       	adc	r25, r25
    4672:	0a 94       	dec	r0
    4674:	e2 f7       	brpl	.-8      	; 0x466e <_ZN14HardwareSerial5beginEm+0xd4>
    4676:	48 2b       	or	r20, r24
    4678:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    467a:	ee 89       	ldd	r30, Y+22	; 0x16
    467c:	ff 89       	ldd	r31, Y+23	; 0x17
    467e:	80 81       	ld	r24, Z
    4680:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4682:	02 c0       	rjmp	.+4      	; 0x4688 <_ZN14HardwareSerial5beginEm+0xee>
    4684:	22 0f       	add	r18, r18
    4686:	33 1f       	adc	r19, r19
    4688:	0a 94       	dec	r0
    468a:	e2 f7       	brpl	.-8      	; 0x4684 <_ZN14HardwareSerial5beginEm+0xea>
    468c:	20 95       	com	r18
    468e:	28 23       	and	r18, r24
    4690:	20 83       	st	Z, r18
}
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	df 90       	pop	r13
    46a0:	bf 90       	pop	r11
    46a2:	af 90       	pop	r10
    46a4:	08 95       	ret

000046a6 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    46a6:	dc 01       	movw	r26, r24
    46a8:	1c 96       	adiw	r26, 0x0c	; 12
    46aa:	ed 91       	ld	r30, X+
    46ac:	fc 91       	ld	r31, X
    46ae:	1d 97       	sbiw	r26, 0x0d	; 13
    46b0:	e0 5c       	subi	r30, 0xC0	; 192
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	21 91       	ld	r18, Z+
    46b6:	31 91       	ld	r19, Z+
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	28 1b       	sub	r18, r24
    46be:	39 0b       	sbc	r19, r25
    46c0:	2f 73       	andi	r18, 0x3F	; 63
    46c2:	30 70       	andi	r19, 0x00	; 0
}
    46c4:	c9 01       	movw	r24, r18
    46c6:	08 95       	ret

000046c8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    46c8:	dc 01       	movw	r26, r24
    46ca:	1c 96       	adiw	r26, 0x0c	; 12
    46cc:	ed 91       	ld	r30, X+
    46ce:	fc 91       	ld	r31, X
    46d0:	1d 97       	sbiw	r26, 0x0d	; 13
    46d2:	e0 5c       	subi	r30, 0xC0	; 192
    46d4:	ff 4f       	sbci	r31, 0xFF	; 255
    46d6:	20 81       	ld	r18, Z
    46d8:	31 81       	ldd	r19, Z+1	; 0x01
    46da:	e0 54       	subi	r30, 0x40	; 64
    46dc:	f0 40       	sbci	r31, 0x00	; 0
    46de:	df 01       	movw	r26, r30
    46e0:	ae 5b       	subi	r26, 0xBE	; 190
    46e2:	bf 4f       	sbci	r27, 0xFF	; 255
    46e4:	8d 91       	ld	r24, X+
    46e6:	9c 91       	ld	r25, X
    46e8:	11 97       	sbiw	r26, 0x01	; 1
    46ea:	28 17       	cp	r18, r24
    46ec:	39 07       	cpc	r19, r25
    46ee:	19 f4       	brne	.+6      	; 0x46f6 <_ZN14HardwareSerial4peekEv+0x2e>
    46f0:	2f ef       	ldi	r18, 0xFF	; 255
    46f2:	3f ef       	ldi	r19, 0xFF	; 255
    46f4:	07 c0       	rjmp	.+14     	; 0x4704 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    46f6:	8d 91       	ld	r24, X+
    46f8:	9c 91       	ld	r25, X
    46fa:	e8 0f       	add	r30, r24
    46fc:	f9 1f       	adc	r31, r25
    46fe:	80 81       	ld	r24, Z
    4700:	28 2f       	mov	r18, r24
    4702:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4704:	c9 01       	movw	r24, r18
    4706:	08 95       	ret

00004708 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4708:	dc 01       	movw	r26, r24
    470a:	1c 96       	adiw	r26, 0x0c	; 12
    470c:	ed 91       	ld	r30, X+
    470e:	fc 91       	ld	r31, X
    4710:	1d 97       	sbiw	r26, 0x0d	; 13
    4712:	e0 5c       	subi	r30, 0xC0	; 192
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	20 81       	ld	r18, Z
    4718:	31 81       	ldd	r19, Z+1	; 0x01
    471a:	e0 54       	subi	r30, 0x40	; 64
    471c:	f0 40       	sbci	r31, 0x00	; 0
    471e:	df 01       	movw	r26, r30
    4720:	ae 5b       	subi	r26, 0xBE	; 190
    4722:	bf 4f       	sbci	r27, 0xFF	; 255
    4724:	8d 91       	ld	r24, X+
    4726:	9c 91       	ld	r25, X
    4728:	11 97       	sbiw	r26, 0x01	; 1
    472a:	28 17       	cp	r18, r24
    472c:	39 07       	cpc	r19, r25
    472e:	19 f4       	brne	.+6      	; 0x4736 <_ZN14HardwareSerial4readEv+0x2e>
    4730:	2f ef       	ldi	r18, 0xFF	; 255
    4732:	3f ef       	ldi	r19, 0xFF	; 255
    4734:	10 c0       	rjmp	.+32     	; 0x4756 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4736:	8d 91       	ld	r24, X+
    4738:	9c 91       	ld	r25, X
    473a:	11 97       	sbiw	r26, 0x01	; 1
    473c:	e8 0f       	add	r30, r24
    473e:	f9 1f       	adc	r31, r25
    4740:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4742:	8d 91       	ld	r24, X+
    4744:	9c 91       	ld	r25, X
    4746:	11 97       	sbiw	r26, 0x01	; 1
    4748:	01 96       	adiw	r24, 0x01	; 1
    474a:	8f 73       	andi	r24, 0x3F	; 63
    474c:	90 70       	andi	r25, 0x00	; 0
    474e:	11 96       	adiw	r26, 0x01	; 1
    4750:	9c 93       	st	X, r25
    4752:	8e 93       	st	-X, r24
    return c;
    4754:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4756:	c9 01       	movw	r24, r18
    4758:	08 95       	ret

0000475a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    475a:	fc 01       	movw	r30, r24
    475c:	86 85       	ldd	r24, Z+14	; 0x0e
    475e:	97 85       	ldd	r25, Z+15	; 0x0f
    4760:	dc 01       	movw	r26, r24
    4762:	a0 5c       	subi	r26, 0xC0	; 192
    4764:	bf 4f       	sbci	r27, 0xFF	; 255
    4766:	fc 01       	movw	r30, r24
    4768:	ee 5b       	subi	r30, 0xBE	; 190
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	2d 91       	ld	r18, X+
    476e:	3c 91       	ld	r19, X
    4770:	11 97       	sbiw	r26, 0x01	; 1
    4772:	80 81       	ld	r24, Z
    4774:	91 81       	ldd	r25, Z+1	; 0x01
    4776:	28 17       	cp	r18, r24
    4778:	39 07       	cpc	r19, r25
    477a:	c1 f7       	brne	.-16     	; 0x476c <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    477c:	08 95       	ret

0000477e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    477e:	cf 93       	push	r28
    4780:	df 93       	push	r29
    4782:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4784:	ee 85       	ldd	r30, Y+14	; 0x0e
    4786:	ff 85       	ldd	r31, Y+15	; 0x0f
    4788:	e0 5c       	subi	r30, 0xC0	; 192
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	20 81       	ld	r18, Z
    478e:	31 81       	ldd	r19, Z+1	; 0x01
    4790:	e0 54       	subi	r30, 0x40	; 64
    4792:	f0 40       	sbci	r31, 0x00	; 0
    4794:	2f 5f       	subi	r18, 0xFF	; 255
    4796:	3f 4f       	sbci	r19, 0xFF	; 255
    4798:	2f 73       	andi	r18, 0x3F	; 63
    479a:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    479c:	df 01       	movw	r26, r30
    479e:	ae 5b       	subi	r26, 0xBE	; 190
    47a0:	bf 4f       	sbci	r27, 0xFF	; 255
    47a2:	8d 91       	ld	r24, X+
    47a4:	9c 91       	ld	r25, X
    47a6:	11 97       	sbiw	r26, 0x01	; 1
    47a8:	28 17       	cp	r18, r24
    47aa:	39 07       	cpc	r19, r25
    47ac:	d1 f3       	breq	.-12     	; 0x47a2 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    47ae:	e0 5c       	subi	r30, 0xC0	; 192
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	e0 54       	subi	r30, 0x40	; 64
    47b8:	f0 40       	sbci	r31, 0x00	; 0
    47ba:	e8 0f       	add	r30, r24
    47bc:	f9 1f       	adc	r31, r25
    47be:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    47c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    47c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    47c4:	e0 5c       	subi	r30, 0xC0	; 192
    47c6:	ff 4f       	sbci	r31, 0xFF	; 255
    47c8:	31 83       	std	Z+1, r19	; 0x01
    47ca:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    47cc:	ee 89       	ldd	r30, Y+22	; 0x16
    47ce:	ff 89       	ldd	r31, Y+23	; 0x17
    47d0:	20 81       	ld	r18, Z
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    47d8:	02 c0       	rjmp	.+4      	; 0x47de <_ZN14HardwareSerial5writeEh+0x60>
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	0a 94       	dec	r0
    47e0:	e2 f7       	brpl	.-8      	; 0x47da <_ZN14HardwareSerial5writeEh+0x5c>
    47e2:	28 2b       	or	r18, r24
    47e4:	20 83       	st	Z, r18
  
  return 1;
}
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	08 95       	ret

000047f0 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    47f0:	10 92 7f 03 	sts	0x037F, r1
    47f4:	10 92 7e 03 	sts	0x037E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    47f8:	88 ee       	ldi	r24, 0xE8	; 232
    47fa:	93 e0       	ldi	r25, 0x03	; 3
    47fc:	a0 e0       	ldi	r26, 0x00	; 0
    47fe:	b0 e0       	ldi	r27, 0x00	; 0
    4800:	80 93 80 03 	sts	0x0380, r24
    4804:	90 93 81 03 	sts	0x0381, r25
    4808:	a0 93 82 03 	sts	0x0382, r26
    480c:	b0 93 83 03 	sts	0x0383, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4810:	8e e6       	ldi	r24, 0x6E	; 110
    4812:	92 e0       	ldi	r25, 0x02	; 2
    4814:	90 93 7d 03 	sts	0x037D, r25
    4818:	80 93 7c 03 	sts	0x037C, r24
{
  _rx_buffer = rx_buffer;
    481c:	84 ef       	ldi	r24, 0xF4	; 244
    481e:	92 e0       	ldi	r25, 0x02	; 2
    4820:	90 93 89 03 	sts	0x0389, r25
    4824:	80 93 88 03 	sts	0x0388, r24
  _tx_buffer = tx_buffer;
    4828:	88 e3       	ldi	r24, 0x38	; 56
    482a:	93 e0       	ldi	r25, 0x03	; 3
    482c:	90 93 8b 03 	sts	0x038B, r25
    4830:	80 93 8a 03 	sts	0x038A, r24
  _ubrrh = ubrrh;
    4834:	85 ec       	ldi	r24, 0xC5	; 197
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	90 93 8d 03 	sts	0x038D, r25
    483c:	80 93 8c 03 	sts	0x038C, r24
  _ubrrl = ubrrl;
    4840:	84 ec       	ldi	r24, 0xC4	; 196
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	90 93 8f 03 	sts	0x038F, r25
    4848:	80 93 8e 03 	sts	0x038E, r24
  _ucsra = ucsra;
    484c:	80 ec       	ldi	r24, 0xC0	; 192
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	90 93 91 03 	sts	0x0391, r25
    4854:	80 93 90 03 	sts	0x0390, r24
  _ucsrb = ucsrb;
    4858:	81 ec       	ldi	r24, 0xC1	; 193
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	90 93 93 03 	sts	0x0393, r25
    4860:	80 93 92 03 	sts	0x0392, r24
  _udr = udr;
    4864:	86 ec       	ldi	r24, 0xC6	; 198
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	90 93 95 03 	sts	0x0395, r25
    486c:	80 93 94 03 	sts	0x0394, r24
  _rxen = rxen;
    4870:	84 e0       	ldi	r24, 0x04	; 4
    4872:	80 93 96 03 	sts	0x0396, r24
  _txen = txen;
    4876:	83 e0       	ldi	r24, 0x03	; 3
    4878:	80 93 97 03 	sts	0x0397, r24
  _rxcie = rxcie;
    487c:	87 e0       	ldi	r24, 0x07	; 7
    487e:	80 93 98 03 	sts	0x0398, r24
  _udrie = udrie;
    4882:	85 e0       	ldi	r24, 0x05	; 5
    4884:	80 93 99 03 	sts	0x0399, r24
  _u2x = u2x;
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	80 93 9a 03 	sts	0x039A, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    488e:	08 95       	ret

00004890 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    4890:	cf 92       	push	r12
    4892:	df 92       	push	r13
    4894:	ef 92       	push	r14
    4896:	ff 92       	push	r15
    4898:	0f 93       	push	r16
    489a:	1f 93       	push	r17
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	7c 01       	movw	r14, r24
    48a2:	6b 01       	movw	r12, r22
    48a4:	8a 01       	movw	r16, r20
    48a6:	c0 e0       	ldi	r28, 0x00	; 0
    48a8:	d0 e0       	ldi	r29, 0x00	; 0
    48aa:	0f c0       	rjmp	.+30     	; 0x48ca <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    48ac:	d6 01       	movw	r26, r12
    48ae:	6d 91       	ld	r22, X+
    48b0:	6d 01       	movw	r12, r26
    48b2:	d7 01       	movw	r26, r14
    48b4:	ed 91       	ld	r30, X+
    48b6:	fc 91       	ld	r31, X
    48b8:	01 90       	ld	r0, Z+
    48ba:	f0 81       	ld	r31, Z
    48bc:	e0 2d       	mov	r30, r0
    48be:	c7 01       	movw	r24, r14
    48c0:	09 95       	icall
    48c2:	c8 0f       	add	r28, r24
    48c4:	d9 1f       	adc	r29, r25
    48c6:	01 50       	subi	r16, 0x01	; 1
    48c8:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    48ca:	01 15       	cp	r16, r1
    48cc:	11 05       	cpc	r17, r1
    48ce:	71 f7       	brne	.-36     	; 0x48ac <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    48d0:	ce 01       	movw	r24, r28
    48d2:	df 91       	pop	r29
    48d4:	cf 91       	pop	r28
    48d6:	1f 91       	pop	r17
    48d8:	0f 91       	pop	r16
    48da:	ff 90       	pop	r15
    48dc:	ef 90       	pop	r14
    48de:	df 90       	pop	r13
    48e0:	cf 90       	pop	r12
    48e2:	08 95       	ret

000048e4 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    48e4:	dc 01       	movw	r26, r24
{
  return write(c);
    48e6:	ed 91       	ld	r30, X+
    48e8:	fc 91       	ld	r31, X
    48ea:	01 90       	ld	r0, Z+
    48ec:	f0 81       	ld	r31, Z
    48ee:	e0 2d       	mov	r30, r0
    48f0:	09 95       	icall
}
    48f2:	08 95       	ret

000048f4 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    48f4:	ef 92       	push	r14
    48f6:	ff 92       	push	r15
    48f8:	0f 93       	push	r16
    48fa:	1f 93       	push	r17
    48fc:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    48fe:	dc 01       	movw	r26, r24
    4900:	ed 91       	ld	r30, X+
    4902:	fc 91       	ld	r31, X
    4904:	01 90       	ld	r0, Z+
    4906:	f0 81       	ld	r31, Z
    4908:	e0 2d       	mov	r30, r0
    490a:	6d e0       	ldi	r22, 0x0D	; 13
    490c:	09 95       	icall
    490e:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4910:	d8 01       	movw	r26, r16
    4912:	ed 91       	ld	r30, X+
    4914:	fc 91       	ld	r31, X
    4916:	01 90       	ld	r0, Z+
    4918:	f0 81       	ld	r31, Z
    491a:	e0 2d       	mov	r30, r0
    491c:	c8 01       	movw	r24, r16
    491e:	6a e0       	ldi	r22, 0x0A	; 10
    4920:	09 95       	icall
    4922:	9c 01       	movw	r18, r24
    4924:	2e 0d       	add	r18, r14
    4926:	3f 1d       	adc	r19, r15
    4928:	c9 01       	movw	r24, r18
    492a:	1f 91       	pop	r17
    492c:	0f 91       	pop	r16
    492e:	ff 90       	pop	r15
    4930:	ef 90       	pop	r14
    4932:	08 95       	ret

00004934 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    4934:	ef 92       	push	r14
    4936:	ff 92       	push	r15
    4938:	0f 93       	push	r16
    493a:	1f 93       	push	r17
    493c:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    493e:	dc 01       	movw	r26, r24
    4940:	ed 91       	ld	r30, X+
    4942:	fc 91       	ld	r31, X
    4944:	01 90       	ld	r0, Z+
    4946:	f0 81       	ld	r31, Z
    4948:	e0 2d       	mov	r30, r0
    494a:	09 95       	icall
    494c:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
    494e:	c7 01       	movw	r24, r14
    4950:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN5Print7printlnEv>
    4954:	08 0f       	add	r16, r24
    4956:	19 1f       	adc	r17, r25
  return n;
}
    4958:	c8 01       	movw	r24, r16
    495a:	1f 91       	pop	r17
    495c:	0f 91       	pop	r16
    495e:	ff 90       	pop	r15
    4960:	ef 90       	pop	r14
    4962:	08 95       	ret

00004964 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	db 01       	movw	r26, r22
    496a:	0d 90       	ld	r0, X+
    496c:	00 20       	and	r0, r0
    496e:	e9 f7       	brne	.-6      	; 0x496a <_ZN5Print5writeEPKc+0x6>
    4970:	11 97       	sbiw	r26, 0x01	; 1
    4972:	a6 1b       	sub	r26, r22
    4974:	b7 0b       	sbc	r27, r23
    4976:	ec 01       	movw	r28, r24
    4978:	e8 81       	ld	r30, Y
    497a:	f9 81       	ldd	r31, Y+1	; 0x01
    497c:	02 80       	ldd	r0, Z+2	; 0x02
    497e:	f3 81       	ldd	r31, Z+3	; 0x03
    4980:	e0 2d       	mov	r30, r0
    4982:	ad 01       	movw	r20, r26
    4984:	09 95       	icall
    4986:	df 91       	pop	r29
    4988:	cf 91       	pop	r28
    498a:	08 95       	ret

0000498c <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    498c:	4f 92       	push	r4
    498e:	5f 92       	push	r5
    4990:	7f 92       	push	r7
    4992:	8f 92       	push	r8
    4994:	9f 92       	push	r9
    4996:	af 92       	push	r10
    4998:	bf 92       	push	r11
    499a:	cf 92       	push	r12
    499c:	df 92       	push	r13
    499e:	ef 92       	push	r14
    49a0:	ff 92       	push	r15
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62
    49ae:	a1 97       	sbiw	r28, 0x21	; 33
    49b0:	0f b6       	in	r0, 0x3f	; 63
    49b2:	f8 94       	cli
    49b4:	de bf       	out	0x3e, r29	; 62
    49b6:	0f be       	out	0x3f, r0	; 63
    49b8:	cd bf       	out	0x3d, r28	; 61
    49ba:	2c 01       	movw	r4, r24
    49bc:	74 2e       	mov	r7, r20
    49be:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    49c0:	22 30       	cpi	r18, 0x02	; 2
    49c2:	08 f4       	brcc	.+2      	; 0x49c6 <_ZN5Print11printNumberEmh+0x3a>
    49c4:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    49c6:	19 a2       	std	Y+33, r1	; 0x21
    49c8:	31 e2       	ldi	r19, 0x21	; 33
    49ca:	c3 2e       	mov	r12, r19
    49cc:	d1 2c       	mov	r13, r1
    49ce:	cc 0e       	add	r12, r28
    49d0:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    49d2:	82 2e       	mov	r8, r18
    49d4:	99 24       	eor	r9, r9
    49d6:	aa 24       	eor	r10, r10
    49d8:	bb 24       	eor	r11, r11
    49da:	67 2d       	mov	r22, r7
    49dc:	75 2f       	mov	r23, r21
    49de:	a5 01       	movw	r20, r10
    49e0:	94 01       	movw	r18, r8
    49e2:	0e 94 a1 2a 	call	0x5542	; 0x5542 <__udivmodsi4>
    49e6:	79 01       	movw	r14, r18
    49e8:	8a 01       	movw	r16, r20
    char c = m - base * n;
    49ea:	c8 01       	movw	r24, r16
    49ec:	b7 01       	movw	r22, r14
    49ee:	a5 01       	movw	r20, r10
    49f0:	94 01       	movw	r18, r8
    49f2:	0e 94 6f 2a 	call	0x54de	; 0x54de <__mulsi3>
    49f6:	47 2d       	mov	r20, r7
    49f8:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    49fa:	08 94       	sec
    49fc:	c1 08       	sbc	r12, r1
    49fe:	d1 08       	sbc	r13, r1
    4a00:	4a 30       	cpi	r20, 0x0A	; 10
    4a02:	14 f4       	brge	.+4      	; 0x4a08 <_ZN5Print11printNumberEmh+0x7c>
    4a04:	40 5d       	subi	r20, 0xD0	; 208
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <_ZN5Print11printNumberEmh+0x7e>
    4a08:	49 5c       	subi	r20, 0xC9	; 201
    4a0a:	f6 01       	movw	r30, r12
    4a0c:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4a0e:	e1 14       	cp	r14, r1
    4a10:	f1 04       	cpc	r15, r1
    4a12:	01 05       	cpc	r16, r1
    4a14:	11 05       	cpc	r17, r1
    4a16:	21 f0       	breq	.+8      	; 0x4a20 <_ZN5Print11printNumberEmh+0x94>
    4a18:	7e 2c       	mov	r7, r14
    4a1a:	5f 2d       	mov	r21, r15
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	dd cf       	rjmp	.-70     	; 0x49da <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4a20:	c2 01       	movw	r24, r4
    4a22:	b6 01       	movw	r22, r12
    4a24:	0e 94 b2 24 	call	0x4964	; 0x4964 <_ZN5Print5writeEPKc>
}
    4a28:	a1 96       	adiw	r28, 0x21	; 33
    4a2a:	0f b6       	in	r0, 0x3f	; 63
    4a2c:	f8 94       	cli
    4a2e:	de bf       	out	0x3e, r29	; 62
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	cd bf       	out	0x3d, r28	; 61
    4a34:	cf 91       	pop	r28
    4a36:	df 91       	pop	r29
    4a38:	1f 91       	pop	r17
    4a3a:	0f 91       	pop	r16
    4a3c:	ff 90       	pop	r15
    4a3e:	ef 90       	pop	r14
    4a40:	df 90       	pop	r13
    4a42:	cf 90       	pop	r12
    4a44:	bf 90       	pop	r11
    4a46:	af 90       	pop	r10
    4a48:	9f 90       	pop	r9
    4a4a:	8f 90       	pop	r8
    4a4c:	7f 90       	pop	r7
    4a4e:	5f 90       	pop	r5
    4a50:	4f 90       	pop	r4
    4a52:	08 95       	ret

00004a54 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    4a54:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    4a56:	21 15       	cp	r18, r1
    4a58:	31 05       	cpc	r19, r1
    4a5a:	41 f4       	brne	.+16     	; 0x4a6c <_ZN5Print5printEmi+0x18>
    4a5c:	ed 91       	ld	r30, X+
    4a5e:	fc 91       	ld	r31, X
    4a60:	01 90       	ld	r0, Z+
    4a62:	f0 81       	ld	r31, Z
    4a64:	e0 2d       	mov	r30, r0
    4a66:	64 2f       	mov	r22, r20
    4a68:	09 95       	icall
    4a6a:	08 95       	ret
  else return printNumber(n, base);
    4a6c:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN5Print11printNumberEmh>
}
    4a70:	08 95       	ret

00004a72 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    4a72:	cf 92       	push	r12
    4a74:	df 92       	push	r13
    4a76:	ef 92       	push	r14
    4a78:	ff 92       	push	r15
    4a7a:	0f 93       	push	r16
    4a7c:	1f 93       	push	r17
    4a7e:	cf 93       	push	r28
    4a80:	df 93       	push	r29
    4a82:	ec 01       	movw	r28, r24
    4a84:	6a 01       	movw	r12, r20
    4a86:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    4a88:	21 15       	cp	r18, r1
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	41 f4       	brne	.+16     	; 0x4a9e <_ZN5Print5printEli+0x2c>
    return write(n);
    4a8e:	e8 81       	ld	r30, Y
    4a90:	f9 81       	ldd	r31, Y+1	; 0x01
    4a92:	01 90       	ld	r0, Z+
    4a94:	f0 81       	ld	r31, Z
    4a96:	e0 2d       	mov	r30, r0
    4a98:	64 2f       	mov	r22, r20
    4a9a:	09 95       	icall
    4a9c:	1f c0       	rjmp	.+62     	; 0x4adc <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    4a9e:	2a 30       	cpi	r18, 0x0A	; 10
    4aa0:	31 05       	cpc	r19, r1
    4aa2:	d1 f4       	brne	.+52     	; 0x4ad8 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    4aa4:	77 ff       	sbrs	r23, 7
    4aa6:	17 c0       	rjmp	.+46     	; 0x4ad6 <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4aa8:	e8 81       	ld	r30, Y
    4aaa:	f9 81       	ldd	r31, Y+1	; 0x01
    4aac:	01 90       	ld	r0, Z+
    4aae:	f0 81       	ld	r31, Z
    4ab0:	e0 2d       	mov	r30, r0
    4ab2:	6d e2       	ldi	r22, 0x2D	; 45
    4ab4:	09 95       	icall
    4ab6:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    4ab8:	44 27       	eor	r20, r20
    4aba:	55 27       	eor	r21, r21
    4abc:	ba 01       	movw	r22, r20
    4abe:	4c 19       	sub	r20, r12
    4ac0:	5d 09       	sbc	r21, r13
    4ac2:	6e 09       	sbc	r22, r14
    4ac4:	7f 09       	sbc	r23, r15
    4ac6:	ce 01       	movw	r24, r28
    4ac8:	2a e0       	ldi	r18, 0x0A	; 10
    4aca:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN5Print11printNumberEmh>
    4ace:	98 01       	movw	r18, r16
    4ad0:	28 0f       	add	r18, r24
    4ad2:	39 1f       	adc	r19, r25
    4ad4:	04 c0       	rjmp	.+8      	; 0x4ade <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    4ad6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    4ad8:	0e 94 c6 24 	call	0x498c	; 0x498c <_ZN5Print11printNumberEmh>
    4adc:	9c 01       	movw	r18, r24
  }
}
    4ade:	c9 01       	movw	r24, r18
    4ae0:	df 91       	pop	r29
    4ae2:	cf 91       	pop	r28
    4ae4:	1f 91       	pop	r17
    4ae6:	0f 91       	pop	r16
    4ae8:	ff 90       	pop	r15
    4aea:	ef 90       	pop	r14
    4aec:	df 90       	pop	r13
    4aee:	cf 90       	pop	r12
    4af0:	08 95       	ret

00004af2 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    4af2:	ef 92       	push	r14
    4af4:	ff 92       	push	r15
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	7b 01       	movw	r14, r22
    4afc:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    4afe:	00 27       	eor	r16, r16
    4b00:	f7 fc       	sbrc	r15, 7
    4b02:	00 95       	com	r16
    4b04:	10 2f       	mov	r17, r16
    4b06:	b8 01       	movw	r22, r16
    4b08:	a7 01       	movw	r20, r14
    4b0a:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_ZN5Print5printEli>
}
    4b0e:	1f 91       	pop	r17
    4b10:	0f 91       	pop	r16
    4b12:	ff 90       	pop	r15
    4b14:	ef 90       	pop	r14
    4b16:	08 95       	ret

00004b18 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4b18:	0e 94 b2 24 	call	0x4964	; 0x4964 <_ZN5Print5writeEPKc>
}
    4b1c:	08 95       	ret

00004b1e <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    4b1e:	7f 92       	push	r7
    4b20:	8f 92       	push	r8
    4b22:	9f 92       	push	r9
    4b24:	af 92       	push	r10
    4b26:	bf 92       	push	r11
    4b28:	cf 92       	push	r12
    4b2a:	df 92       	push	r13
    4b2c:	ef 92       	push	r14
    4b2e:	ff 92       	push	r15
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    4b38:	4c 01       	movw	r8, r24
    4b3a:	7a 01       	movw	r14, r20
    4b3c:	8b 01       	movw	r16, r22
    4b3e:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    4b40:	cb 01       	movw	r24, r22
    4b42:	ba 01       	movw	r22, r20
    4b44:	20 e0       	ldi	r18, 0x00	; 0
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	40 e0       	ldi	r20, 0x00	; 0
    4b4a:	50 e0       	ldi	r21, 0x00	; 0
    4b4c:	0e 94 b9 28 	call	0x5172	; 0x5172 <__cmpsf2>
    4b50:	87 fd       	sbrc	r24, 7
    4b52:	03 c0       	rjmp	.+6      	; 0x4b5a <_ZN5Print10printFloatEdh+0x3c>
    4b54:	c0 e0       	ldi	r28, 0x00	; 0
    4b56:	d0 e0       	ldi	r29, 0x00	; 0
    4b58:	0e c0       	rjmp	.+28     	; 0x4b76 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4b5a:	d4 01       	movw	r26, r8
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	01 90       	ld	r0, Z+
    4b62:	f0 81       	ld	r31, Z
    4b64:	e0 2d       	mov	r30, r0
    4b66:	c4 01       	movw	r24, r8
    4b68:	6d e2       	ldi	r22, 0x2D	; 45
    4b6a:	09 95       	icall
    4b6c:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    4b6e:	17 fb       	bst	r17, 7
    4b70:	10 95       	com	r17
    4b72:	17 f9       	bld	r17, 7
    4b74:	10 95       	com	r17
    4b76:	20 e0       	ldi	r18, 0x00	; 0
    4b78:	30 e0       	ldi	r19, 0x00	; 0
    4b7a:	40 e0       	ldi	r20, 0x00	; 0
    4b7c:	5f e3       	ldi	r21, 0x3F	; 63
    4b7e:	aa 24       	eor	r10, r10
    4b80:	0b c0       	rjmp	.+22     	; 0x4b98 <_ZN5Print10printFloatEdh+0x7a>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    4b82:	ca 01       	movw	r24, r20
    4b84:	b9 01       	movw	r22, r18
    4b86:	20 e0       	ldi	r18, 0x00	; 0
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	40 e2       	ldi	r20, 0x20	; 32
    4b8c:	51 e4       	ldi	r21, 0x41	; 65
    4b8e:	0e 94 bd 28 	call	0x517a	; 0x517a <__divsf3>
    4b92:	9b 01       	movw	r18, r22
    4b94:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4b96:	a3 94       	inc	r10
    4b98:	a7 14       	cp	r10, r7
    4b9a:	98 f3       	brcs	.-26     	; 0x4b82 <_ZN5Print10printFloatEdh+0x64>
    rounding /= 10.0;
  
  number += rounding;
    4b9c:	c8 01       	movw	r24, r16
    4b9e:	b7 01       	movw	r22, r14
    4ba0:	0e 94 55 28 	call	0x50aa	; 0x50aa <__addsf3>
    4ba4:	5b 01       	movw	r10, r22
    4ba6:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4ba8:	0e 94 2a 29 	call	0x5254	; 0x5254 <__fixunssfsi>
    4bac:	7b 01       	movw	r14, r22
    4bae:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    4bb0:	c4 01       	movw	r24, r8
    4bb2:	b8 01       	movw	r22, r16
    4bb4:	a7 01       	movw	r20, r14
    4bb6:	2a e0       	ldi	r18, 0x0A	; 10
    4bb8:	30 e0       	ldi	r19, 0x00	; 0
    4bba:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <_ZN5Print5printEmi>
    4bbe:	c8 0f       	add	r28, r24
    4bc0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4bc2:	77 20       	and	r7, r7
    4bc4:	39 f0       	breq	.+14     	; 0x4bd4 <_ZN5Print10printFloatEdh+0xb6>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4bc6:	c4 01       	movw	r24, r8
    4bc8:	61 e2       	ldi	r22, 0x21	; 33
    4bca:	72 e0       	ldi	r23, 0x02	; 2
    4bcc:	0e 94 b2 24 	call	0x4964	; 0x4964 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4bd0:	c8 0f       	add	r28, r24
    4bd2:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4bd4:	c8 01       	movw	r24, r16
    4bd6:	b7 01       	movw	r22, r14
    4bd8:	0e 94 56 29 	call	0x52ac	; 0x52ac <__floatunsisf>
    4bdc:	9b 01       	movw	r18, r22
    4bde:	ac 01       	movw	r20, r24
    4be0:	c6 01       	movw	r24, r12
    4be2:	b5 01       	movw	r22, r10
    4be4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    4be8:	24 c0       	rjmp	.+72     	; 0x4c32 <_ZN5Print10printFloatEdh+0x114>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4bea:	20 e0       	ldi	r18, 0x00	; 0
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	40 e2       	ldi	r20, 0x20	; 32
    4bf0:	51 e4       	ldi	r21, 0x41	; 65
    4bf2:	0e 94 0c 2a 	call	0x5418	; 0x5418 <__mulsf3>
    4bf6:	7b 01       	movw	r14, r22
    4bf8:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    4bfa:	0e 94 25 29 	call	0x524a	; 0x524a <__fixsfsi>
    4bfe:	5b 01       	movw	r10, r22
    4c00:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4c02:	cc 24       	eor	r12, r12
    4c04:	b7 fc       	sbrc	r11, 7
    4c06:	c0 94       	com	r12
    4c08:	dc 2c       	mov	r13, r12
    4c0a:	c4 01       	movw	r24, r8
    4c0c:	b6 01       	movw	r22, r12
    4c0e:	a5 01       	movw	r20, r10
    4c10:	2a e0       	ldi	r18, 0x0A	; 10
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	0e 94 39 25 	call	0x4a72	; 0x4a72 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    4c18:	c8 0f       	add	r28, r24
    4c1a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4c1c:	c6 01       	movw	r24, r12
    4c1e:	b5 01       	movw	r22, r10
    4c20:	0e 94 58 29 	call	0x52b0	; 0x52b0 <__floatsisf>
    4c24:	9b 01       	movw	r18, r22
    4c26:	ac 01       	movw	r20, r24
    4c28:	c8 01       	movw	r24, r16
    4c2a:	b7 01       	movw	r22, r14
    4c2c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <__subsf3>
    4c30:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4c32:	77 20       	and	r7, r7
    4c34:	d1 f6       	brne	.-76     	; 0x4bea <_ZN5Print10printFloatEdh+0xcc>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4c36:	ce 01       	movw	r24, r28
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	1f 91       	pop	r17
    4c3e:	0f 91       	pop	r16
    4c40:	ff 90       	pop	r15
    4c42:	ef 90       	pop	r14
    4c44:	df 90       	pop	r13
    4c46:	cf 90       	pop	r12
    4c48:	bf 90       	pop	r11
    4c4a:	af 90       	pop	r10
    4c4c:	9f 90       	pop	r9
    4c4e:	8f 90       	pop	r8
    4c50:	7f 90       	pop	r7
    4c52:	08 95       	ret

00004c54 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4c54:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <_ZN5Print10printFloatEdh>
}
    4c58:	08 95       	ret

00004c5a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    4c5a:	ef 92       	push	r14
    4c5c:	ff 92       	push	r15
    4c5e:	0f 93       	push	r16
    4c60:	1f 93       	push	r17
    4c62:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4c64:	0e 94 b2 24 	call	0x4964	; 0x4964 <_ZN5Print5writeEPKc>
    4c68:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4c6a:	c7 01       	movw	r24, r14
    4c6c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN5Print7printlnEv>
    4c70:	08 0f       	add	r16, r24
    4c72:	19 1f       	adc	r17, r25
  return n;
}
    4c74:	c8 01       	movw	r24, r16
    4c76:	1f 91       	pop	r17
    4c78:	0f 91       	pop	r16
    4c7a:	ff 90       	pop	r15
    4c7c:	ef 90       	pop	r14
    4c7e:	08 95       	ret

00004c80 <main>:
#include <Arduino.h>

int main(void)
    4c80:	cf 93       	push	r28
    4c82:	df 93       	push	r29
{
	init();
    4c84:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4c88:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4c8c:	cf e7       	ldi	r28, 0x7F	; 127
    4c8e:	d2 e2       	ldi	r29, 0x22	; 34
#endif
	
	setup();
    
	for (;;) {
		loop();
    4c90:	0e 94 41 17 	call	0x2e82	; 0x2e82 <loop>
		if (serialEventRun) serialEventRun();
    4c94:	20 97       	sbiw	r28, 0x00	; 0
    4c96:	e1 f3       	breq	.-8      	; 0x4c90 <main+0x10>
    4c98:	0e 94 7f 22 	call	0x44fe	; 0x44fe <_Z14serialEventRunv>
    4c9c:	f9 cf       	rjmp	.-14     	; 0x4c90 <main+0x10>

00004c9e <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    4c9e:	0e 94 b9 01 	call	0x372	; 0x372 <free>
} 
    4ca2:	08 95       	ret

00004ca4 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    4ca4:	0e 94 0f 01 	call	0x21e	; 0x21e <malloc>
}
    4ca8:	08 95       	ret

00004caa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	2f 93       	push	r18
    4cb6:	3f 93       	push	r19
    4cb8:	8f 93       	push	r24
    4cba:	9f 93       	push	r25
    4cbc:	af 93       	push	r26
    4cbe:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4cc0:	80 91 9f 03 	lds	r24, 0x039F
    4cc4:	90 91 a0 03 	lds	r25, 0x03A0
    4cc8:	a0 91 a1 03 	lds	r26, 0x03A1
    4ccc:	b0 91 a2 03 	lds	r27, 0x03A2
	unsigned char f = timer0_fract;
    4cd0:	30 91 a3 03 	lds	r19, 0x03A3

	m += MILLIS_INC;
    4cd4:	01 96       	adiw	r24, 0x01	; 1
    4cd6:	a1 1d       	adc	r26, r1
    4cd8:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    4cda:	23 2f       	mov	r18, r19
    4cdc:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    4cde:	2d 37       	cpi	r18, 0x7D	; 125
    4ce0:	20 f0       	brcs	.+8      	; 0x4cea <__vector_16+0x40>
		f -= FRACT_MAX;
    4ce2:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    4ce4:	01 96       	adiw	r24, 0x01	; 1
    4ce6:	a1 1d       	adc	r26, r1
    4ce8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4cea:	20 93 a3 03 	sts	0x03A3, r18
	timer0_millis = m;
    4cee:	80 93 9f 03 	sts	0x039F, r24
    4cf2:	90 93 a0 03 	sts	0x03A0, r25
    4cf6:	a0 93 a1 03 	sts	0x03A1, r26
    4cfa:	b0 93 a2 03 	sts	0x03A2, r27
	timer0_overflow_count++;
    4cfe:	80 91 9b 03 	lds	r24, 0x039B
    4d02:	90 91 9c 03 	lds	r25, 0x039C
    4d06:	a0 91 9d 03 	lds	r26, 0x039D
    4d0a:	b0 91 9e 03 	lds	r27, 0x039E
    4d0e:	01 96       	adiw	r24, 0x01	; 1
    4d10:	a1 1d       	adc	r26, r1
    4d12:	b1 1d       	adc	r27, r1
    4d14:	80 93 9b 03 	sts	0x039B, r24
    4d18:	90 93 9c 03 	sts	0x039C, r25
    4d1c:	a0 93 9d 03 	sts	0x039D, r26
    4d20:	b0 93 9e 03 	sts	0x039E, r27
}
    4d24:	bf 91       	pop	r27
    4d26:	af 91       	pop	r26
    4d28:	9f 91       	pop	r25
    4d2a:	8f 91       	pop	r24
    4d2c:	3f 91       	pop	r19
    4d2e:	2f 91       	pop	r18
    4d30:	0f 90       	pop	r0
    4d32:	0f be       	out	0x3f, r0	; 63
    4d34:	0f 90       	pop	r0
    4d36:	1f 90       	pop	r1
    4d38:	18 95       	reti

00004d3a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4d3a:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4d3c:	f8 94       	cli
	m = timer0_millis;
    4d3e:	20 91 9f 03 	lds	r18, 0x039F
    4d42:	30 91 a0 03 	lds	r19, 0x03A0
    4d46:	40 91 a1 03 	lds	r20, 0x03A1
    4d4a:	50 91 a2 03 	lds	r21, 0x03A2
	SREG = oldSREG;
    4d4e:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    4d50:	b9 01       	movw	r22, r18
    4d52:	ca 01       	movw	r24, r20
    4d54:	08 95       	ret

00004d56 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    4d56:	9b 01       	movw	r18, r22
    4d58:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4d5a:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    4d5c:	f8 94       	cli
	m = timer0_overflow_count;
    4d5e:	80 91 9b 03 	lds	r24, 0x039B
    4d62:	90 91 9c 03 	lds	r25, 0x039C
    4d66:	a0 91 9d 03 	lds	r26, 0x039D
    4d6a:	b0 91 9e 03 	lds	r27, 0x039E
#if defined(TCNT0)
	t = TCNT0;
    4d6e:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4d70:	a8 9b       	sbis	0x15, 0	; 21
    4d72:	05 c0       	rjmp	.+10     	; 0x4d7e <delay+0x28>
    4d74:	6f 3f       	cpi	r22, 0xFF	; 255
    4d76:	19 f0       	breq	.+6      	; 0x4d7e <delay+0x28>
		m++;
    4d78:	01 96       	adiw	r24, 0x01	; 1
    4d7a:	a1 1d       	adc	r26, r1
    4d7c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4d7e:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    4d80:	ba 2f       	mov	r27, r26
    4d82:	a9 2f       	mov	r26, r25
    4d84:	98 2f       	mov	r25, r24
    4d86:	88 27       	eor	r24, r24
    4d88:	86 0f       	add	r24, r22
    4d8a:	91 1d       	adc	r25, r1
    4d8c:	a1 1d       	adc	r26, r1
    4d8e:	b1 1d       	adc	r27, r1
    4d90:	62 e0       	ldi	r22, 0x02	; 2
    4d92:	88 0f       	add	r24, r24
    4d94:	99 1f       	adc	r25, r25
    4d96:	aa 1f       	adc	r26, r26
    4d98:	bb 1f       	adc	r27, r27
    4d9a:	6a 95       	dec	r22
    4d9c:	d1 f7       	brne	.-12     	; 0x4d92 <delay+0x3c>
    4d9e:	bc 01       	movw	r22, r24
    4da0:	2d c0       	rjmp	.+90     	; 0x4dfc <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4da2:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    4da4:	f8 94       	cli
	m = timer0_overflow_count;
    4da6:	80 91 9b 03 	lds	r24, 0x039B
    4daa:	90 91 9c 03 	lds	r25, 0x039C
    4dae:	a0 91 9d 03 	lds	r26, 0x039D
    4db2:	b0 91 9e 03 	lds	r27, 0x039E
#if defined(TCNT0)
	t = TCNT0;
    4db6:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4db8:	a8 9b       	sbis	0x15, 0	; 21
    4dba:	05 c0       	rjmp	.+10     	; 0x4dc6 <delay+0x70>
    4dbc:	ef 3f       	cpi	r30, 0xFF	; 255
    4dbe:	19 f0       	breq	.+6      	; 0x4dc6 <delay+0x70>
		m++;
    4dc0:	01 96       	adiw	r24, 0x01	; 1
    4dc2:	a1 1d       	adc	r26, r1
    4dc4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4dc6:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    4dc8:	ba 2f       	mov	r27, r26
    4dca:	a9 2f       	mov	r26, r25
    4dcc:	98 2f       	mov	r25, r24
    4dce:	88 27       	eor	r24, r24
    4dd0:	8e 0f       	add	r24, r30
    4dd2:	91 1d       	adc	r25, r1
    4dd4:	a1 1d       	adc	r26, r1
    4dd6:	b1 1d       	adc	r27, r1
    4dd8:	e2 e0       	ldi	r30, 0x02	; 2
    4dda:	88 0f       	add	r24, r24
    4ddc:	99 1f       	adc	r25, r25
    4dde:	aa 1f       	adc	r26, r26
    4de0:	bb 1f       	adc	r27, r27
    4de2:	ea 95       	dec	r30
    4de4:	d1 f7       	brne	.-12     	; 0x4dda <delay+0x84>
    4de6:	86 1b       	sub	r24, r22
    4de8:	97 0b       	sbc	r25, r23
    4dea:	88 5e       	subi	r24, 0xE8	; 232
    4dec:	93 40       	sbci	r25, 0x03	; 3
    4dee:	c8 f2       	brcs	.-78     	; 0x4da2 <delay+0x4c>
			ms--;
    4df0:	21 50       	subi	r18, 0x01	; 1
    4df2:	30 40       	sbci	r19, 0x00	; 0
    4df4:	40 40       	sbci	r20, 0x00	; 0
    4df6:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    4df8:	68 51       	subi	r22, 0x18	; 24
    4dfa:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    4dfc:	21 15       	cp	r18, r1
    4dfe:	31 05       	cpc	r19, r1
    4e00:	41 05       	cpc	r20, r1
    4e02:	51 05       	cpc	r21, r1
    4e04:	71 f6       	brne	.-100    	; 0x4da2 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    4e06:	08 95       	ret

00004e08 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	39 f0       	breq	.+14     	; 0x4e1a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	88 0f       	add	r24, r24
    4e12:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    4e14:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    4e16:	01 97       	sbiw	r24, 0x01	; 1
    4e18:	f1 f7       	brne	.-4      	; 0x4e16 <delayMicroseconds+0xe>
    4e1a:	08 95       	ret

00004e1c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4e1c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4e1e:	84 b5       	in	r24, 0x24	; 36
    4e20:	82 60       	ori	r24, 0x02	; 2
    4e22:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4e24:	84 b5       	in	r24, 0x24	; 36
    4e26:	81 60       	ori	r24, 0x01	; 1
    4e28:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4e2a:	85 b5       	in	r24, 0x25	; 37
    4e2c:	82 60       	ori	r24, 0x02	; 2
    4e2e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4e30:	85 b5       	in	r24, 0x25	; 37
    4e32:	81 60       	ori	r24, 0x01	; 1
    4e34:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    4e36:	ee e6       	ldi	r30, 0x6E	; 110
    4e38:	f0 e0       	ldi	r31, 0x00	; 0
    4e3a:	80 81       	ld	r24, Z
    4e3c:	81 60       	ori	r24, 0x01	; 1
    4e3e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4e40:	e1 e8       	ldi	r30, 0x81	; 129
    4e42:	f0 e0       	ldi	r31, 0x00	; 0
    4e44:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    4e46:	80 81       	ld	r24, Z
    4e48:	82 60       	ori	r24, 0x02	; 2
    4e4a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4e4c:	80 81       	ld	r24, Z
    4e4e:	81 60       	ori	r24, 0x01	; 1
    4e50:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    4e52:	e0 e8       	ldi	r30, 0x80	; 128
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	80 81       	ld	r24, Z
    4e58:	81 60       	ori	r24, 0x01	; 1
    4e5a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4e5c:	e1 eb       	ldi	r30, 0xB1	; 177
    4e5e:	f0 e0       	ldi	r31, 0x00	; 0
    4e60:	80 81       	ld	r24, Z
    4e62:	84 60       	ori	r24, 0x04	; 4
    4e64:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    4e66:	e0 eb       	ldi	r30, 0xB0	; 176
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	80 81       	ld	r24, Z
    4e6c:	81 60       	ori	r24, 0x01	; 1
    4e6e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    4e70:	ea e7       	ldi	r30, 0x7A	; 122
    4e72:	f0 e0       	ldi	r31, 0x00	; 0
    4e74:	80 81       	ld	r24, Z
    4e76:	84 60       	ori	r24, 0x04	; 4
    4e78:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    4e7a:	80 81       	ld	r24, Z
    4e7c:	82 60       	ori	r24, 0x02	; 2
    4e7e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    4e80:	80 81       	ld	r24, Z
    4e82:	81 60       	ori	r24, 0x01	; 1
    4e84:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4e86:	80 81       	ld	r24, Z
    4e88:	80 68       	ori	r24, 0x80	; 128
    4e8a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4e8c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    4e90:	08 95       	ret

00004e92 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    4e92:	80 93 2d 02 	sts	0x022D, r24
}
    4e96:	08 95       	ret

00004e98 <analogRead>:

int analogRead(uint8_t pin)
{
    4e98:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    4e9a:	8e 30       	cpi	r24, 0x0E	; 14
    4e9c:	08 f0       	brcs	.+2      	; 0x4ea0 <analogRead+0x8>
    4e9e:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4ea0:	97 70       	andi	r25, 0x07	; 7
    4ea2:	80 91 2d 02 	lds	r24, 0x022D
    4ea6:	82 95       	swap	r24
    4ea8:	88 0f       	add	r24, r24
    4eaa:	88 0f       	add	r24, r24
    4eac:	80 7c       	andi	r24, 0xC0	; 192
    4eae:	89 2b       	or	r24, r25
    4eb0:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4eb4:	80 91 7a 00 	lds	r24, 0x007A
    4eb8:	80 64       	ori	r24, 0x40	; 64
    4eba:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4ebe:	80 91 7a 00 	lds	r24, 0x007A
    4ec2:	86 fd       	sbrc	r24, 6
    4ec4:	fc cf       	rjmp	.-8      	; 0x4ebe <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4ec6:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    4eca:	40 91 79 00 	lds	r20, 0x0079
    4ece:	94 2f       	mov	r25, r20
    4ed0:	80 e0       	ldi	r24, 0x00	; 0
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	28 2b       	or	r18, r24
    4ed6:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    4ed8:	c9 01       	movw	r24, r18
    4eda:	08 95       	ret

00004edc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4edc:	cf 93       	push	r28
    4ede:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    4ee0:	48 2f       	mov	r20, r24
    4ee2:	50 e0       	ldi	r21, 0x00	; 0
    4ee4:	ca 01       	movw	r24, r20
    4ee6:	86 56       	subi	r24, 0x66	; 102
    4ee8:	9e 4f       	sbci	r25, 0xFE	; 254
    4eea:	fc 01       	movw	r30, r24
    4eec:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    4eee:	4a 57       	subi	r20, 0x7A	; 122
    4ef0:	5e 4f       	sbci	r21, 0xFE	; 254
    4ef2:	fa 01       	movw	r30, r20
    4ef4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    4ef6:	88 23       	and	r24, r24
    4ef8:	69 f1       	breq	.+90     	; 0x4f54 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	88 0f       	add	r24, r24
    4efe:	99 1f       	adc	r25, r25
    4f00:	fc 01       	movw	r30, r24
    4f02:	e8 59       	subi	r30, 0x98	; 152
    4f04:	fe 4f       	sbci	r31, 0xFE	; 254
    4f06:	a5 91       	lpm	r26, Z+
    4f08:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    4f0a:	fc 01       	movw	r30, r24
    4f0c:	ee 58       	subi	r30, 0x8E	; 142
    4f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f10:	c5 91       	lpm	r28, Z+
    4f12:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    4f14:	66 23       	and	r22, r22
    4f16:	51 f4       	brne	.+20     	; 0x4f2c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4f18:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4f1a:	f8 94       	cli
		*reg &= ~bit;
    4f1c:	8c 91       	ld	r24, X
    4f1e:	93 2f       	mov	r25, r19
    4f20:	90 95       	com	r25
    4f22:	89 23       	and	r24, r25
    4f24:	8c 93       	st	X, r24
		*out &= ~bit;
    4f26:	88 81       	ld	r24, Y
    4f28:	89 23       	and	r24, r25
    4f2a:	0b c0       	rjmp	.+22     	; 0x4f42 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    4f2c:	62 30       	cpi	r22, 0x02	; 2
    4f2e:	61 f4       	brne	.+24     	; 0x4f48 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    4f30:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4f32:	f8 94       	cli
		*reg &= ~bit;
    4f34:	8c 91       	ld	r24, X
    4f36:	93 2f       	mov	r25, r19
    4f38:	90 95       	com	r25
    4f3a:	89 23       	and	r24, r25
    4f3c:	8c 93       	st	X, r24
		*out |= bit;
    4f3e:	88 81       	ld	r24, Y
    4f40:	83 2b       	or	r24, r19
    4f42:	88 83       	st	Y, r24
		SREG = oldSREG;
    4f44:	2f bf       	out	0x3f, r18	; 63
    4f46:	06 c0       	rjmp	.+12     	; 0x4f54 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    4f48:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4f4a:	f8 94       	cli
		*reg |= bit;
    4f4c:	8c 91       	ld	r24, X
    4f4e:	83 2b       	or	r24, r19
    4f50:	8c 93       	st	X, r24
		SREG = oldSREG;
    4f52:	9f bf       	out	0x3f, r25	; 63
	}
}
    4f54:	df 91       	pop	r29
    4f56:	cf 91       	pop	r28
    4f58:	08 95       	ret

00004f5a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4f5a:	48 2f       	mov	r20, r24
    4f5c:	50 e0       	ldi	r21, 0x00	; 0
    4f5e:	ca 01       	movw	r24, r20
    4f60:	82 55       	subi	r24, 0x52	; 82
    4f62:	9e 4f       	sbci	r25, 0xFE	; 254
    4f64:	fc 01       	movw	r30, r24
    4f66:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    4f68:	ca 01       	movw	r24, r20
    4f6a:	86 56       	subi	r24, 0x66	; 102
    4f6c:	9e 4f       	sbci	r25, 0xFE	; 254
    4f6e:	fc 01       	movw	r30, r24
    4f70:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    4f72:	4a 57       	subi	r20, 0x7A	; 122
    4f74:	5e 4f       	sbci	r21, 0xFE	; 254
    4f76:	fa 01       	movw	r30, r20
    4f78:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4f7a:	33 23       	and	r19, r19
    4f7c:	09 f4       	brne	.+2      	; 0x4f80 <digitalWrite+0x26>
    4f7e:	40 c0       	rjmp	.+128    	; 0x5000 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4f80:	22 23       	and	r18, r18
    4f82:	51 f1       	breq	.+84     	; 0x4fd8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4f84:	23 30       	cpi	r18, 0x03	; 3
    4f86:	71 f0       	breq	.+28     	; 0x4fa4 <digitalWrite+0x4a>
    4f88:	24 30       	cpi	r18, 0x04	; 4
    4f8a:	28 f4       	brcc	.+10     	; 0x4f96 <digitalWrite+0x3c>
    4f8c:	21 30       	cpi	r18, 0x01	; 1
    4f8e:	a1 f0       	breq	.+40     	; 0x4fb8 <digitalWrite+0x5e>
    4f90:	22 30       	cpi	r18, 0x02	; 2
    4f92:	11 f5       	brne	.+68     	; 0x4fd8 <digitalWrite+0x7e>
    4f94:	14 c0       	rjmp	.+40     	; 0x4fbe <digitalWrite+0x64>
    4f96:	26 30       	cpi	r18, 0x06	; 6
    4f98:	b1 f0       	breq	.+44     	; 0x4fc6 <digitalWrite+0x6c>
    4f9a:	27 30       	cpi	r18, 0x07	; 7
    4f9c:	c1 f0       	breq	.+48     	; 0x4fce <digitalWrite+0x74>
    4f9e:	24 30       	cpi	r18, 0x04	; 4
    4fa0:	d9 f4       	brne	.+54     	; 0x4fd8 <digitalWrite+0x7e>
    4fa2:	04 c0       	rjmp	.+8      	; 0x4fac <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4fa4:	80 91 80 00 	lds	r24, 0x0080
    4fa8:	8f 77       	andi	r24, 0x7F	; 127
    4faa:	03 c0       	rjmp	.+6      	; 0x4fb2 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4fac:	80 91 80 00 	lds	r24, 0x0080
    4fb0:	8f 7d       	andi	r24, 0xDF	; 223
    4fb2:	80 93 80 00 	sts	0x0080, r24
    4fb6:	10 c0       	rjmp	.+32     	; 0x4fd8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4fb8:	84 b5       	in	r24, 0x24	; 36
    4fba:	8f 77       	andi	r24, 0x7F	; 127
    4fbc:	02 c0       	rjmp	.+4      	; 0x4fc2 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4fbe:	84 b5       	in	r24, 0x24	; 36
    4fc0:	8f 7d       	andi	r24, 0xDF	; 223
    4fc2:	84 bd       	out	0x24, r24	; 36
    4fc4:	09 c0       	rjmp	.+18     	; 0x4fd8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4fc6:	80 91 b0 00 	lds	r24, 0x00B0
    4fca:	8f 77       	andi	r24, 0x7F	; 127
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4fce:	80 91 b0 00 	lds	r24, 0x00B0
    4fd2:	8f 7d       	andi	r24, 0xDF	; 223
    4fd4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    4fd8:	e3 2f       	mov	r30, r19
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	ee 0f       	add	r30, r30
    4fde:	ff 1f       	adc	r31, r31
    4fe0:	ee 58       	subi	r30, 0x8E	; 142
    4fe2:	fe 4f       	sbci	r31, 0xFE	; 254
    4fe4:	a5 91       	lpm	r26, Z+
    4fe6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    4fe8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4fea:	f8 94       	cli

	if (val == LOW) {
    4fec:	66 23       	and	r22, r22
    4fee:	21 f4       	brne	.+8      	; 0x4ff8 <digitalWrite+0x9e>
		*out &= ~bit;
    4ff0:	8c 91       	ld	r24, X
    4ff2:	90 95       	com	r25
    4ff4:	89 23       	and	r24, r25
    4ff6:	02 c0       	rjmp	.+4      	; 0x4ffc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    4ff8:	8c 91       	ld	r24, X
    4ffa:	89 2b       	or	r24, r25
    4ffc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    4ffe:	2f bf       	out	0x3f, r18	; 63
    5000:	08 95       	ret

00005002 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    5002:	68 2f       	mov	r22, r24
    5004:	70 e0       	ldi	r23, 0x00	; 0
    5006:	cb 01       	movw	r24, r22
    5008:	82 55       	subi	r24, 0x52	; 82
    500a:	9e 4f       	sbci	r25, 0xFE	; 254
    500c:	fc 01       	movw	r30, r24
    500e:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    5010:	cb 01       	movw	r24, r22
    5012:	86 56       	subi	r24, 0x66	; 102
    5014:	9e 4f       	sbci	r25, 0xFE	; 254
    5016:	fc 01       	movw	r30, r24
    5018:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    501a:	6a 57       	subi	r22, 0x7A	; 122
    501c:	7e 4f       	sbci	r23, 0xFE	; 254
    501e:	fb 01       	movw	r30, r22
    5020:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    5022:	99 23       	and	r25, r25
    5024:	19 f4       	brne	.+6      	; 0x502c <digitalRead+0x2a>
    5026:	20 e0       	ldi	r18, 0x00	; 0
    5028:	30 e0       	ldi	r19, 0x00	; 0
    502a:	3c c0       	rjmp	.+120    	; 0x50a4 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    502c:	22 23       	and	r18, r18
    502e:	51 f1       	breq	.+84     	; 0x5084 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5030:	23 30       	cpi	r18, 0x03	; 3
    5032:	71 f0       	breq	.+28     	; 0x5050 <digitalRead+0x4e>
    5034:	24 30       	cpi	r18, 0x04	; 4
    5036:	28 f4       	brcc	.+10     	; 0x5042 <digitalRead+0x40>
    5038:	21 30       	cpi	r18, 0x01	; 1
    503a:	a1 f0       	breq	.+40     	; 0x5064 <digitalRead+0x62>
    503c:	22 30       	cpi	r18, 0x02	; 2
    503e:	11 f5       	brne	.+68     	; 0x5084 <digitalRead+0x82>
    5040:	14 c0       	rjmp	.+40     	; 0x506a <digitalRead+0x68>
    5042:	26 30       	cpi	r18, 0x06	; 6
    5044:	b1 f0       	breq	.+44     	; 0x5072 <digitalRead+0x70>
    5046:	27 30       	cpi	r18, 0x07	; 7
    5048:	c1 f0       	breq	.+48     	; 0x507a <digitalRead+0x78>
    504a:	24 30       	cpi	r18, 0x04	; 4
    504c:	d9 f4       	brne	.+54     	; 0x5084 <digitalRead+0x82>
    504e:	04 c0       	rjmp	.+8      	; 0x5058 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5050:	80 91 80 00 	lds	r24, 0x0080
    5054:	8f 77       	andi	r24, 0x7F	; 127
    5056:	03 c0       	rjmp	.+6      	; 0x505e <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5058:	80 91 80 00 	lds	r24, 0x0080
    505c:	8f 7d       	andi	r24, 0xDF	; 223
    505e:	80 93 80 00 	sts	0x0080, r24
    5062:	10 c0       	rjmp	.+32     	; 0x5084 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5064:	84 b5       	in	r24, 0x24	; 36
    5066:	8f 77       	andi	r24, 0x7F	; 127
    5068:	02 c0       	rjmp	.+4      	; 0x506e <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    506a:	84 b5       	in	r24, 0x24	; 36
    506c:	8f 7d       	andi	r24, 0xDF	; 223
    506e:	84 bd       	out	0x24, r24	; 36
    5070:	09 c0       	rjmp	.+18     	; 0x5084 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5072:	80 91 b0 00 	lds	r24, 0x00B0
    5076:	8f 77       	andi	r24, 0x7F	; 127
    5078:	03 c0       	rjmp	.+6      	; 0x5080 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    507a:	80 91 b0 00 	lds	r24, 0x00B0
    507e:	8f 7d       	andi	r24, 0xDF	; 223
    5080:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    5084:	89 2f       	mov	r24, r25
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	88 0f       	add	r24, r24
    508a:	99 1f       	adc	r25, r25
    508c:	84 58       	subi	r24, 0x84	; 132
    508e:	9e 4f       	sbci	r25, 0xFE	; 254
    5090:	fc 01       	movw	r30, r24
    5092:	a5 91       	lpm	r26, Z+
    5094:	b4 91       	lpm	r27, Z+
    5096:	8c 91       	ld	r24, X
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	84 23       	and	r24, r20
    509e:	11 f0       	breq	.+4      	; 0x50a4 <digitalRead+0xa2>
    50a0:	21 e0       	ldi	r18, 0x01	; 1
    50a2:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    50a4:	c9 01       	movw	r24, r18
    50a6:	08 95       	ret

000050a8 <__subsf3>:
    50a8:	50 58       	subi	r21, 0x80	; 128

000050aa <__addsf3>:
    50aa:	bb 27       	eor	r27, r27
    50ac:	aa 27       	eor	r26, r26
    50ae:	0e d0       	rcall	.+28     	; 0x50cc <__addsf3x>
    50b0:	75 c1       	rjmp	.+746    	; 0x539c <__fp_round>
    50b2:	66 d1       	rcall	.+716    	; 0x5380 <__fp_pscA>
    50b4:	30 f0       	brcs	.+12     	; 0x50c2 <__addsf3+0x18>
    50b6:	6b d1       	rcall	.+726    	; 0x538e <__fp_pscB>
    50b8:	20 f0       	brcs	.+8      	; 0x50c2 <__addsf3+0x18>
    50ba:	31 f4       	brne	.+12     	; 0x50c8 <__addsf3+0x1e>
    50bc:	9f 3f       	cpi	r25, 0xFF	; 255
    50be:	11 f4       	brne	.+4      	; 0x50c4 <__addsf3+0x1a>
    50c0:	1e f4       	brtc	.+6      	; 0x50c8 <__addsf3+0x1e>
    50c2:	5b c1       	rjmp	.+694    	; 0x537a <__fp_nan>
    50c4:	0e f4       	brtc	.+2      	; 0x50c8 <__addsf3+0x1e>
    50c6:	e0 95       	com	r30
    50c8:	e7 fb       	bst	r30, 7
    50ca:	51 c1       	rjmp	.+674    	; 0x536e <__fp_inf>

000050cc <__addsf3x>:
    50cc:	e9 2f       	mov	r30, r25
    50ce:	77 d1       	rcall	.+750    	; 0x53be <__fp_split3>
    50d0:	80 f3       	brcs	.-32     	; 0x50b2 <__addsf3+0x8>
    50d2:	ba 17       	cp	r27, r26
    50d4:	62 07       	cpc	r22, r18
    50d6:	73 07       	cpc	r23, r19
    50d8:	84 07       	cpc	r24, r20
    50da:	95 07       	cpc	r25, r21
    50dc:	18 f0       	brcs	.+6      	; 0x50e4 <__addsf3x+0x18>
    50de:	71 f4       	brne	.+28     	; 0x50fc <__addsf3x+0x30>
    50e0:	9e f5       	brtc	.+102    	; 0x5148 <__addsf3x+0x7c>
    50e2:	8f c1       	rjmp	.+798    	; 0x5402 <__fp_zero>
    50e4:	0e f4       	brtc	.+2      	; 0x50e8 <__addsf3x+0x1c>
    50e6:	e0 95       	com	r30
    50e8:	0b 2e       	mov	r0, r27
    50ea:	ba 2f       	mov	r27, r26
    50ec:	a0 2d       	mov	r26, r0
    50ee:	0b 01       	movw	r0, r22
    50f0:	b9 01       	movw	r22, r18
    50f2:	90 01       	movw	r18, r0
    50f4:	0c 01       	movw	r0, r24
    50f6:	ca 01       	movw	r24, r20
    50f8:	a0 01       	movw	r20, r0
    50fa:	11 24       	eor	r1, r1
    50fc:	ff 27       	eor	r31, r31
    50fe:	59 1b       	sub	r21, r25
    5100:	99 f0       	breq	.+38     	; 0x5128 <__addsf3x+0x5c>
    5102:	59 3f       	cpi	r21, 0xF9	; 249
    5104:	50 f4       	brcc	.+20     	; 0x511a <__addsf3x+0x4e>
    5106:	50 3e       	cpi	r21, 0xE0	; 224
    5108:	68 f1       	brcs	.+90     	; 0x5164 <__addsf3x+0x98>
    510a:	1a 16       	cp	r1, r26
    510c:	f0 40       	sbci	r31, 0x00	; 0
    510e:	a2 2f       	mov	r26, r18
    5110:	23 2f       	mov	r18, r19
    5112:	34 2f       	mov	r19, r20
    5114:	44 27       	eor	r20, r20
    5116:	58 5f       	subi	r21, 0xF8	; 248
    5118:	f3 cf       	rjmp	.-26     	; 0x5100 <__addsf3x+0x34>
    511a:	46 95       	lsr	r20
    511c:	37 95       	ror	r19
    511e:	27 95       	ror	r18
    5120:	a7 95       	ror	r26
    5122:	f0 40       	sbci	r31, 0x00	; 0
    5124:	53 95       	inc	r21
    5126:	c9 f7       	brne	.-14     	; 0x511a <__addsf3x+0x4e>
    5128:	7e f4       	brtc	.+30     	; 0x5148 <__addsf3x+0x7c>
    512a:	1f 16       	cp	r1, r31
    512c:	ba 0b       	sbc	r27, r26
    512e:	62 0b       	sbc	r22, r18
    5130:	73 0b       	sbc	r23, r19
    5132:	84 0b       	sbc	r24, r20
    5134:	ba f0       	brmi	.+46     	; 0x5164 <__addsf3x+0x98>
    5136:	91 50       	subi	r25, 0x01	; 1
    5138:	a1 f0       	breq	.+40     	; 0x5162 <__addsf3x+0x96>
    513a:	ff 0f       	add	r31, r31
    513c:	bb 1f       	adc	r27, r27
    513e:	66 1f       	adc	r22, r22
    5140:	77 1f       	adc	r23, r23
    5142:	88 1f       	adc	r24, r24
    5144:	c2 f7       	brpl	.-16     	; 0x5136 <__addsf3x+0x6a>
    5146:	0e c0       	rjmp	.+28     	; 0x5164 <__addsf3x+0x98>
    5148:	ba 0f       	add	r27, r26
    514a:	62 1f       	adc	r22, r18
    514c:	73 1f       	adc	r23, r19
    514e:	84 1f       	adc	r24, r20
    5150:	48 f4       	brcc	.+18     	; 0x5164 <__addsf3x+0x98>
    5152:	87 95       	ror	r24
    5154:	77 95       	ror	r23
    5156:	67 95       	ror	r22
    5158:	b7 95       	ror	r27
    515a:	f7 95       	ror	r31
    515c:	9e 3f       	cpi	r25, 0xFE	; 254
    515e:	08 f0       	brcs	.+2      	; 0x5162 <__addsf3x+0x96>
    5160:	b3 cf       	rjmp	.-154    	; 0x50c8 <__addsf3+0x1e>
    5162:	93 95       	inc	r25
    5164:	88 0f       	add	r24, r24
    5166:	08 f0       	brcs	.+2      	; 0x516a <__addsf3x+0x9e>
    5168:	99 27       	eor	r25, r25
    516a:	ee 0f       	add	r30, r30
    516c:	97 95       	ror	r25
    516e:	87 95       	ror	r24
    5170:	08 95       	ret

00005172 <__cmpsf2>:
    5172:	d9 d0       	rcall	.+434    	; 0x5326 <__fp_cmp>
    5174:	08 f4       	brcc	.+2      	; 0x5178 <__cmpsf2+0x6>
    5176:	81 e0       	ldi	r24, 0x01	; 1
    5178:	08 95       	ret

0000517a <__divsf3>:
    517a:	0c d0       	rcall	.+24     	; 0x5194 <__divsf3x>
    517c:	0f c1       	rjmp	.+542    	; 0x539c <__fp_round>
    517e:	07 d1       	rcall	.+526    	; 0x538e <__fp_pscB>
    5180:	40 f0       	brcs	.+16     	; 0x5192 <__divsf3+0x18>
    5182:	fe d0       	rcall	.+508    	; 0x5380 <__fp_pscA>
    5184:	30 f0       	brcs	.+12     	; 0x5192 <__divsf3+0x18>
    5186:	21 f4       	brne	.+8      	; 0x5190 <__divsf3+0x16>
    5188:	5f 3f       	cpi	r21, 0xFF	; 255
    518a:	19 f0       	breq	.+6      	; 0x5192 <__divsf3+0x18>
    518c:	f0 c0       	rjmp	.+480    	; 0x536e <__fp_inf>
    518e:	51 11       	cpse	r21, r1
    5190:	39 c1       	rjmp	.+626    	; 0x5404 <__fp_szero>
    5192:	f3 c0       	rjmp	.+486    	; 0x537a <__fp_nan>

00005194 <__divsf3x>:
    5194:	14 d1       	rcall	.+552    	; 0x53be <__fp_split3>
    5196:	98 f3       	brcs	.-26     	; 0x517e <__divsf3+0x4>

00005198 <__divsf3_pse>:
    5198:	99 23       	and	r25, r25
    519a:	c9 f3       	breq	.-14     	; 0x518e <__divsf3+0x14>
    519c:	55 23       	and	r21, r21
    519e:	b1 f3       	breq	.-20     	; 0x518c <__divsf3+0x12>
    51a0:	95 1b       	sub	r25, r21
    51a2:	55 0b       	sbc	r21, r21
    51a4:	bb 27       	eor	r27, r27
    51a6:	aa 27       	eor	r26, r26
    51a8:	62 17       	cp	r22, r18
    51aa:	73 07       	cpc	r23, r19
    51ac:	84 07       	cpc	r24, r20
    51ae:	38 f0       	brcs	.+14     	; 0x51be <__divsf3_pse+0x26>
    51b0:	9f 5f       	subi	r25, 0xFF	; 255
    51b2:	5f 4f       	sbci	r21, 0xFF	; 255
    51b4:	22 0f       	add	r18, r18
    51b6:	33 1f       	adc	r19, r19
    51b8:	44 1f       	adc	r20, r20
    51ba:	aa 1f       	adc	r26, r26
    51bc:	a9 f3       	breq	.-22     	; 0x51a8 <__divsf3_pse+0x10>
    51be:	33 d0       	rcall	.+102    	; 0x5226 <__divsf3_pse+0x8e>
    51c0:	0e 2e       	mov	r0, r30
    51c2:	3a f0       	brmi	.+14     	; 0x51d2 <__divsf3_pse+0x3a>
    51c4:	e0 e8       	ldi	r30, 0x80	; 128
    51c6:	30 d0       	rcall	.+96     	; 0x5228 <__divsf3_pse+0x90>
    51c8:	91 50       	subi	r25, 0x01	; 1
    51ca:	50 40       	sbci	r21, 0x00	; 0
    51cc:	e6 95       	lsr	r30
    51ce:	00 1c       	adc	r0, r0
    51d0:	ca f7       	brpl	.-14     	; 0x51c4 <__divsf3_pse+0x2c>
    51d2:	29 d0       	rcall	.+82     	; 0x5226 <__divsf3_pse+0x8e>
    51d4:	fe 2f       	mov	r31, r30
    51d6:	27 d0       	rcall	.+78     	; 0x5226 <__divsf3_pse+0x8e>
    51d8:	66 0f       	add	r22, r22
    51da:	77 1f       	adc	r23, r23
    51dc:	88 1f       	adc	r24, r24
    51de:	bb 1f       	adc	r27, r27
    51e0:	26 17       	cp	r18, r22
    51e2:	37 07       	cpc	r19, r23
    51e4:	48 07       	cpc	r20, r24
    51e6:	ab 07       	cpc	r26, r27
    51e8:	b0 e8       	ldi	r27, 0x80	; 128
    51ea:	09 f0       	breq	.+2      	; 0x51ee <__divsf3_pse+0x56>
    51ec:	bb 0b       	sbc	r27, r27
    51ee:	80 2d       	mov	r24, r0
    51f0:	bf 01       	movw	r22, r30
    51f2:	ff 27       	eor	r31, r31
    51f4:	93 58       	subi	r25, 0x83	; 131
    51f6:	5f 4f       	sbci	r21, 0xFF	; 255
    51f8:	2a f0       	brmi	.+10     	; 0x5204 <__divsf3_pse+0x6c>
    51fa:	9e 3f       	cpi	r25, 0xFE	; 254
    51fc:	51 05       	cpc	r21, r1
    51fe:	68 f0       	brcs	.+26     	; 0x521a <__divsf3_pse+0x82>
    5200:	b6 c0       	rjmp	.+364    	; 0x536e <__fp_inf>
    5202:	00 c1       	rjmp	.+512    	; 0x5404 <__fp_szero>
    5204:	5f 3f       	cpi	r21, 0xFF	; 255
    5206:	ec f3       	brlt	.-6      	; 0x5202 <__divsf3_pse+0x6a>
    5208:	98 3e       	cpi	r25, 0xE8	; 232
    520a:	dc f3       	brlt	.-10     	; 0x5202 <__divsf3_pse+0x6a>
    520c:	86 95       	lsr	r24
    520e:	77 95       	ror	r23
    5210:	67 95       	ror	r22
    5212:	b7 95       	ror	r27
    5214:	f7 95       	ror	r31
    5216:	9f 5f       	subi	r25, 0xFF	; 255
    5218:	c9 f7       	brne	.-14     	; 0x520c <__divsf3_pse+0x74>
    521a:	88 0f       	add	r24, r24
    521c:	91 1d       	adc	r25, r1
    521e:	96 95       	lsr	r25
    5220:	87 95       	ror	r24
    5222:	97 f9       	bld	r25, 7
    5224:	08 95       	ret
    5226:	e1 e0       	ldi	r30, 0x01	; 1
    5228:	66 0f       	add	r22, r22
    522a:	77 1f       	adc	r23, r23
    522c:	88 1f       	adc	r24, r24
    522e:	bb 1f       	adc	r27, r27
    5230:	62 17       	cp	r22, r18
    5232:	73 07       	cpc	r23, r19
    5234:	84 07       	cpc	r24, r20
    5236:	ba 07       	cpc	r27, r26
    5238:	20 f0       	brcs	.+8      	; 0x5242 <__divsf3_pse+0xaa>
    523a:	62 1b       	sub	r22, r18
    523c:	73 0b       	sbc	r23, r19
    523e:	84 0b       	sbc	r24, r20
    5240:	ba 0b       	sbc	r27, r26
    5242:	ee 1f       	adc	r30, r30
    5244:	88 f7       	brcc	.-30     	; 0x5228 <__divsf3_pse+0x90>
    5246:	e0 95       	com	r30
    5248:	08 95       	ret

0000524a <__fixsfsi>:
    524a:	04 d0       	rcall	.+8      	; 0x5254 <__fixunssfsi>
    524c:	68 94       	set
    524e:	b1 11       	cpse	r27, r1
    5250:	d9 c0       	rjmp	.+434    	; 0x5404 <__fp_szero>
    5252:	08 95       	ret

00005254 <__fixunssfsi>:
    5254:	bc d0       	rcall	.+376    	; 0x53ce <__fp_splitA>
    5256:	88 f0       	brcs	.+34     	; 0x527a <__fixunssfsi+0x26>
    5258:	9f 57       	subi	r25, 0x7F	; 127
    525a:	90 f0       	brcs	.+36     	; 0x5280 <__fixunssfsi+0x2c>
    525c:	b9 2f       	mov	r27, r25
    525e:	99 27       	eor	r25, r25
    5260:	b7 51       	subi	r27, 0x17	; 23
    5262:	a0 f0       	brcs	.+40     	; 0x528c <__fixunssfsi+0x38>
    5264:	d1 f0       	breq	.+52     	; 0x529a <__fixunssfsi+0x46>
    5266:	66 0f       	add	r22, r22
    5268:	77 1f       	adc	r23, r23
    526a:	88 1f       	adc	r24, r24
    526c:	99 1f       	adc	r25, r25
    526e:	1a f0       	brmi	.+6      	; 0x5276 <__fixunssfsi+0x22>
    5270:	ba 95       	dec	r27
    5272:	c9 f7       	brne	.-14     	; 0x5266 <__fixunssfsi+0x12>
    5274:	12 c0       	rjmp	.+36     	; 0x529a <__fixunssfsi+0x46>
    5276:	b1 30       	cpi	r27, 0x01	; 1
    5278:	81 f0       	breq	.+32     	; 0x529a <__fixunssfsi+0x46>
    527a:	c3 d0       	rcall	.+390    	; 0x5402 <__fp_zero>
    527c:	b1 e0       	ldi	r27, 0x01	; 1
    527e:	08 95       	ret
    5280:	c0 c0       	rjmp	.+384    	; 0x5402 <__fp_zero>
    5282:	67 2f       	mov	r22, r23
    5284:	78 2f       	mov	r23, r24
    5286:	88 27       	eor	r24, r24
    5288:	b8 5f       	subi	r27, 0xF8	; 248
    528a:	39 f0       	breq	.+14     	; 0x529a <__fixunssfsi+0x46>
    528c:	b9 3f       	cpi	r27, 0xF9	; 249
    528e:	cc f3       	brlt	.-14     	; 0x5282 <__fixunssfsi+0x2e>
    5290:	86 95       	lsr	r24
    5292:	77 95       	ror	r23
    5294:	67 95       	ror	r22
    5296:	b3 95       	inc	r27
    5298:	d9 f7       	brne	.-10     	; 0x5290 <__fixunssfsi+0x3c>
    529a:	3e f4       	brtc	.+14     	; 0x52aa <__fixunssfsi+0x56>
    529c:	90 95       	com	r25
    529e:	80 95       	com	r24
    52a0:	70 95       	com	r23
    52a2:	61 95       	neg	r22
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	8f 4f       	sbci	r24, 0xFF	; 255
    52a8:	9f 4f       	sbci	r25, 0xFF	; 255
    52aa:	08 95       	ret

000052ac <__floatunsisf>:
    52ac:	e8 94       	clt
    52ae:	09 c0       	rjmp	.+18     	; 0x52c2 <__floatsisf+0x12>

000052b0 <__floatsisf>:
    52b0:	97 fb       	bst	r25, 7
    52b2:	3e f4       	brtc	.+14     	; 0x52c2 <__floatsisf+0x12>
    52b4:	90 95       	com	r25
    52b6:	80 95       	com	r24
    52b8:	70 95       	com	r23
    52ba:	61 95       	neg	r22
    52bc:	7f 4f       	sbci	r23, 0xFF	; 255
    52be:	8f 4f       	sbci	r24, 0xFF	; 255
    52c0:	9f 4f       	sbci	r25, 0xFF	; 255
    52c2:	99 23       	and	r25, r25
    52c4:	a9 f0       	breq	.+42     	; 0x52f0 <__floatsisf+0x40>
    52c6:	f9 2f       	mov	r31, r25
    52c8:	96 e9       	ldi	r25, 0x96	; 150
    52ca:	bb 27       	eor	r27, r27
    52cc:	93 95       	inc	r25
    52ce:	f6 95       	lsr	r31
    52d0:	87 95       	ror	r24
    52d2:	77 95       	ror	r23
    52d4:	67 95       	ror	r22
    52d6:	b7 95       	ror	r27
    52d8:	f1 11       	cpse	r31, r1
    52da:	f8 cf       	rjmp	.-16     	; 0x52cc <__floatsisf+0x1c>
    52dc:	fa f4       	brpl	.+62     	; 0x531c <__floatsisf+0x6c>
    52de:	bb 0f       	add	r27, r27
    52e0:	11 f4       	brne	.+4      	; 0x52e6 <__floatsisf+0x36>
    52e2:	60 ff       	sbrs	r22, 0
    52e4:	1b c0       	rjmp	.+54     	; 0x531c <__floatsisf+0x6c>
    52e6:	6f 5f       	subi	r22, 0xFF	; 255
    52e8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ea:	8f 4f       	sbci	r24, 0xFF	; 255
    52ec:	9f 4f       	sbci	r25, 0xFF	; 255
    52ee:	16 c0       	rjmp	.+44     	; 0x531c <__floatsisf+0x6c>
    52f0:	88 23       	and	r24, r24
    52f2:	11 f0       	breq	.+4      	; 0x52f8 <__floatsisf+0x48>
    52f4:	96 e9       	ldi	r25, 0x96	; 150
    52f6:	11 c0       	rjmp	.+34     	; 0x531a <__floatsisf+0x6a>
    52f8:	77 23       	and	r23, r23
    52fa:	21 f0       	breq	.+8      	; 0x5304 <__floatsisf+0x54>
    52fc:	9e e8       	ldi	r25, 0x8E	; 142
    52fe:	87 2f       	mov	r24, r23
    5300:	76 2f       	mov	r23, r22
    5302:	05 c0       	rjmp	.+10     	; 0x530e <__floatsisf+0x5e>
    5304:	66 23       	and	r22, r22
    5306:	71 f0       	breq	.+28     	; 0x5324 <__floatsisf+0x74>
    5308:	96 e8       	ldi	r25, 0x86	; 134
    530a:	86 2f       	mov	r24, r22
    530c:	70 e0       	ldi	r23, 0x00	; 0
    530e:	60 e0       	ldi	r22, 0x00	; 0
    5310:	2a f0       	brmi	.+10     	; 0x531c <__floatsisf+0x6c>
    5312:	9a 95       	dec	r25
    5314:	66 0f       	add	r22, r22
    5316:	77 1f       	adc	r23, r23
    5318:	88 1f       	adc	r24, r24
    531a:	da f7       	brpl	.-10     	; 0x5312 <__floatsisf+0x62>
    531c:	88 0f       	add	r24, r24
    531e:	96 95       	lsr	r25
    5320:	87 95       	ror	r24
    5322:	97 f9       	bld	r25, 7
    5324:	08 95       	ret

00005326 <__fp_cmp>:
    5326:	99 0f       	add	r25, r25
    5328:	00 08       	sbc	r0, r0
    532a:	55 0f       	add	r21, r21
    532c:	aa 0b       	sbc	r26, r26
    532e:	e0 e8       	ldi	r30, 0x80	; 128
    5330:	fe ef       	ldi	r31, 0xFE	; 254
    5332:	16 16       	cp	r1, r22
    5334:	17 06       	cpc	r1, r23
    5336:	e8 07       	cpc	r30, r24
    5338:	f9 07       	cpc	r31, r25
    533a:	c0 f0       	brcs	.+48     	; 0x536c <__fp_cmp+0x46>
    533c:	12 16       	cp	r1, r18
    533e:	13 06       	cpc	r1, r19
    5340:	e4 07       	cpc	r30, r20
    5342:	f5 07       	cpc	r31, r21
    5344:	98 f0       	brcs	.+38     	; 0x536c <__fp_cmp+0x46>
    5346:	62 1b       	sub	r22, r18
    5348:	73 0b       	sbc	r23, r19
    534a:	84 0b       	sbc	r24, r20
    534c:	95 0b       	sbc	r25, r21
    534e:	39 f4       	brne	.+14     	; 0x535e <__fp_cmp+0x38>
    5350:	0a 26       	eor	r0, r26
    5352:	61 f0       	breq	.+24     	; 0x536c <__fp_cmp+0x46>
    5354:	23 2b       	or	r18, r19
    5356:	24 2b       	or	r18, r20
    5358:	25 2b       	or	r18, r21
    535a:	21 f4       	brne	.+8      	; 0x5364 <__fp_cmp+0x3e>
    535c:	08 95       	ret
    535e:	0a 26       	eor	r0, r26
    5360:	09 f4       	brne	.+2      	; 0x5364 <__fp_cmp+0x3e>
    5362:	a1 40       	sbci	r26, 0x01	; 1
    5364:	a6 95       	lsr	r26
    5366:	8f ef       	ldi	r24, 0xFF	; 255
    5368:	81 1d       	adc	r24, r1
    536a:	81 1d       	adc	r24, r1
    536c:	08 95       	ret

0000536e <__fp_inf>:
    536e:	97 f9       	bld	r25, 7
    5370:	9f 67       	ori	r25, 0x7F	; 127
    5372:	80 e8       	ldi	r24, 0x80	; 128
    5374:	70 e0       	ldi	r23, 0x00	; 0
    5376:	60 e0       	ldi	r22, 0x00	; 0
    5378:	08 95       	ret

0000537a <__fp_nan>:
    537a:	9f ef       	ldi	r25, 0xFF	; 255
    537c:	80 ec       	ldi	r24, 0xC0	; 192
    537e:	08 95       	ret

00005380 <__fp_pscA>:
    5380:	00 24       	eor	r0, r0
    5382:	0a 94       	dec	r0
    5384:	16 16       	cp	r1, r22
    5386:	17 06       	cpc	r1, r23
    5388:	18 06       	cpc	r1, r24
    538a:	09 06       	cpc	r0, r25
    538c:	08 95       	ret

0000538e <__fp_pscB>:
    538e:	00 24       	eor	r0, r0
    5390:	0a 94       	dec	r0
    5392:	12 16       	cp	r1, r18
    5394:	13 06       	cpc	r1, r19
    5396:	14 06       	cpc	r1, r20
    5398:	05 06       	cpc	r0, r21
    539a:	08 95       	ret

0000539c <__fp_round>:
    539c:	09 2e       	mov	r0, r25
    539e:	03 94       	inc	r0
    53a0:	00 0c       	add	r0, r0
    53a2:	11 f4       	brne	.+4      	; 0x53a8 <__fp_round+0xc>
    53a4:	88 23       	and	r24, r24
    53a6:	52 f0       	brmi	.+20     	; 0x53bc <__fp_round+0x20>
    53a8:	bb 0f       	add	r27, r27
    53aa:	40 f4       	brcc	.+16     	; 0x53bc <__fp_round+0x20>
    53ac:	bf 2b       	or	r27, r31
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <__fp_round+0x18>
    53b0:	60 ff       	sbrs	r22, 0
    53b2:	04 c0       	rjmp	.+8      	; 0x53bc <__fp_round+0x20>
    53b4:	6f 5f       	subi	r22, 0xFF	; 255
    53b6:	7f 4f       	sbci	r23, 0xFF	; 255
    53b8:	8f 4f       	sbci	r24, 0xFF	; 255
    53ba:	9f 4f       	sbci	r25, 0xFF	; 255
    53bc:	08 95       	ret

000053be <__fp_split3>:
    53be:	57 fd       	sbrc	r21, 7
    53c0:	90 58       	subi	r25, 0x80	; 128
    53c2:	44 0f       	add	r20, r20
    53c4:	55 1f       	adc	r21, r21
    53c6:	59 f0       	breq	.+22     	; 0x53de <__fp_splitA+0x10>
    53c8:	5f 3f       	cpi	r21, 0xFF	; 255
    53ca:	71 f0       	breq	.+28     	; 0x53e8 <__fp_splitA+0x1a>
    53cc:	47 95       	ror	r20

000053ce <__fp_splitA>:
    53ce:	88 0f       	add	r24, r24
    53d0:	97 fb       	bst	r25, 7
    53d2:	99 1f       	adc	r25, r25
    53d4:	61 f0       	breq	.+24     	; 0x53ee <__fp_splitA+0x20>
    53d6:	9f 3f       	cpi	r25, 0xFF	; 255
    53d8:	79 f0       	breq	.+30     	; 0x53f8 <__fp_splitA+0x2a>
    53da:	87 95       	ror	r24
    53dc:	08 95       	ret
    53de:	12 16       	cp	r1, r18
    53e0:	13 06       	cpc	r1, r19
    53e2:	14 06       	cpc	r1, r20
    53e4:	55 1f       	adc	r21, r21
    53e6:	f2 cf       	rjmp	.-28     	; 0x53cc <__fp_split3+0xe>
    53e8:	46 95       	lsr	r20
    53ea:	f1 df       	rcall	.-30     	; 0x53ce <__fp_splitA>
    53ec:	08 c0       	rjmp	.+16     	; 0x53fe <__fp_splitA+0x30>
    53ee:	16 16       	cp	r1, r22
    53f0:	17 06       	cpc	r1, r23
    53f2:	18 06       	cpc	r1, r24
    53f4:	99 1f       	adc	r25, r25
    53f6:	f1 cf       	rjmp	.-30     	; 0x53da <__fp_splitA+0xc>
    53f8:	86 95       	lsr	r24
    53fa:	71 05       	cpc	r23, r1
    53fc:	61 05       	cpc	r22, r1
    53fe:	08 94       	sec
    5400:	08 95       	ret

00005402 <__fp_zero>:
    5402:	e8 94       	clt

00005404 <__fp_szero>:
    5404:	bb 27       	eor	r27, r27
    5406:	66 27       	eor	r22, r22
    5408:	77 27       	eor	r23, r23
    540a:	cb 01       	movw	r24, r22
    540c:	97 f9       	bld	r25, 7
    540e:	08 95       	ret

00005410 <__gesf2>:
    5410:	8a df       	rcall	.-236    	; 0x5326 <__fp_cmp>
    5412:	08 f4       	brcc	.+2      	; 0x5416 <__gesf2+0x6>
    5414:	8f ef       	ldi	r24, 0xFF	; 255
    5416:	08 95       	ret

00005418 <__mulsf3>:
    5418:	0b d0       	rcall	.+22     	; 0x5430 <__mulsf3x>
    541a:	c0 cf       	rjmp	.-128    	; 0x539c <__fp_round>
    541c:	b1 df       	rcall	.-158    	; 0x5380 <__fp_pscA>
    541e:	28 f0       	brcs	.+10     	; 0x542a <__mulsf3+0x12>
    5420:	b6 df       	rcall	.-148    	; 0x538e <__fp_pscB>
    5422:	18 f0       	brcs	.+6      	; 0x542a <__mulsf3+0x12>
    5424:	95 23       	and	r25, r21
    5426:	09 f0       	breq	.+2      	; 0x542a <__mulsf3+0x12>
    5428:	a2 cf       	rjmp	.-188    	; 0x536e <__fp_inf>
    542a:	a7 cf       	rjmp	.-178    	; 0x537a <__fp_nan>
    542c:	11 24       	eor	r1, r1
    542e:	ea cf       	rjmp	.-44     	; 0x5404 <__fp_szero>

00005430 <__mulsf3x>:
    5430:	c6 df       	rcall	.-116    	; 0x53be <__fp_split3>
    5432:	a0 f3       	brcs	.-24     	; 0x541c <__mulsf3+0x4>

00005434 <__mulsf3_pse>:
    5434:	95 9f       	mul	r25, r21
    5436:	d1 f3       	breq	.-12     	; 0x542c <__mulsf3+0x14>
    5438:	95 0f       	add	r25, r21
    543a:	50 e0       	ldi	r21, 0x00	; 0
    543c:	55 1f       	adc	r21, r21
    543e:	62 9f       	mul	r22, r18
    5440:	f0 01       	movw	r30, r0
    5442:	72 9f       	mul	r23, r18
    5444:	bb 27       	eor	r27, r27
    5446:	f0 0d       	add	r31, r0
    5448:	b1 1d       	adc	r27, r1
    544a:	63 9f       	mul	r22, r19
    544c:	aa 27       	eor	r26, r26
    544e:	f0 0d       	add	r31, r0
    5450:	b1 1d       	adc	r27, r1
    5452:	aa 1f       	adc	r26, r26
    5454:	64 9f       	mul	r22, r20
    5456:	66 27       	eor	r22, r22
    5458:	b0 0d       	add	r27, r0
    545a:	a1 1d       	adc	r26, r1
    545c:	66 1f       	adc	r22, r22
    545e:	82 9f       	mul	r24, r18
    5460:	22 27       	eor	r18, r18
    5462:	b0 0d       	add	r27, r0
    5464:	a1 1d       	adc	r26, r1
    5466:	62 1f       	adc	r22, r18
    5468:	73 9f       	mul	r23, r19
    546a:	b0 0d       	add	r27, r0
    546c:	a1 1d       	adc	r26, r1
    546e:	62 1f       	adc	r22, r18
    5470:	83 9f       	mul	r24, r19
    5472:	a0 0d       	add	r26, r0
    5474:	61 1d       	adc	r22, r1
    5476:	22 1f       	adc	r18, r18
    5478:	74 9f       	mul	r23, r20
    547a:	33 27       	eor	r19, r19
    547c:	a0 0d       	add	r26, r0
    547e:	61 1d       	adc	r22, r1
    5480:	23 1f       	adc	r18, r19
    5482:	84 9f       	mul	r24, r20
    5484:	60 0d       	add	r22, r0
    5486:	21 1d       	adc	r18, r1
    5488:	82 2f       	mov	r24, r18
    548a:	76 2f       	mov	r23, r22
    548c:	6a 2f       	mov	r22, r26
    548e:	11 24       	eor	r1, r1
    5490:	9f 57       	subi	r25, 0x7F	; 127
    5492:	50 40       	sbci	r21, 0x00	; 0
    5494:	8a f0       	brmi	.+34     	; 0x54b8 <__mulsf3_pse+0x84>
    5496:	e1 f0       	breq	.+56     	; 0x54d0 <__mulsf3_pse+0x9c>
    5498:	88 23       	and	r24, r24
    549a:	4a f0       	brmi	.+18     	; 0x54ae <__mulsf3_pse+0x7a>
    549c:	ee 0f       	add	r30, r30
    549e:	ff 1f       	adc	r31, r31
    54a0:	bb 1f       	adc	r27, r27
    54a2:	66 1f       	adc	r22, r22
    54a4:	77 1f       	adc	r23, r23
    54a6:	88 1f       	adc	r24, r24
    54a8:	91 50       	subi	r25, 0x01	; 1
    54aa:	50 40       	sbci	r21, 0x00	; 0
    54ac:	a9 f7       	brne	.-22     	; 0x5498 <__mulsf3_pse+0x64>
    54ae:	9e 3f       	cpi	r25, 0xFE	; 254
    54b0:	51 05       	cpc	r21, r1
    54b2:	70 f0       	brcs	.+28     	; 0x54d0 <__mulsf3_pse+0x9c>
    54b4:	5c cf       	rjmp	.-328    	; 0x536e <__fp_inf>
    54b6:	a6 cf       	rjmp	.-180    	; 0x5404 <__fp_szero>
    54b8:	5f 3f       	cpi	r21, 0xFF	; 255
    54ba:	ec f3       	brlt	.-6      	; 0x54b6 <__mulsf3_pse+0x82>
    54bc:	98 3e       	cpi	r25, 0xE8	; 232
    54be:	dc f3       	brlt	.-10     	; 0x54b6 <__mulsf3_pse+0x82>
    54c0:	86 95       	lsr	r24
    54c2:	77 95       	ror	r23
    54c4:	67 95       	ror	r22
    54c6:	b7 95       	ror	r27
    54c8:	f7 95       	ror	r31
    54ca:	e7 95       	ror	r30
    54cc:	9f 5f       	subi	r25, 0xFF	; 255
    54ce:	c1 f7       	brne	.-16     	; 0x54c0 <__mulsf3_pse+0x8c>
    54d0:	fe 2b       	or	r31, r30
    54d2:	88 0f       	add	r24, r24
    54d4:	91 1d       	adc	r25, r1
    54d6:	96 95       	lsr	r25
    54d8:	87 95       	ror	r24
    54da:	97 f9       	bld	r25, 7
    54dc:	08 95       	ret

000054de <__mulsi3>:
    54de:	62 9f       	mul	r22, r18
    54e0:	d0 01       	movw	r26, r0
    54e2:	73 9f       	mul	r23, r19
    54e4:	f0 01       	movw	r30, r0
    54e6:	82 9f       	mul	r24, r18
    54e8:	e0 0d       	add	r30, r0
    54ea:	f1 1d       	adc	r31, r1
    54ec:	64 9f       	mul	r22, r20
    54ee:	e0 0d       	add	r30, r0
    54f0:	f1 1d       	adc	r31, r1
    54f2:	92 9f       	mul	r25, r18
    54f4:	f0 0d       	add	r31, r0
    54f6:	83 9f       	mul	r24, r19
    54f8:	f0 0d       	add	r31, r0
    54fa:	74 9f       	mul	r23, r20
    54fc:	f0 0d       	add	r31, r0
    54fe:	65 9f       	mul	r22, r21
    5500:	f0 0d       	add	r31, r0
    5502:	99 27       	eor	r25, r25
    5504:	72 9f       	mul	r23, r18
    5506:	b0 0d       	add	r27, r0
    5508:	e1 1d       	adc	r30, r1
    550a:	f9 1f       	adc	r31, r25
    550c:	63 9f       	mul	r22, r19
    550e:	b0 0d       	add	r27, r0
    5510:	e1 1d       	adc	r30, r1
    5512:	f9 1f       	adc	r31, r25
    5514:	bd 01       	movw	r22, r26
    5516:	cf 01       	movw	r24, r30
    5518:	11 24       	eor	r1, r1
    551a:	08 95       	ret

0000551c <__divmodhi4>:
    551c:	97 fb       	bst	r25, 7
    551e:	09 2e       	mov	r0, r25
    5520:	07 26       	eor	r0, r23
    5522:	0a d0       	rcall	.+20     	; 0x5538 <__divmodhi4_neg1>
    5524:	77 fd       	sbrc	r23, 7
    5526:	04 d0       	rcall	.+8      	; 0x5530 <__divmodhi4_neg2>
    5528:	2e d0       	rcall	.+92     	; 0x5586 <__udivmodhi4>
    552a:	06 d0       	rcall	.+12     	; 0x5538 <__divmodhi4_neg1>
    552c:	00 20       	and	r0, r0
    552e:	1a f4       	brpl	.+6      	; 0x5536 <__divmodhi4_exit>

00005530 <__divmodhi4_neg2>:
    5530:	70 95       	com	r23
    5532:	61 95       	neg	r22
    5534:	7f 4f       	sbci	r23, 0xFF	; 255

00005536 <__divmodhi4_exit>:
    5536:	08 95       	ret

00005538 <__divmodhi4_neg1>:
    5538:	f6 f7       	brtc	.-4      	; 0x5536 <__divmodhi4_exit>
    553a:	90 95       	com	r25
    553c:	81 95       	neg	r24
    553e:	9f 4f       	sbci	r25, 0xFF	; 255
    5540:	08 95       	ret

00005542 <__udivmodsi4>:
    5542:	a1 e2       	ldi	r26, 0x21	; 33
    5544:	1a 2e       	mov	r1, r26
    5546:	aa 1b       	sub	r26, r26
    5548:	bb 1b       	sub	r27, r27
    554a:	fd 01       	movw	r30, r26
    554c:	0d c0       	rjmp	.+26     	; 0x5568 <__udivmodsi4_ep>

0000554e <__udivmodsi4_loop>:
    554e:	aa 1f       	adc	r26, r26
    5550:	bb 1f       	adc	r27, r27
    5552:	ee 1f       	adc	r30, r30
    5554:	ff 1f       	adc	r31, r31
    5556:	a2 17       	cp	r26, r18
    5558:	b3 07       	cpc	r27, r19
    555a:	e4 07       	cpc	r30, r20
    555c:	f5 07       	cpc	r31, r21
    555e:	20 f0       	brcs	.+8      	; 0x5568 <__udivmodsi4_ep>
    5560:	a2 1b       	sub	r26, r18
    5562:	b3 0b       	sbc	r27, r19
    5564:	e4 0b       	sbc	r30, r20
    5566:	f5 0b       	sbc	r31, r21

00005568 <__udivmodsi4_ep>:
    5568:	66 1f       	adc	r22, r22
    556a:	77 1f       	adc	r23, r23
    556c:	88 1f       	adc	r24, r24
    556e:	99 1f       	adc	r25, r25
    5570:	1a 94       	dec	r1
    5572:	69 f7       	brne	.-38     	; 0x554e <__udivmodsi4_loop>
    5574:	60 95       	com	r22
    5576:	70 95       	com	r23
    5578:	80 95       	com	r24
    557a:	90 95       	com	r25
    557c:	9b 01       	movw	r18, r22
    557e:	ac 01       	movw	r20, r24
    5580:	bd 01       	movw	r22, r26
    5582:	cf 01       	movw	r24, r30
    5584:	08 95       	ret

00005586 <__udivmodhi4>:
    5586:	aa 1b       	sub	r26, r26
    5588:	bb 1b       	sub	r27, r27
    558a:	51 e1       	ldi	r21, 0x11	; 17
    558c:	07 c0       	rjmp	.+14     	; 0x559c <__udivmodhi4_ep>

0000558e <__udivmodhi4_loop>:
    558e:	aa 1f       	adc	r26, r26
    5590:	bb 1f       	adc	r27, r27
    5592:	a6 17       	cp	r26, r22
    5594:	b7 07       	cpc	r27, r23
    5596:	10 f0       	brcs	.+4      	; 0x559c <__udivmodhi4_ep>
    5598:	a6 1b       	sub	r26, r22
    559a:	b7 0b       	sbc	r27, r23

0000559c <__udivmodhi4_ep>:
    559c:	88 1f       	adc	r24, r24
    559e:	99 1f       	adc	r25, r25
    55a0:	5a 95       	dec	r21
    55a2:	a9 f7       	brne	.-22     	; 0x558e <__udivmodhi4_loop>
    55a4:	80 95       	com	r24
    55a6:	90 95       	com	r25
    55a8:	bc 01       	movw	r22, r24
    55aa:	cd 01       	movw	r24, r26
    55ac:	08 95       	ret

000055ae <__tablejump2__>:
    55ae:	ee 0f       	add	r30, r30
    55b0:	ff 1f       	adc	r31, r31

000055b2 <__tablejump__>:
    55b2:	05 90       	lpm	r0, Z+
    55b4:	f4 91       	lpm	r31, Z+
    55b6:	e0 2d       	mov	r30, r0
    55b8:	09 94       	ijmp

000055ba <__do_global_dtors>:
    55ba:	11 e0       	ldi	r17, 0x01	; 1
    55bc:	c8 ec       	ldi	r28, 0xC8	; 200
    55be:	d1 e0       	ldi	r29, 0x01	; 1
    55c0:	04 c0       	rjmp	.+8      	; 0x55ca <.do_global_dtors_start>

000055c2 <.do_global_dtors_loop>:
    55c2:	fe 01       	movw	r30, r28
    55c4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__tablejump__>
    55c8:	22 96       	adiw	r28, 0x02	; 2

000055ca <.do_global_dtors_start>:
    55ca:	ca 3c       	cpi	r28, 0xCA	; 202
    55cc:	d1 07       	cpc	r29, r17
    55ce:	c9 f7       	brne	.-14     	; 0x55c2 <.do_global_dtors_loop>
    55d0:	f8 94       	cli

000055d2 <__stop_program>:
    55d2:	ff cf       	rjmp	.-2      	; 0x55d2 <__stop_program>
