
TCLExample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  000058d4  00005968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000058d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012c  00800244  00800244  00005aac  2**0
                  ALLOC
  3 .debug_aranges 00000ec0  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00002b25  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000fb42  00000000  00000000  00009491  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000035b8  00000000  00000000  00018fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000089c1  00000000  00000000  0001c58b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001a00  00000000  00000000  00024f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000046e8  00000000  00000000  0002694c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007081  00000000  00000000  0002b034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e68  00000000  00000000  000320b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  devices = 0;
  parasite = false;
  bitResolution = 9;
  waitForConversion = true;
  checkForConversion = true;
}
       0:	0c 94 03 01 	jmp	0x206	; 0x206 <__dtors_end>

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
}

int year(time_t t) { // the year for the given time
       4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
void OneWire::depower()
{
	noInterrupts();
	DIRECT_MODE_INPUT(baseReg, bitmask);
	interrupts();
}
       8:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

  pinMode(_busy_pin, OUTPUT);
  digitalWrite(_rw_pin, LOW);
}

char OLEDFourBit::readChar(void){
       c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	TCNT4 = 0;
	TIMSK4 = (1<<TOIE4);
#endif
}

void MsTimer2::stop() {
      10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	}
}

BeerTempController::~BeerTempController() {
	// TODO Auto-generated destructor stub
}
      14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	pinMode(_pin, INPUT);
}

Button::~Button() {
	// TODO Auto-generated destructor stub
}
      18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	if(digits < 10)
		Serial.print('0');
	Serial.print(digits);
}

void OLEDPrintDigits(int digits){
      1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	_stateChange = true;
}

Display::~Display() {
	// TODO Auto-generated destructor stub
}
      20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	}
}

FridgeTempController::~FridgeTempController() {
	// TODO Auto-generated destructor stub
}
      24:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__vector_9>
}

//Returns false if it does NOT perform a state change
bool Relay::GetState(){
	return _state;
}
      28:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
#include "Settings.h"

Settings::Settings() {
	// TODO Auto-generated constructor stub

}
      2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	_timer        = 0;
}

TempControl::~TempControl() {
	// TODO Auto-generated destructor stub
}
      30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
	_sensors->setResolution(_resolution);
}

TempSensors::~TempSensors() {
	// TODO Auto-generated destructor stub
}
      34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
      40:	0c 94 93 27 	jmp	0x4f26	; 0x4f26 <__vector_16>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
      48:	0c 94 76 23 	jmp	0x46ec	; 0x46ec <__vector_18>
      4c:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__vector_19>
      50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      54:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      58:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      5c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      60:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      64:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

00000068 <_ZL11dscrc_table>:
      68:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      78:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
      88:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
      98:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
      a8:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
      b8:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
      c8:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
      d8:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
      e8:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
      f8:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     108:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     118:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     128:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     138:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     148:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     158:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000172 <port_to_output_PGM>:
     172:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000017c <port_to_input_PGM>:
     17c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000186 <digital_pin_to_port_PGM>:
     186:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     196:	03 03 03 03                                         ....

0000019a <digital_pin_to_bit_mask_PGM>:
     19a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1aa:	04 08 10 20                                         ... 

000001ae <digital_pin_to_timer_PGM>:
     1ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     1be:	00 00 00 00                                         ....

000001c2 <pstr_inf>:
     1c2:	49 4e 46                                            INF

000001c5 <pstr_inity>:
     1c5:	49 4e 49 54 59                                      INITY

000001ca <pstr_nan>:
     1ca:	4e 41 4e                                            NAN

000001cd <pwr_m10>:
     1cd:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     1dd:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001e5 <pwr_p10>:
     1e5:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     1f5:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001fe <__ctors_start>:
     1fe:	73 18       	sub	r7, r3
     200:	ce 22       	and	r12, r30
     202:	23 25       	eor	r18, r3

00000204 <__ctors_end>:
     204:	6c 18       	sub	r6, r12

00000206 <__dtors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d8 e0       	ldi	r29, 0x08	; 8
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_copy_data>:
     212:	12 e0       	ldi	r17, 0x02	; 2
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	e4 ed       	ldi	r30, 0xD4	; 212
     21a:	f8 e5       	ldi	r31, 0x58	; 88
     21c:	02 c0       	rjmp	.+4      	; 0x222 <.do_copy_data_start>

0000021e <.do_copy_data_loop>:
     21e:	05 90       	lpm	r0, Z+
     220:	0d 92       	st	X+, r0

00000222 <.do_copy_data_start>:
     222:	a4 34       	cpi	r26, 0x44	; 68
     224:	b1 07       	cpc	r27, r17
     226:	d9 f7       	brne	.-10     	; 0x21e <.do_copy_data_loop>

00000228 <__do_clear_bss>:
     228:	13 e0       	ldi	r17, 0x03	; 3
     22a:	a4 e4       	ldi	r26, 0x44	; 68
     22c:	b2 e0       	ldi	r27, 0x02	; 2
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a0 37       	cpi	r26, 0x70	; 112
     234:	b1 07       	cpc	r27, r17
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>

00000238 <__do_global_ctors>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	c4 e0       	ldi	r28, 0x04	; 4
     23c:	d2 e0       	ldi	r29, 0x02	; 2
     23e:	04 c0       	rjmp	.+8      	; 0x248 <.do_global_ctors_start>

00000240 <.do_global_ctors_loop>:
     240:	22 97       	sbiw	r28, 0x02	; 2
     242:	fe 01       	movw	r30, r28
     244:	0e 94 17 2c 	call	0x582e	; 0x582e <__tablejump__>

00000248 <.do_global_ctors_start>:
     248:	ce 3f       	cpi	r28, 0xFE	; 254
     24a:	d1 07       	cpc	r29, r17
     24c:	c9 f7       	brne	.-14     	; 0x240 <.do_global_ctors_loop>
     24e:	0e 94 7e 27 	call	0x4efc	; 0x4efc <main>
     252:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <__do_global_dtors>

00000256 <__bad_interrupt>:
     256:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025a <malloc>:
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	bc 01       	movw	r22, r24
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	91 05       	cpc	r25, r1
     264:	10 f4       	brcc	.+4      	; 0x26a <malloc+0x10>
     266:	62 e0       	ldi	r22, 0x02	; 2
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	a0 91 6c 03 	lds	r26, 0x036C
     26e:	b0 91 6d 03 	lds	r27, 0x036D
     272:	ed 01       	movw	r28, r26
     274:	e0 e0       	ldi	r30, 0x00	; 0
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	21 c0       	rjmp	.+66     	; 0x2c0 <malloc+0x66>
     27e:	88 81       	ld	r24, Y
     280:	99 81       	ldd	r25, Y+1	; 0x01
     282:	86 17       	cp	r24, r22
     284:	97 07       	cpc	r25, r23
     286:	69 f4       	brne	.+26     	; 0x2a2 <malloc+0x48>
     288:	8a 81       	ldd	r24, Y+2	; 0x02
     28a:	9b 81       	ldd	r25, Y+3	; 0x03
     28c:	30 97       	sbiw	r30, 0x00	; 0
     28e:	19 f0       	breq	.+6      	; 0x296 <malloc+0x3c>
     290:	93 83       	std	Z+3, r25	; 0x03
     292:	82 83       	std	Z+2, r24	; 0x02
     294:	04 c0       	rjmp	.+8      	; 0x29e <malloc+0x44>
     296:	90 93 6d 03 	sts	0x036D, r25
     29a:	80 93 6c 03 	sts	0x036C, r24
     29e:	fe 01       	movw	r30, r28
     2a0:	34 c0       	rjmp	.+104    	; 0x30a <malloc+0xb0>
     2a2:	68 17       	cp	r22, r24
     2a4:	79 07       	cpc	r23, r25
     2a6:	38 f4       	brcc	.+14     	; 0x2b6 <malloc+0x5c>
     2a8:	41 15       	cp	r20, r1
     2aa:	51 05       	cpc	r21, r1
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <malloc+0x5a>
     2ae:	84 17       	cp	r24, r20
     2b0:	95 07       	cpc	r25, r21
     2b2:	08 f4       	brcc	.+2      	; 0x2b6 <malloc+0x5c>
     2b4:	ac 01       	movw	r20, r24
     2b6:	fe 01       	movw	r30, r28
     2b8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ba:	9b 81       	ldd	r25, Y+3	; 0x03
     2bc:	9c 01       	movw	r18, r24
     2be:	e9 01       	movw	r28, r18
     2c0:	20 97       	sbiw	r28, 0x00	; 0
     2c2:	e9 f6       	brne	.-70     	; 0x27e <malloc+0x24>
     2c4:	41 15       	cp	r20, r1
     2c6:	51 05       	cpc	r21, r1
     2c8:	a9 f1       	breq	.+106    	; 0x334 <malloc+0xda>
     2ca:	ca 01       	movw	r24, r20
     2cc:	86 1b       	sub	r24, r22
     2ce:	97 0b       	sbc	r25, r23
     2d0:	04 97       	sbiw	r24, 0x04	; 4
     2d2:	08 f4       	brcc	.+2      	; 0x2d6 <malloc+0x7c>
     2d4:	ba 01       	movw	r22, r20
     2d6:	e0 e0       	ldi	r30, 0x00	; 0
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	2a c0       	rjmp	.+84     	; 0x330 <malloc+0xd6>
     2dc:	8d 91       	ld	r24, X+
     2de:	9c 91       	ld	r25, X
     2e0:	11 97       	sbiw	r26, 0x01	; 1
     2e2:	84 17       	cp	r24, r20
     2e4:	95 07       	cpc	r25, r21
     2e6:	f9 f4       	brne	.+62     	; 0x326 <malloc+0xcc>
     2e8:	64 17       	cp	r22, r20
     2ea:	75 07       	cpc	r23, r21
     2ec:	81 f4       	brne	.+32     	; 0x30e <malloc+0xb4>
     2ee:	12 96       	adiw	r26, 0x02	; 2
     2f0:	8d 91       	ld	r24, X+
     2f2:	9c 91       	ld	r25, X
     2f4:	13 97       	sbiw	r26, 0x03	; 3
     2f6:	30 97       	sbiw	r30, 0x00	; 0
     2f8:	19 f0       	breq	.+6      	; 0x300 <malloc+0xa6>
     2fa:	93 83       	std	Z+3, r25	; 0x03
     2fc:	82 83       	std	Z+2, r24	; 0x02
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <malloc+0xae>
     300:	90 93 6d 03 	sts	0x036D, r25
     304:	80 93 6c 03 	sts	0x036C, r24
     308:	fd 01       	movw	r30, r26
     30a:	32 96       	adiw	r30, 0x02	; 2
     30c:	4c c0       	rjmp	.+152    	; 0x3a6 <malloc+0x14c>
     30e:	ca 01       	movw	r24, r20
     310:	86 1b       	sub	r24, r22
     312:	97 0b       	sbc	r25, r23
     314:	fd 01       	movw	r30, r26
     316:	e8 0f       	add	r30, r24
     318:	f9 1f       	adc	r31, r25
     31a:	61 93       	st	Z+, r22
     31c:	71 93       	st	Z+, r23
     31e:	02 97       	sbiw	r24, 0x02	; 2
     320:	8d 93       	st	X+, r24
     322:	9c 93       	st	X, r25
     324:	40 c0       	rjmp	.+128    	; 0x3a6 <malloc+0x14c>
     326:	fd 01       	movw	r30, r26
     328:	82 81       	ldd	r24, Z+2	; 0x02
     32a:	93 81       	ldd	r25, Z+3	; 0x03
     32c:	9c 01       	movw	r18, r24
     32e:	d9 01       	movw	r26, r18
     330:	10 97       	sbiw	r26, 0x00	; 0
     332:	a1 f6       	brne	.-88     	; 0x2dc <malloc+0x82>
     334:	80 91 6a 03 	lds	r24, 0x036A
     338:	90 91 6b 03 	lds	r25, 0x036B
     33c:	89 2b       	or	r24, r25
     33e:	41 f4       	brne	.+16     	; 0x350 <malloc+0xf6>
     340:	80 91 ef 01 	lds	r24, 0x01EF
     344:	90 91 f0 01 	lds	r25, 0x01F0
     348:	90 93 6b 03 	sts	0x036B, r25
     34c:	80 93 6a 03 	sts	0x036A, r24
     350:	40 91 f1 01 	lds	r20, 0x01F1
     354:	50 91 f2 01 	lds	r21, 0x01F2
     358:	41 15       	cp	r20, r1
     35a:	51 05       	cpc	r21, r1
     35c:	41 f4       	brne	.+16     	; 0x36e <malloc+0x114>
     35e:	4d b7       	in	r20, 0x3d	; 61
     360:	5e b7       	in	r21, 0x3e	; 62
     362:	80 91 ed 01 	lds	r24, 0x01ED
     366:	90 91 ee 01 	lds	r25, 0x01EE
     36a:	48 1b       	sub	r20, r24
     36c:	59 0b       	sbc	r21, r25
     36e:	20 91 6a 03 	lds	r18, 0x036A
     372:	30 91 6b 03 	lds	r19, 0x036B
     376:	ca 01       	movw	r24, r20
     378:	82 1b       	sub	r24, r18
     37a:	93 0b       	sbc	r25, r19
     37c:	86 17       	cp	r24, r22
     37e:	97 07       	cpc	r25, r23
     380:	80 f0       	brcs	.+32     	; 0x3a2 <malloc+0x148>
     382:	ab 01       	movw	r20, r22
     384:	4e 5f       	subi	r20, 0xFE	; 254
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	84 17       	cp	r24, r20
     38a:	95 07       	cpc	r25, r21
     38c:	50 f0       	brcs	.+20     	; 0x3a2 <malloc+0x148>
     38e:	42 0f       	add	r20, r18
     390:	53 1f       	adc	r21, r19
     392:	50 93 6b 03 	sts	0x036B, r21
     396:	40 93 6a 03 	sts	0x036A, r20
     39a:	f9 01       	movw	r30, r18
     39c:	61 93       	st	Z+, r22
     39e:	71 93       	st	Z+, r23
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <malloc+0x14c>
     3a2:	e0 e0       	ldi	r30, 0x00	; 0
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	cf 01       	movw	r24, r30
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <free>:
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <free+0xa>
     3b6:	50 c0       	rjmp	.+160    	; 0x458 <free+0xaa>
     3b8:	ec 01       	movw	r28, r24
     3ba:	22 97       	sbiw	r28, 0x02	; 2
     3bc:	1b 82       	std	Y+3, r1	; 0x03
     3be:	1a 82       	std	Y+2, r1	; 0x02
     3c0:	a0 91 6c 03 	lds	r26, 0x036C
     3c4:	b0 91 6d 03 	lds	r27, 0x036D
     3c8:	10 97       	sbiw	r26, 0x00	; 0
     3ca:	09 f1       	breq	.+66     	; 0x40e <free+0x60>
     3cc:	40 e0       	ldi	r20, 0x00	; 0
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	ac 17       	cp	r26, r28
     3d2:	bd 07       	cpc	r27, r29
     3d4:	08 f1       	brcs	.+66     	; 0x418 <free+0x6a>
     3d6:	bb 83       	std	Y+3, r27	; 0x03
     3d8:	aa 83       	std	Y+2, r26	; 0x02
     3da:	fe 01       	movw	r30, r28
     3dc:	21 91       	ld	r18, Z+
     3de:	31 91       	ld	r19, Z+
     3e0:	e2 0f       	add	r30, r18
     3e2:	f3 1f       	adc	r31, r19
     3e4:	ae 17       	cp	r26, r30
     3e6:	bf 07       	cpc	r27, r31
     3e8:	79 f4       	brne	.+30     	; 0x408 <free+0x5a>
     3ea:	8d 91       	ld	r24, X+
     3ec:	9c 91       	ld	r25, X
     3ee:	11 97       	sbiw	r26, 0x01	; 1
     3f0:	28 0f       	add	r18, r24
     3f2:	39 1f       	adc	r19, r25
     3f4:	2e 5f       	subi	r18, 0xFE	; 254
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	39 83       	std	Y+1, r19	; 0x01
     3fa:	28 83       	st	Y, r18
     3fc:	12 96       	adiw	r26, 0x02	; 2
     3fe:	8d 91       	ld	r24, X+
     400:	9c 91       	ld	r25, X
     402:	13 97       	sbiw	r26, 0x03	; 3
     404:	9b 83       	std	Y+3, r25	; 0x03
     406:	8a 83       	std	Y+2, r24	; 0x02
     408:	41 15       	cp	r20, r1
     40a:	51 05       	cpc	r21, r1
     40c:	71 f4       	brne	.+28     	; 0x42a <free+0x7c>
     40e:	d0 93 6d 03 	sts	0x036D, r29
     412:	c0 93 6c 03 	sts	0x036C, r28
     416:	20 c0       	rjmp	.+64     	; 0x458 <free+0xaa>
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	8d 91       	ld	r24, X+
     41c:	9c 91       	ld	r25, X
     41e:	13 97       	sbiw	r26, 0x03	; 3
     420:	ad 01       	movw	r20, r26
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	11 f0       	breq	.+4      	; 0x42a <free+0x7c>
     426:	dc 01       	movw	r26, r24
     428:	d3 cf       	rjmp	.-90     	; 0x3d0 <free+0x22>
     42a:	fa 01       	movw	r30, r20
     42c:	d3 83       	std	Z+3, r29	; 0x03
     42e:	c2 83       	std	Z+2, r28	; 0x02
     430:	21 91       	ld	r18, Z+
     432:	31 91       	ld	r19, Z+
     434:	e2 0f       	add	r30, r18
     436:	f3 1f       	adc	r31, r19
     438:	ce 17       	cp	r28, r30
     43a:	df 07       	cpc	r29, r31
     43c:	69 f4       	brne	.+26     	; 0x458 <free+0xaa>
     43e:	88 81       	ld	r24, Y
     440:	99 81       	ldd	r25, Y+1	; 0x01
     442:	28 0f       	add	r18, r24
     444:	39 1f       	adc	r19, r25
     446:	2e 5f       	subi	r18, 0xFE	; 254
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	fa 01       	movw	r30, r20
     44c:	31 83       	std	Z+1, r19	; 0x01
     44e:	20 83       	st	Z, r18
     450:	8a 81       	ldd	r24, Y+2	; 0x02
     452:	9b 81       	ldd	r25, Y+3	; 0x03
     454:	93 83       	std	Z+3, r25	; 0x03
     456:	82 83       	std	Z+2, r24	; 0x02
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <atof>:
     45e:	66 27       	eor	r22, r22
     460:	77 27       	eor	r23, r23
     462:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <strtod>

00000466 <strcmp>:
     466:	fb 01       	movw	r30, r22
     468:	dc 01       	movw	r26, r24
     46a:	8d 91       	ld	r24, X+
     46c:	01 90       	ld	r0, Z+
     46e:	80 19       	sub	r24, r0
     470:	01 10       	cpse	r0, r1
     472:	d9 f3       	breq	.-10     	; 0x46a <strcmp+0x4>
     474:	99 0b       	sbc	r25, r25
     476:	08 95       	ret

00000478 <strcpy>:
     478:	fb 01       	movw	r30, r22
     47a:	dc 01       	movw	r26, r24
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	00 20       	and	r0, r0
     482:	e1 f7       	brne	.-8      	; 0x47c <strcpy+0x4>
     484:	08 95       	ret

00000486 <strncpy>:
     486:	fb 01       	movw	r30, r22
     488:	dc 01       	movw	r26, r24
     48a:	41 50       	subi	r20, 0x01	; 1
     48c:	50 40       	sbci	r21, 0x00	; 0
     48e:	48 f0       	brcs	.+18     	; 0x4a2 <strncpy+0x1c>
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	00 20       	and	r0, r0
     496:	c9 f7       	brne	.-14     	; 0x48a <strncpy+0x4>
     498:	01 c0       	rjmp	.+2      	; 0x49c <strncpy+0x16>
     49a:	1d 92       	st	X+, r1
     49c:	41 50       	subi	r20, 0x01	; 1
     49e:	50 40       	sbci	r21, 0x00	; 0
     4a0:	e0 f7       	brcc	.-8      	; 0x49a <strncpy+0x14>
     4a2:	08 95       	ret

000004a4 <strtod>:
     4a4:	a0 e0       	ldi	r26, 0x00	; 0
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e8 e5       	ldi	r30, 0x58	; 88
     4aa:	f2 e0       	ldi	r31, 0x02	; 2
     4ac:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__prologue_saves__+0xc>
     4b0:	ec 01       	movw	r28, r24
     4b2:	5b 01       	movw	r10, r22
     4b4:	61 15       	cp	r22, r1
     4b6:	71 05       	cpc	r23, r1
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <strtod+0x1c>
     4ba:	fb 01       	movw	r30, r22
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	f9 90       	ld	r15, Y+
     4c2:	8f 2d       	mov	r24, r15
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 1b 2c 	call	0x5836	; 0x5836 <isspace>
     4ca:	89 2b       	or	r24, r25
     4cc:	c9 f7       	brne	.-14     	; 0x4c0 <strtod+0x1c>
     4ce:	fd e2       	ldi	r31, 0x2D	; 45
     4d0:	ff 16       	cp	r15, r31
     4d2:	21 f4       	brne	.+8      	; 0x4dc <strtod+0x38>
     4d4:	f9 90       	ld	r15, Y+
     4d6:	ee 24       	eor	r14, r14
     4d8:	e3 94       	inc	r14
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <strtod+0x42>
     4dc:	2b e2       	ldi	r18, 0x2B	; 43
     4de:	f2 16       	cp	r15, r18
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <strtod+0x40>
     4e2:	f9 90       	ld	r15, Y+
     4e4:	ee 24       	eor	r14, r14
     4e6:	8e 01       	movw	r16, r28
     4e8:	01 50       	subi	r16, 0x01	; 1
     4ea:	10 40       	sbci	r17, 0x00	; 0
     4ec:	c8 01       	movw	r24, r16
     4ee:	62 ec       	ldi	r22, 0xC2	; 194
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	43 e0       	ldi	r20, 0x03	; 3
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0e 94 b2 03 	call	0x764	; 0x764 <strncasecmp_P>
     4fa:	89 2b       	or	r24, r25
     4fc:	01 f5       	brne	.+64     	; 0x53e <strtod+0x9a>
     4fe:	8e 01       	movw	r16, r28
     500:	0e 5f       	subi	r16, 0xFE	; 254
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	c8 01       	movw	r24, r16
     506:	65 ec       	ldi	r22, 0xC5	; 197
     508:	71 e0       	ldi	r23, 0x01	; 1
     50a:	45 e0       	ldi	r20, 0x05	; 5
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	0e 94 b2 03 	call	0x764	; 0x764 <strncasecmp_P>
     512:	89 2b       	or	r24, r25
     514:	19 f4       	brne	.+6      	; 0x51c <strtod+0x78>
     516:	8e 01       	movw	r16, r28
     518:	09 5f       	subi	r16, 0xF9	; 249
     51a:	1f 4f       	sbci	r17, 0xFF	; 255
     51c:	a1 14       	cp	r10, r1
     51e:	b1 04       	cpc	r11, r1
     520:	19 f0       	breq	.+6      	; 0x528 <strtod+0x84>
     522:	f5 01       	movw	r30, r10
     524:	11 83       	std	Z+1, r17	; 0x01
     526:	00 83       	st	Z, r16
     528:	e0 fc       	sbrc	r14, 0
     52a:	04 c0       	rjmp	.+8      	; 0x534 <strtod+0x90>
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	80 e8       	ldi	r24, 0x80	; 128
     532:	14 c0       	rjmp	.+40     	; 0x55c <strtod+0xb8>
     534:	70 e0       	ldi	r23, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	6f ef       	ldi	r22, 0xFF	; 255
     53c:	08 c1       	rjmp	.+528    	; 0x74e <strtod+0x2aa>
     53e:	c8 01       	movw	r24, r16
     540:	6a ec       	ldi	r22, 0xCA	; 202
     542:	71 e0       	ldi	r23, 0x01	; 1
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 b2 03 	call	0x764	; 0x764 <strncasecmp_P>
     54c:	89 2b       	or	r24, r25
     54e:	69 f4       	brne	.+26     	; 0x56a <strtod+0xc6>
     550:	a1 14       	cp	r10, r1
     552:	b1 04       	cpc	r11, r1
     554:	29 f4       	brne	.+10     	; 0x560 <strtod+0xbc>
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	80 ec       	ldi	r24, 0xC0	; 192
     55c:	6f e7       	ldi	r22, 0x7F	; 127
     55e:	f7 c0       	rjmp	.+494    	; 0x74e <strtod+0x2aa>
     560:	22 96       	adiw	r28, 0x02	; 2
     562:	f5 01       	movw	r30, r10
     564:	d1 83       	std	Z+1, r29	; 0x01
     566:	c0 83       	st	Z, r28
     568:	f6 cf       	rjmp	.-20     	; 0x556 <strtod+0xb2>
     56a:	88 24       	eor	r8, r8
     56c:	99 24       	eor	r9, r9
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	ef 2d       	mov	r30, r15
     578:	e0 53       	subi	r30, 0x30	; 48
     57a:	ea 30       	cpi	r30, 0x0A	; 10
     57c:	a0 f5       	brcc	.+104    	; 0x5e6 <strtod+0x142>
     57e:	f2 e0       	ldi	r31, 0x02	; 2
     580:	ef 2a       	or	r14, r31
     582:	8e 2d       	mov	r24, r14
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9c 01       	movw	r18, r24
     588:	28 70       	andi	r18, 0x08	; 8
     58a:	30 70       	andi	r19, 0x00	; 0
     58c:	e2 fe       	sbrs	r14, 2
     58e:	06 c0       	rjmp	.+12     	; 0x59c <strtod+0xf8>
     590:	23 2b       	or	r18, r19
     592:	79 f5       	brne	.+94     	; 0x5f2 <strtod+0x14e>
     594:	08 94       	sec
     596:	81 1c       	adc	r8, r1
     598:	91 1c       	adc	r9, r1
     59a:	2b c0       	rjmp	.+86     	; 0x5f2 <strtod+0x14e>
     59c:	23 2b       	or	r18, r19
     59e:	19 f0       	breq	.+6      	; 0x5a6 <strtod+0x102>
     5a0:	08 94       	sec
     5a2:	81 08       	sbc	r8, r1
     5a4:	91 08       	sbc	r9, r1
     5a6:	db 01       	movw	r26, r22
     5a8:	ca 01       	movw	r24, r20
     5aa:	12 e0       	ldi	r17, 0x02	; 2
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	aa 1f       	adc	r26, r26
     5b2:	bb 1f       	adc	r27, r27
     5b4:	1a 95       	dec	r17
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <strtod+0x108>
     5b8:	48 0f       	add	r20, r24
     5ba:	59 1f       	adc	r21, r25
     5bc:	6a 1f       	adc	r22, r26
     5be:	7b 1f       	adc	r23, r27
     5c0:	44 0f       	add	r20, r20
     5c2:	55 1f       	adc	r21, r21
     5c4:	66 1f       	adc	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	4e 0f       	add	r20, r30
     5ca:	51 1d       	adc	r21, r1
     5cc:	61 1d       	adc	r22, r1
     5ce:	71 1d       	adc	r23, r1
     5d0:	48 39       	cpi	r20, 0x98	; 152
     5d2:	29 e9       	ldi	r18, 0x99	; 153
     5d4:	52 07       	cpc	r21, r18
     5d6:	29 e9       	ldi	r18, 0x99	; 153
     5d8:	62 07       	cpc	r22, r18
     5da:	29 e1       	ldi	r18, 0x19	; 25
     5dc:	72 07       	cpc	r23, r18
     5de:	48 f0       	brcs	.+18     	; 0x5f2 <strtod+0x14e>
     5e0:	84 e0       	ldi	r24, 0x04	; 4
     5e2:	e8 2a       	or	r14, r24
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <strtod+0x14e>
     5e6:	ee 3f       	cpi	r30, 0xFE	; 254
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <strtod+0x152>
     5ea:	e3 fc       	sbrc	r14, 3
     5ec:	39 c0       	rjmp	.+114    	; 0x660 <strtod+0x1bc>
     5ee:	98 e0       	ldi	r25, 0x08	; 8
     5f0:	e9 2a       	or	r14, r25
     5f2:	f9 90       	ld	r15, Y+
     5f4:	c0 cf       	rjmp	.-128    	; 0x576 <strtod+0xd2>
     5f6:	e5 33       	cpi	r30, 0x35	; 53
     5f8:	11 f0       	breq	.+4      	; 0x5fe <strtod+0x15a>
     5fa:	e5 31       	cpi	r30, 0x15	; 21
     5fc:	89 f5       	brne	.+98     	; 0x660 <strtod+0x1bc>
     5fe:	29 91       	ld	r18, Y+
     600:	2d 32       	cpi	r18, 0x2D	; 45
     602:	19 f4       	brne	.+6      	; 0x60a <strtod+0x166>
     604:	e0 e1       	ldi	r30, 0x10	; 16
     606:	ee 2a       	or	r14, r30
     608:	05 c0       	rjmp	.+10     	; 0x614 <strtod+0x170>
     60a:	2b 32       	cpi	r18, 0x2B	; 43
     60c:	19 f0       	breq	.+6      	; 0x614 <strtod+0x170>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	03 c0       	rjmp	.+6      	; 0x61a <strtod+0x176>
     614:	29 91       	ld	r18, Y+
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	e2 2f       	mov	r30, r18
     61c:	e0 53       	subi	r30, 0x30	; 48
     61e:	ea 30       	cpi	r30, 0x0A	; 10
     620:	18 f0       	brcs	.+6      	; 0x628 <strtod+0x184>
     622:	c8 1b       	sub	r28, r24
     624:	d9 0b       	sbc	r29, r25
     626:	1c c0       	rjmp	.+56     	; 0x660 <strtod+0x1bc>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	fc e0       	ldi	r31, 0x0C	; 12
     62e:	20 38       	cpi	r18, 0x80	; 128
     630:	3f 07       	cpc	r19, r31
     632:	5c f4       	brge	.+22     	; 0x64a <strtod+0x1a6>
     634:	c9 01       	movw	r24, r18
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	28 0f       	add	r18, r24
     640:	39 1f       	adc	r19, r25
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	2e 0f       	add	r18, r30
     648:	31 1d       	adc	r19, r1
     64a:	e9 91       	ld	r30, Y+
     64c:	e0 53       	subi	r30, 0x30	; 48
     64e:	ea 30       	cpi	r30, 0x0A	; 10
     650:	68 f3       	brcs	.-38     	; 0x62c <strtod+0x188>
     652:	e4 fe       	sbrs	r14, 4
     654:	03 c0       	rjmp	.+6      	; 0x65c <strtod+0x1b8>
     656:	30 95       	com	r19
     658:	21 95       	neg	r18
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	82 0e       	add	r8, r18
     65e:	93 1e       	adc	r9, r19
     660:	ce 2c       	mov	r12, r14
     662:	dd 24       	eor	r13, r13
     664:	e1 fe       	sbrs	r14, 1
     666:	07 c0       	rjmp	.+14     	; 0x676 <strtod+0x1d2>
     668:	a1 14       	cp	r10, r1
     66a:	b1 04       	cpc	r11, r1
     66c:	21 f0       	breq	.+8      	; 0x676 <strtod+0x1d2>
     66e:	21 97       	sbiw	r28, 0x01	; 1
     670:	f5 01       	movw	r30, r10
     672:	d1 83       	std	Z+1, r29	; 0x01
     674:	c0 83       	st	Z, r28
     676:	cb 01       	movw	r24, r22
     678:	ba 01       	movw	r22, r20
     67a:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
     67e:	7b 01       	movw	r14, r22
     680:	8c 01       	movw	r16, r24
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	cf 22       	and	r12, r31
     686:	dd 24       	eor	r13, r13
     688:	23 e0       	ldi	r18, 0x03	; 3
     68a:	c2 16       	cp	r12, r18
     68c:	d1 04       	cpc	r13, r1
     68e:	21 f4       	brne	.+8      	; 0x698 <strtod+0x1f4>
     690:	17 fb       	bst	r17, 7
     692:	10 95       	com	r17
     694:	17 f9       	bld	r17, 7
     696:	10 95       	com	r17
     698:	57 01       	movw	r10, r14
     69a:	68 01       	movw	r12, r16
     69c:	c8 01       	movw	r24, r16
     69e:	b7 01       	movw	r22, r14
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
     6ac:	88 23       	and	r24, r24
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <strtod+0x20e>
     6b0:	4a c0       	rjmp	.+148    	; 0x746 <strtod+0x2a2>
     6b2:	97 fe       	sbrs	r9, 7
     6b4:	0d c0       	rjmp	.+26     	; 0x6d0 <strtod+0x22c>
     6b6:	21 ee       	ldi	r18, 0xE1	; 225
     6b8:	e2 2e       	mov	r14, r18
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	f2 2e       	mov	r15, r18
     6be:	90 94       	com	r9
     6c0:	81 94       	neg	r8
     6c2:	91 08       	sbc	r9, r1
     6c4:	93 94       	inc	r9
     6c6:	c0 e2       	ldi	r28, 0x20	; 32
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
     6ca:	00 e0       	ldi	r16, 0x00	; 0
     6cc:	10 e0       	ldi	r17, 0x00	; 0
     6ce:	12 c0       	rjmp	.+36     	; 0x6f4 <strtod+0x250>
     6d0:	99 ef       	ldi	r25, 0xF9	; 249
     6d2:	e9 2e       	mov	r14, r25
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	f9 2e       	mov	r15, r25
     6d8:	f6 cf       	rjmp	.-20     	; 0x6c6 <strtod+0x222>
     6da:	f7 01       	movw	r30, r14
     6dc:	25 91       	lpm	r18, Z+
     6de:	35 91       	lpm	r19, Z+
     6e0:	45 91       	lpm	r20, Z+
     6e2:	54 91       	lpm	r21, Z+
     6e4:	c6 01       	movw	r24, r12
     6e6:	b5 01       	movw	r22, r10
     6e8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
     6ec:	5b 01       	movw	r10, r22
     6ee:	6c 01       	movw	r12, r24
     6f0:	8c 1a       	sub	r8, r28
     6f2:	9d 0a       	sbc	r9, r29
     6f4:	8c 16       	cp	r8, r28
     6f6:	9d 06       	cpc	r9, r29
     6f8:	84 f7       	brge	.-32     	; 0x6da <strtod+0x236>
     6fa:	d5 95       	asr	r29
     6fc:	c7 95       	ror	r28
     6fe:	0f 5f       	subi	r16, 0xFF	; 255
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	06 30       	cpi	r16, 0x06	; 6
     704:	11 05       	cpc	r17, r1
     706:	29 f0       	breq	.+10     	; 0x712 <strtod+0x26e>
     708:	8c ef       	ldi	r24, 0xFC	; 252
     70a:	9f ef       	ldi	r25, 0xFF	; 255
     70c:	e8 0e       	add	r14, r24
     70e:	f9 1e       	adc	r15, r25
     710:	f1 cf       	rjmp	.-30     	; 0x6f4 <strtod+0x250>
     712:	c5 01       	movw	r24, r10
     714:	d6 01       	movw	r26, r12
     716:	7c 01       	movw	r14, r24
     718:	8d 01       	movw	r16, r26
     71a:	8c 2d       	mov	r24, r12
     71c:	88 0f       	add	r24, r24
     71e:	8d 2d       	mov	r24, r13
     720:	88 1f       	adc	r24, r24
     722:	8f 3f       	cpi	r24, 0xFF	; 255
     724:	51 f0       	breq	.+20     	; 0x73a <strtod+0x296>
     726:	c6 01       	movw	r24, r12
     728:	b5 01       	movw	r22, r10
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
     736:	88 23       	and	r24, r24
     738:	31 f4       	brne	.+12     	; 0x746 <strtod+0x2a2>
     73a:	82 e2       	ldi	r24, 0x22	; 34
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	90 93 6f 03 	sts	0x036F, r25
     742:	80 93 6e 03 	sts	0x036E, r24
     746:	7e 2d       	mov	r23, r14
     748:	9f 2d       	mov	r25, r15
     74a:	80 2f       	mov	r24, r16
     74c:	61 2f       	mov	r22, r17
     74e:	27 2f       	mov	r18, r23
     750:	39 2f       	mov	r19, r25
     752:	48 2f       	mov	r20, r24
     754:	56 2f       	mov	r21, r22
     756:	b9 01       	movw	r22, r18
     758:	ca 01       	movw	r24, r20
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	ec e0       	ldi	r30, 0x0C	; 12
     760:	0c 94 48 2c 	jmp	0x5890	; 0x5890 <__epilogue_restores__+0xc>

00000764 <strncasecmp_P>:
     764:	fb 01       	movw	r30, r22
     766:	dc 01       	movw	r26, r24
     768:	41 50       	subi	r20, 0x01	; 1
     76a:	50 40       	sbci	r21, 0x00	; 0
     76c:	88 f0       	brcs	.+34     	; 0x790 <strncasecmp_P+0x2c>
     76e:	8d 91       	ld	r24, X+
     770:	81 34       	cpi	r24, 0x41	; 65
     772:	1c f0       	brlt	.+6      	; 0x77a <strncasecmp_P+0x16>
     774:	8b 35       	cpi	r24, 0x5B	; 91
     776:	0c f4       	brge	.+2      	; 0x77a <strncasecmp_P+0x16>
     778:	80 5e       	subi	r24, 0xE0	; 224
     77a:	65 91       	lpm	r22, Z+
     77c:	61 34       	cpi	r22, 0x41	; 65
     77e:	1c f0       	brlt	.+6      	; 0x786 <strncasecmp_P+0x22>
     780:	6b 35       	cpi	r22, 0x5B	; 91
     782:	0c f4       	brge	.+2      	; 0x786 <strncasecmp_P+0x22>
     784:	60 5e       	subi	r22, 0xE0	; 224
     786:	86 1b       	sub	r24, r22
     788:	61 11       	cpse	r22, r1
     78a:	71 f3       	breq	.-36     	; 0x768 <strncasecmp_P+0x4>
     78c:	99 0b       	sbc	r25, r25
     78e:	08 95       	ret
     790:	88 1b       	sub	r24, r24
     792:	fc cf       	rjmp	.-8      	; 0x78c <strncasecmp_P+0x28>

00000794 <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
     794:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
     796:	80 e9       	ldi	r24, 0x90	; 144
     798:	94 e0       	ldi	r25, 0x04	; 4
     79a:	92 8b       	std	Z+18, r25	; 0x12
     79c:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
     79e:	76 83       	std	Z+6, r23	; 0x06
     7a0:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
     7a2:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
     7a4:	10 82       	st	Z, r1
  bitResolution = 9;
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
     7ae:	83 83       	std	Z+3, r24	; 0x03
}
     7b0:	08 95       	ret

000007b2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
{
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
     7b2:	6f 92       	push	r6
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	fb 01       	movw	r30, r22
     7d0:	ea 01       	movw	r28, r20
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
     7d2:	99 81       	ldd	r25, Y+1	; 0x01
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	28 81       	ld	r18, Y
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	28 2b       	or	r18, r24
     7dc:	39 2b       	or	r19, r25

  switch (deviceAddress[0])
     7de:	e0 81       	ld	r30, Z
     7e0:	e2 32       	cpi	r30, 0x22	; 34
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
     7e4:	e8 32       	cpi	r30, 0x28	; 40
     7e6:	21 f0       	breq	.+8      	; 0x7f0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
     7e8:	e0 31       	cpi	r30, 0x10	; 16
     7ea:	09 f0       	breq	.+2      	; 0x7ee <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3c>
     7ec:	84 c0       	rjmp	.+264    	; 0x8f6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     7ee:	4b c0       	rjmp	.+150    	; 0x886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd4>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
     7f0:	4c 81       	ldd	r20, Y+4	; 0x04
     7f2:	4f 33       	cpi	r20, 0x3F	; 63
     7f4:	29 f1       	breq	.+74     	; 0x840 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x8e>
     7f6:	40 34       	cpi	r20, 0x40	; 64
     7f8:	20 f4       	brcc	.+8      	; 0x802 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x50>
     7fa:	4f 31       	cpi	r20, 0x1F	; 31
     7fc:	09 f0       	breq	.+2      	; 0x800 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
     7fe:	7b c0       	rjmp	.+246    	; 0x8f6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     800:	2f c0       	rjmp	.+94     	; 0x860 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
     802:	4f 35       	cpi	r20, 0x5F	; 95
     804:	79 f0       	breq	.+30     	; 0x824 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x72>
     806:	4f 37       	cpi	r20, 0x7F	; 127
     808:	09 f0       	breq	.+2      	; 0x80c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x5a>
     80a:	75 c0       	rjmp	.+234    	; 0x8f6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
     80c:	b9 01       	movw	r22, r18
     80e:	88 27       	eor	r24, r24
     810:	77 fd       	sbrc	r23, 7
     812:	80 95       	com	r24
     814:	98 2f       	mov	r25, r24
     816:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e8       	ldi	r20, 0x80	; 128
     820:	5d e3       	ldi	r21, 0x3D	; 61
     822:	2e c0       	rjmp	.+92     	; 0x880 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
     824:	35 95       	asr	r19
     826:	27 95       	ror	r18
     828:	b9 01       	movw	r22, r18
     82a:	88 27       	eor	r24, r24
     82c:	77 fd       	sbrc	r23, 7
     82e:	80 95       	com	r24
     830:	98 2f       	mov	r25, r24
     832:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	5e e3       	ldi	r21, 0x3E	; 62
     83e:	20 c0       	rjmp	.+64     	; 0x880 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
     840:	35 95       	asr	r19
     842:	27 95       	ror	r18
     844:	35 95       	asr	r19
     846:	27 95       	ror	r18
     848:	b9 01       	movw	r22, r18
     84a:	88 27       	eor	r24, r24
     84c:	77 fd       	sbrc	r23, 7
     84e:	80 95       	com	r24
     850:	98 2f       	mov	r25, r24
     852:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e8       	ldi	r20, 0x80	; 128
     85c:	5e e3       	ldi	r21, 0x3E	; 62
     85e:	10 c0       	rjmp	.+32     	; 0x880 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	35 95       	asr	r19
     864:	27 95       	ror	r18
     866:	9a 95       	dec	r25
     868:	e1 f7       	brne	.-8      	; 0x862 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
     86a:	b9 01       	movw	r22, r18
     86c:	88 27       	eor	r24, r24
     86e:	77 fd       	sbrc	r23, 7
     870:	80 95       	com	r24
     872:	98 2f       	mov	r25, r24
     874:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
     884:	32 c0       	rjmp	.+100    	; 0x8ea <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
     886:	ef 80       	ldd	r14, Y+7	; 0x07
     888:	35 95       	asr	r19
     88a:	27 95       	ror	r18
     88c:	b9 01       	movw	r22, r18
     88e:	88 27       	eor	r24, r24
     890:	77 fd       	sbrc	r23, 7
     892:	80 95       	com	r24
     894:	98 2f       	mov	r25, r24
     896:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5e e3       	ldi	r21, 0x3E	; 62
     8a2:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
     8a6:	3b 01       	movw	r6, r22
     8a8:	4c 01       	movw	r8, r24
     8aa:	6e 2d       	mov	r22, r14
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	2e 81       	ldd	r18, Y+6	; 0x06
     8b0:	62 1b       	sub	r22, r18
     8b2:	71 09       	sbc	r23, r1
     8b4:	88 27       	eor	r24, r24
     8b6:	77 fd       	sbrc	r23, 7
     8b8:	80 95       	com	r24
     8ba:	98 2f       	mov	r25, r24
     8bc:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
     8c0:	5b 01       	movw	r10, r22
     8c2:	6c 01       	movw	r12, r24
     8c4:	ff 24       	eor	r15, r15
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	c8 01       	movw	r24, r16
     8cc:	b7 01       	movw	r22, r14
     8ce:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
     8d2:	9b 01       	movw	r18, r22
     8d4:	ac 01       	movw	r20, r24
     8d6:	c6 01       	movw	r24, r12
     8d8:	b5 01       	movw	r22, r10
     8da:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24
     8e2:	c4 01       	movw	r24, r8
     8e4:	b3 01       	movw	r22, r6
     8e6:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
     8ea:	9b 01       	movw	r18, r22
     8ec:	ac 01       	movw	r20, r24
      break;
  }
}
     8ee:	83 2f       	mov	r24, r19
     8f0:	94 2f       	mov	r25, r20
     8f2:	75 2f       	mov	r23, r21
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x144>
     8f6:	26 2f       	mov	r18, r22
     8f8:	38 2f       	mov	r19, r24
     8fa:	49 2f       	mov	r20, r25
     8fc:	57 2f       	mov	r21, r23
     8fe:	b9 01       	movw	r22, r18
     900:	ca 01       	movw	r24, r20
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	ff 90       	pop	r15
     90c:	ef 90       	pop	r14
     90e:	df 90       	pop	r13
     910:	cf 90       	pop	r12
     912:	bf 90       	pop	r11
     914:	af 90       	pop	r10
     916:	9f 90       	pop	r9
     918:	8f 90       	pop	r8
     91a:	7f 90       	pop	r7
     91c:	6f 90       	pop	r6
     91e:	08 95       	ret

00000920 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
     920:	08 95       	ret

00000922 <_ZN17DallasTemperature15readPowerSupplyEPh>:
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	8c 01       	movw	r16, r24
     92c:	7b 01       	movw	r14, r22
{
  bool ret = false;
  _wire->reset();
     92e:	fc 01       	movw	r30, r24
     930:	85 81       	ldd	r24, Z+5	; 0x05
     932:	96 81       	ldd	r25, Z+6	; 0x06
     934:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     938:	f8 01       	movw	r30, r16
     93a:	85 81       	ldd	r24, Z+5	; 0x05
     93c:	96 81       	ldd	r25, Z+6	; 0x06
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN7OneWire6selectEPh>
  _wire->write(READPOWERSUPPLY);
     944:	f8 01       	movw	r30, r16
     946:	85 81       	ldd	r24, Z+5	; 0x05
     948:	96 81       	ldd	r25, Z+6	; 0x06
     94a:	64 eb       	ldi	r22, 0xB4	; 180
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
     952:	f8 01       	movw	r30, r16
     954:	85 81       	ldd	r24, Z+5	; 0x05
     956:	96 81       	ldd	r25, Z+6	; 0x06
     958:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7OneWire8read_bitEv>
     95c:	f8 2e       	mov	r15, r24
  _wire->reset();
     95e:	f8 01       	movw	r30, r16
     960:	85 81       	ldd	r24, Z+5	; 0x05
     962:	96 81       	ldd	r25, Z+6	; 0x06
     964:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	ff 20       	and	r15, r15
     96c:	09 f4       	brne	.+2      	; 0x970 <_ZN17DallasTemperature15readPowerSupplyEPh+0x4e>
     96e:	81 e0       	ldi	r24, 0x01	; 1
  return ret;
}
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	ff 90       	pop	r15
     976:	ef 90       	pop	r14
     978:	08 95       	ret

0000097a <_ZN17DallasTemperature15writeScratchPadEPhPKh>:

  _wire->reset();
}

// writes device's scratch pad
void DallasTemperature::writeScratchPad(uint8_t* deviceAddress, const uint8_t* scratchPad)
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
     988:	8b 01       	movw	r16, r22
     98a:	7a 01       	movw	r14, r20
{
  _wire->reset();
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	9e 81       	ldd	r25, Y+6	; 0x06
     990:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     994:	8d 81       	ldd	r24, Y+5	; 0x05
     996:	9e 81       	ldd	r25, Y+6	; 0x06
     998:	b8 01       	movw	r22, r16
     99a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN7OneWire6selectEPh>
  _wire->write(WRITESCRATCH);
     99e:	8d 81       	ldd	r24, Y+5	; 0x05
     9a0:	9e 81       	ldd	r25, Y+6	; 0x06
     9a2:	6e e4       	ldi	r22, 0x4E	; 78
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[HIGH_ALARM_TEMP]); // high alarm temp
     9aa:	8d 81       	ldd	r24, Y+5	; 0x05
     9ac:	9e 81       	ldd	r25, Y+6	; 0x06
     9ae:	f7 01       	movw	r30, r14
     9b0:	62 81       	ldd	r22, Z+2	; 0x02
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[LOW_ALARM_TEMP]); // low alarm temp
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	9e 81       	ldd	r25, Y+6	; 0x06
     9bc:	f7 01       	movw	r30, r14
     9be:	63 81       	ldd	r22, Z+3	; 0x03
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  // DS18S20 does not use the configuration register
  if (deviceAddress[0] != DS18S20MODEL) _wire->write(scratchPad[CONFIGURATION]); // configuration
     9c6:	f8 01       	movw	r30, r16
     9c8:	80 81       	ld	r24, Z
     9ca:	80 31       	cpi	r24, 0x10	; 16
     9cc:	39 f0       	breq	.+14     	; 0x9dc <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x62>
     9ce:	8d 81       	ldd	r24, Y+5	; 0x05
     9d0:	9e 81       	ldd	r25, Y+6	; 0x06
     9d2:	f7 01       	movw	r30, r14
     9d4:	64 81       	ldd	r22, Z+4	; 0x04
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  _wire->reset();
     9dc:	8d 81       	ldd	r24, Y+5	; 0x05
     9de:	9e 81       	ldd	r25, Y+6	; 0x06
     9e0:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
  // save the newly written values to eeprom
  _wire->write(COPYSCRATCH, parasite);
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	68 e4       	ldi	r22, 0x48	; 72
     9ea:	48 81       	ld	r20, Y
     9ec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
  if (parasite) delay(10); // 10ms delay
     9f0:	88 81       	ld	r24, Y
     9f2:	88 23       	and	r24, r24
     9f4:	31 f0       	breq	.+12     	; 0xa02 <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x88>
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <delay>
  _wire->reset();
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  readScratchPad(deviceAddress, scratchPad);
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	8c 01       	movw	r16, r24
     a26:	6b 01       	movw	r12, r22
     a28:	7a 01       	movw	r14, r20
{
  // send the command
  _wire->reset();
     a2a:	fc 01       	movw	r30, r24
     a2c:	85 81       	ldd	r24, Z+5	; 0x05
     a2e:	96 81       	ldd	r25, Z+6	; 0x06
     a30:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
     a34:	f8 01       	movw	r30, r16
     a36:	85 81       	ldd	r24, Z+5	; 0x05
     a38:	96 81       	ldd	r25, Z+6	; 0x06
     a3a:	b6 01       	movw	r22, r12
     a3c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <_ZN7OneWire6selectEPh>
  _wire->write(READSCRATCH);
     a40:	f8 01       	movw	r30, r16
     a42:	85 81       	ldd	r24, Z+5	; 0x05
     a44:	96 81       	ldd	r25, Z+6	; 0x06
     a46:	6e eb       	ldi	r22, 0xBE	; 190
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
     a4e:	f8 01       	movw	r30, r16
     a50:	85 81       	ldd	r24, Z+5	; 0x05
     a52:	96 81       	ldd	r25, Z+6	; 0x06
     a54:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a58:	f7 01       	movw	r30, r14
     a5a:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
     a5c:	f8 01       	movw	r30, r16
     a5e:	85 81       	ldd	r24, Z+5	; 0x05
     a60:	96 81       	ldd	r25, Z+6	; 0x06
     a62:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a66:	f7 01       	movw	r30, r14
     a68:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
     a6a:	f8 01       	movw	r30, r16
     a6c:	85 81       	ldd	r24, Z+5	; 0x05
     a6e:	96 81       	ldd	r25, Z+6	; 0x06
     a70:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a74:	f7 01       	movw	r30, r14
     a76:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
     a78:	f8 01       	movw	r30, r16
     a7a:	85 81       	ldd	r24, Z+5	; 0x05
     a7c:	96 81       	ldd	r25, Z+6	; 0x06
     a7e:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a82:	f7 01       	movw	r30, r14
     a84:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
     a86:	f8 01       	movw	r30, r16
     a88:	85 81       	ldd	r24, Z+5	; 0x05
     a8a:	96 81       	ldd	r25, Z+6	; 0x06
     a8c:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a90:	f7 01       	movw	r30, r14
     a92:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
     a94:	f8 01       	movw	r30, r16
     a96:	85 81       	ldd	r24, Z+5	; 0x05
     a98:	96 81       	ldd	r25, Z+6	; 0x06
     a9a:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     a9e:	f7 01       	movw	r30, r14
     aa0:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
     aa2:	f8 01       	movw	r30, r16
     aa4:	85 81       	ldd	r24, Z+5	; 0x05
     aa6:	96 81       	ldd	r25, Z+6	; 0x06
     aa8:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     aac:	f7 01       	movw	r30, r14
     aae:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
     ab0:	f8 01       	movw	r30, r16
     ab2:	85 81       	ldd	r24, Z+5	; 0x05
     ab4:	96 81       	ldd	r25, Z+6	; 0x06
     ab6:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     aba:	f7 01       	movw	r30, r14
     abc:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
     abe:	f8 01       	movw	r30, r16
     ac0:	85 81       	ldd	r24, Z+5	; 0x05
     ac2:	96 81       	ldd	r25, Z+6	; 0x06
     ac4:	0e 94 05 0a 	call	0x140a	; 0x140a <_ZN7OneWire4readEv>
     ac8:	f7 01       	movw	r30, r14
     aca:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
     acc:	f8 01       	movw	r30, r16
     ace:	85 81       	ldd	r24, Z+5	; 0x05
     ad0:	96 81       	ldd	r25, Z+6	; 0x06
     ad2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
}
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret

00000ae4 <_ZN17DallasTemperature21isConversionAvailableEPh>:
bool DallasTemperature::getCheckForConversion()
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	29 97       	sbiw	r28, 0x09	; 9
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
{
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
     af8:	ae 01       	movw	r20, r28
     afa:	4f 5f       	subi	r20, 0xFF	; 255
     afc:	5f 4f       	sbci	r21, 0xFF	; 255
     afe:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN17DallasTemperature14readScratchPadEPhS0_>
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	81 11       	cpse	r24, r1
     b06:	81 e0       	ldi	r24, 0x01	; 1
	return scratchPad[0];
}	
     b08:	29 96       	adiw	r28, 0x09	; 9
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
     b2c:	6b 01       	movw	r12, r22
{
	if(deviceAddress != 0 && checkForConversion && !parasite)
     b2e:	45 2b       	or	r20, r21
     b30:	e1 f0       	breq	.+56     	; 0xb6a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	88 23       	and	r24, r24
     b36:	c9 f0       	breq	.+50     	; 0xb6a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     b38:	88 81       	ld	r24, Y
     b3a:	88 23       	and	r24, r24
     b3c:	b1 f4       	brne	.+44     	; 0xb6a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
     b3e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
     b42:	7b 01       	movw	r14, r22
     b44:	8c 01       	movw	r16, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
     b46:	ce 01       	movw	r24, r28
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	0e 94 72 05 	call	0xae4	; 0xae4 <_ZN17DallasTemperature21isConversionAvailableEPh>
     b50:	88 23       	and	r24, r24
     b52:	59 f4       	brne	.+22     	; 0xb6a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x50>
     b54:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
     b58:	6e 19       	sub	r22, r14
     b5a:	7f 09       	sbc	r23, r15
     b5c:	80 0b       	sbc	r24, r16
     b5e:	91 0b       	sbc	r25, r17
     b60:	6e 5e       	subi	r22, 0xEE	; 238
     b62:	72 40       	sbci	r23, 0x02	; 2
     b64:	80 40       	sbci	r24, 0x00	; 0
     b66:	90 40       	sbci	r25, 0x00	; 0
     b68:	70 f3       	brcs	.-36     	; 0xb46 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
     b6a:	f6 01       	movw	r30, r12
     b6c:	60 81       	ld	r22, Z
     b6e:	69 30       	cpi	r22, 0x09	; 9
     b70:	39 f0       	breq	.+14     	; 0xb80 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
     b72:	69 30       	cpi	r22, 0x09	; 9
     b74:	a0 f0       	brcs	.+40     	; 0xb9e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
     b76:	6a 30       	cpi	r22, 0x0A	; 10
     b78:	41 f0       	breq	.+16     	; 0xb8a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
     b7a:	6b 30       	cpi	r22, 0x0B	; 11
     b7c:	81 f4       	brne	.+32     	; 0xb9e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x84>
     b7e:	0a c0       	rjmp	.+20     	; 0xb94 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7a>
	  {
	    case 9:
	      delay(94);
     b80:	6e e5       	ldi	r22, 0x5E	; 94
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e c0       	rjmp	.+28     	; 0xba6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 10:
	      delay(188);
     b8a:	6c eb       	ldi	r22, 0xBC	; 188
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	09 c0       	rjmp	.+18     	; 0xba6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 11:
	      delay(375);
     b94:	67 e7       	ldi	r22, 0x77	; 119
     b96:	71 e0       	ldi	r23, 0x01	; 1
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x8c>
	      break;
	    case 12:
	    default:
	      delay(750);
     b9e:	6e ee       	ldi	r22, 0xEE	; 238
     ba0:	72 e0       	ldi	r23, 0x02	; 2
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <delay>
	      break;
	  }

}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	08 95       	ret

00000bbc <_ZN17DallasTemperature19requestTemperaturesEv>:
	return scratchPad[0];
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
{
  _wire->reset();
     bc2:	8d 81       	ldd	r24, Y+5	; 0x05
     bc4:	9e 81       	ldd	r25, Y+6	; 0x06
     bc6:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
  _wire->skip();
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	9e 81       	ldd	r25, Y+6	; 0x06
     bce:	0e 94 96 0a 	call	0x152c	; 0x152c <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	9e 81       	ldd	r25, Y+6	; 0x06
     bd6:	64 e4       	ldi	r22, 0x44	; 68
     bd8:	48 81       	ld	r20, Y
     bda:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	88 23       	and	r24, r24
     be2:	39 f0       	breq	.+14     	; 0xbf2 <_ZN17DallasTemperature19requestTemperaturesEv+0x36>
  blockTillConversionComplete(&bitResolution, 0);
     be4:	ce 01       	movw	r24, r28
     be6:	21 96       	adiw	r28, 0x01	; 1
     be8:	be 01       	movw	r22, r28
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <_ZN17DallasTemperature11isConnectedEPhS0_>:
  return isConnected(deviceAddress, scratchPad);
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	8a 01       	movw	r16, r20
{
  readScratchPad(deviceAddress, scratchPad);
     bfe:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
     c02:	c8 01       	movw	r24, r16
     c04:	68 e0       	ldi	r22, 0x08	; 8
     c06:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7OneWire4crc8EPhh>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	f8 01       	movw	r30, r16
     c0e:	90 85       	ldd	r25, Z+8	; 0x08
     c10:	89 17       	cp	r24, r25
     c12:	09 f4       	brne	.+2      	; 0xc16 <_ZN17DallasTemperature11isConnectedEPhS0_+0x1e>
     c14:	21 e0       	ldi	r18, 0x01	; 1
}
     c16:	82 2f       	mov	r24, r18
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	08 95       	ret

00000c1e <_ZN17DallasTemperature8getTempCEPh>:
// returns temperature in degrees C or DEVICE_DISCONNECTED if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	0f 93       	push	r16
     c28:	1f 93       	push	r17
     c2a:	df 93       	push	r29
     c2c:	cf 93       	push	r28
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	29 97       	sbiw	r28, 0x09	; 9
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	8c 01       	movw	r16, r24
     c40:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
     c42:	6e 01       	movw	r12, r28
     c44:	08 94       	sec
     c46:	c1 1c       	adc	r12, r1
     c48:	d1 1c       	adc	r13, r1
     c4a:	a6 01       	movw	r20, r12
     c4c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN17DallasTemperature11isConnectedEPhS0_>
     c50:	88 23       	and	r24, r24
     c52:	29 f4       	brne	.+10     	; 0xc5e <_ZN17DallasTemperature8getTempCEPh+0x40>
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	8e ef       	ldi	r24, 0xFE	; 254
     c5a:	92 ec       	ldi	r25, 0xC2	; 194
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <_ZN17DallasTemperature8getTempCEPh+0x4a>
     c5e:	c8 01       	movw	r24, r16
     c60:	b7 01       	movw	r22, r14
     c62:	a6 01       	movw	r20, r12
     c64:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  return DEVICE_DISCONNECTED;
}
     c68:	29 96       	adiw	r28, 0x09	; 9
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret

00000c86 <_ZN17DallasTemperature13getResolutionEPh>:
	return bitResolution;
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	29 97       	sbiw	r28, 0x09	; 9
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	9c 01       	movw	r18, r24
     c9c:	fb 01       	movw	r30, r22
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
     c9e:	80 81       	ld	r24, Z
     ca0:	80 31       	cpi	r24, 0x10	; 16
     ca2:	d9 f0       	breq	.+54     	; 0xcda <_ZN17DallasTemperature13getResolutionEPh+0x54>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     ca4:	c9 01       	movw	r24, r18
     ca6:	ae 01       	movw	r20, r28
     ca8:	4f 5f       	subi	r20, 0xFF	; 255
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN17DallasTemperature11isConnectedEPhS0_>
     cb0:	88 23       	and	r24, r24
     cb2:	a9 f0       	breq	.+42     	; 0xcde <_ZN17DallasTemperature13getResolutionEPh+0x58>
  {
	switch (scratchPad[CONFIGURATION])
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	8f 33       	cpi	r24, 0x3F	; 63
     cb8:	71 f0       	breq	.+28     	; 0xcd6 <_ZN17DallasTemperature13getResolutionEPh+0x50>
     cba:	80 34       	cpi	r24, 0x40	; 64
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <_ZN17DallasTemperature13getResolutionEPh+0x3e>
     cbe:	8f 31       	cpi	r24, 0x1F	; 31
     cc0:	71 f4       	brne	.+28     	; 0xcde <_ZN17DallasTemperature13getResolutionEPh+0x58>
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <_ZN17DallasTemperature13getResolutionEPh+0x54>
     cc4:	8f 35       	cpi	r24, 0x5F	; 95
     cc6:	19 f0       	breq	.+6      	; 0xcce <_ZN17DallasTemperature13getResolutionEPh+0x48>
     cc8:	8f 37       	cpi	r24, 0x7F	; 127
     cca:	49 f4       	brne	.+18     	; 0xcde <_ZN17DallasTemperature13getResolutionEPh+0x58>
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <_ZN17DallasTemperature13getResolutionEPh+0x4c>
     cce:	8b e0       	ldi	r24, 0x0B	; 11
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     cd2:	8c e0       	ldi	r24, 0x0C	; 12
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
     cda:	89 e0       	ldi	r24, 0x09	; 9
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     cde:	80 e0       	ldi	r24, 0x00	; 0
        return 9;
        
	}
  }
  return 0;
}
     ce0:	29 96       	adiw	r28, 0x09	; 9
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	cf 91       	pop	r28
     cee:	df 91       	pop	r29
     cf0:	08 95       	ret

00000cf2 <_ZN17DallasTemperature13setResolutionEPhh>:
  }
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used. 
bool DallasTemperature::setResolution(uint8_t* deviceAddress, uint8_t newResolution)
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	1f 93       	push	r17
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	29 97       	sbiw	r28, 0x09	; 9
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	6c 01       	movw	r12, r24
     d12:	7b 01       	movw	r14, r22
     d14:	14 2f       	mov	r17, r20
{
  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
     d16:	ae 01       	movw	r20, r28
     d18:	4f 5f       	subi	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_ZN17DallasTemperature11isConnectedEPhS0_>
     d20:	88 23       	and	r24, r24
     d22:	e1 f0       	breq	.+56     	; 0xd5c <_ZN17DallasTemperature13setResolutionEPhh+0x6a>
  {
    // DS18S20 has a fixed 9-bit resolution
    if (deviceAddress[0] != DS18S20MODEL)
     d24:	f7 01       	movw	r30, r14
     d26:	80 81       	ld	r24, Z
     d28:	80 31       	cpi	r24, 0x10	; 16
     d2a:	b9 f0       	breq	.+46     	; 0xd5a <_ZN17DallasTemperature13setResolutionEPhh+0x68>
    {
      switch (newResolution)
     d2c:	1a 30       	cpi	r17, 0x0A	; 10
     d2e:	51 f0       	breq	.+20     	; 0xd44 <_ZN17DallasTemperature13setResolutionEPhh+0x52>
     d30:	1a 30       	cpi	r17, 0x0A	; 10
     d32:	50 f0       	brcs	.+20     	; 0xd48 <_ZN17DallasTemperature13setResolutionEPhh+0x56>
     d34:	1b 30       	cpi	r17, 0x0B	; 11
     d36:	21 f0       	breq	.+8      	; 0xd40 <_ZN17DallasTemperature13setResolutionEPhh+0x4e>
     d38:	1c 30       	cpi	r17, 0x0C	; 12
     d3a:	31 f4       	brne	.+12     	; 0xd48 <_ZN17DallasTemperature13setResolutionEPhh+0x56>
      {
        case 12:
          scratchPad[CONFIGURATION] = TEMP_12_BIT;
     d3c:	8f e7       	ldi	r24, 0x7F	; 127
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 11:
          scratchPad[CONFIGURATION] = TEMP_11_BIT;
     d40:	8f e5       	ldi	r24, 0x5F	; 95
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 10:
          scratchPad[CONFIGURATION] = TEMP_10_BIT;
     d44:	8f e3       	ldi	r24, 0x3F	; 63
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <_ZN17DallasTemperature13setResolutionEPhh+0x58>
          break;
        case 9:
        default:
          scratchPad[CONFIGURATION] = TEMP_9_BIT;
     d48:	8f e1       	ldi	r24, 0x1F	; 31
     d4a:	8d 83       	std	Y+5, r24	; 0x05
          break;
      }
      writeScratchPad(deviceAddress, scratchPad);
     d4c:	c6 01       	movw	r24, r12
     d4e:	b7 01       	movw	r22, r14
     d50:	ae 01       	movw	r20, r28
     d52:	4f 5f       	subi	r20, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	0e 94 bd 04 	call	0x97a	; 0x97a <_ZN17DallasTemperature15writeScratchPadEPhPKh>
     d5a:	81 e0       	ldi	r24, 0x01	; 1
    }
	return true;  // new value set
  }
  return false;
}
     d5c:	29 96       	adiw	r28, 0x09	; 9
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	1f 91       	pop	r17
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	08 95       	ret

00000d78 <_ZN17DallasTemperature12validAddressEPh>:
{
  return devices;
}

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	8b 01       	movw	r16, r22
{
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
     d7e:	cb 01       	movw	r24, r22
     d80:	67 e0       	ldi	r22, 0x07	; 7
     d82:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN7OneWire4crc8EPhh>
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	f8 01       	movw	r30, r16
     d8a:	97 81       	ldd	r25, Z+7	; 0x07
     d8c:	89 17       	cp	r24, r25
     d8e:	09 f4       	brne	.+2      	; 0xd92 <_ZN17DallasTemperature12validAddressEPh+0x1a>
     d90:	21 e0       	ldi	r18, 0x01	; 1
}
     d92:	82 2f       	mov	r24, r18
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <_ZN17DallasTemperature10getAddressEPhh>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DallasTemperature::getAddress(uint8_t* deviceAddress, uint8_t index)
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	ec 01       	movw	r28, r24
     da8:	7b 01       	movw	r14, r22
     daa:	04 2f       	mov	r16, r20
{
  uint8_t depth = 0;

  _wire->reset_search();
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7OneWire12reset_searchEv>
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	07 c0       	rjmp	.+14     	; 0xdc6 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     db8:	ce 01       	movw	r24, r28
     dba:	b7 01       	movw	r22, r14
     dbc:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN17DallasTemperature12validAddressEPh>
     dc0:	88 23       	and	r24, r24
     dc2:	a9 f0       	breq	.+42     	; 0xdee <_ZN17DallasTemperature10getAddressEPhh+0x54>
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <_ZN17DallasTemperature10getAddressEPhh+0x40>
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	b7 01       	movw	r22, r14
     dcc:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN7OneWire6searchEPh>
     dd0:	88 23       	and	r24, r24
     dd2:	29 f0       	breq	.+10     	; 0xdde <_ZN17DallasTemperature10getAddressEPhh+0x44>
  {
    if (depth == index && validAddress(deviceAddress)) return true;
     dd4:	10 17       	cp	r17, r16
     dd6:	59 f4       	brne	.+22     	; 0xdee <_ZN17DallasTemperature10getAddressEPhh+0x54>
     dd8:	ef cf       	rjmp	.-34     	; 0xdb8 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <_ZN17DallasTemperature10getAddressEPhh+0x46>
     dde:	80 e0       	ldi	r24, 0x00	; 0
    depth++;
  }

  return false;
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret
  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
  {
    if (depth == index && validAddress(deviceAddress)) return true;
    depth++;
     dee:	1f 5f       	subi	r17, 0xFF	; 255
{
  uint8_t depth = 0;

  _wire->reset_search();

  while (depth <= index && _wire->search(deviceAddress))
     df0:	01 17       	cp	r16, r17
     df2:	a8 f3       	brcs	.-22     	; 0xdde <_ZN17DallasTemperature10getAddressEPhh+0x44>
     df4:	e8 cf       	rjmp	.-48     	; 0xdc6 <_ZN17DallasTemperature10getAddressEPhh+0x2c>

00000df6 <_ZN17DallasTemperature15getTempCByIndexEh>:
  getAddress(deviceAddress, deviceIndex);
  return requestTemperaturesByAddress(deviceAddress);
}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex)
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	df 93       	push	r29
     e00:	cf 93       	push	r28
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	28 97       	sbiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	7c 01       	movw	r14, r24
     e14:	46 2f       	mov	r20, r22
{
  DeviceAddress deviceAddress;
  getAddress(deviceAddress, deviceIndex);
     e16:	8e 01       	movw	r16, r28
     e18:	0f 5f       	subi	r16, 0xFF	; 255
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	b8 01       	movw	r22, r16
     e1e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN17DallasTemperature10getAddressEPhh>
  return getTempC((uint8_t*)deviceAddress);
     e22:	c7 01       	movw	r24, r14
     e24:	b8 01       	movw	r22, r16
     e26:	0e 94 0f 06 	call	0xc1e	; 0xc1e <_ZN17DallasTemperature8getTempCEPh>
}
     e2a:	28 96       	adiw	r28, 0x08	; 8
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	08 95       	ret

00000e44 <_ZN17DallasTemperature13setResolutionEh>:
}


// set resolution of all devices to 9, 10, 11, or 12 bits
// if new resolution is out of range, it is constrained.
void DallasTemperature::setResolution(uint8_t newResolution)
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	28 97       	sbiw	r28, 0x08	; 8
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	7c 01       	movw	r14, r24
{
  bitResolution = constrain(newResolution, 9, 12);
     e66:	69 30       	cpi	r22, 0x09	; 9
     e68:	10 f4       	brcc	.+4      	; 0xe6e <_ZN17DallasTemperature13setResolutionEh+0x2a>
     e6a:	69 e0       	ldi	r22, 0x09	; 9
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <_ZN17DallasTemperature13setResolutionEh+0x30>
     e6e:	6d 30       	cpi	r22, 0x0D	; 13
     e70:	08 f0       	brcs	.+2      	; 0xe74 <_ZN17DallasTemperature13setResolutionEh+0x30>
     e72:	6c e0       	ldi	r22, 0x0C	; 12
     e74:	f7 01       	movw	r30, r14
     e76:	61 83       	std	Z+1, r22	; 0x01
     e78:	00 e0       	ldi	r16, 0x00	; 0
     e7a:	10 e0       	ldi	r17, 0x00	; 0
  DeviceAddress deviceAddress;
  for (int i=0; i<devices; i++)
  {
    getAddress(deviceAddress, i);
     e7c:	6e 01       	movw	r12, r28
     e7e:	08 94       	sec
     e80:	c1 1c       	adc	r12, r1
     e82:	d1 1c       	adc	r13, r1
     e84:	0d c0       	rjmp	.+26     	; 0xea0 <_ZN17DallasTemperature13setResolutionEh+0x5c>
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	40 2f       	mov	r20, r16
     e8c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN17DallasTemperature10getAddressEPhh>
	setResolution(deviceAddress, bitResolution);
     e90:	c7 01       	movw	r24, r14
     e92:	b6 01       	movw	r22, r12
     e94:	f7 01       	movw	r30, r14
     e96:	41 81       	ldd	r20, Z+1	; 0x01
     e98:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN17DallasTemperature13setResolutionEPhh>
// if new resolution is out of range, it is constrained.
void DallasTemperature::setResolution(uint8_t newResolution)
{
  bitResolution = constrain(newResolution, 9, 12);
  DeviceAddress deviceAddress;
  for (int i=0; i<devices; i++)
     e9c:	0f 5f       	subi	r16, 0xFF	; 255
     e9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ea0:	f7 01       	movw	r30, r14
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	08 17       	cp	r16, r24
     ea8:	19 07       	cpc	r17, r25
     eaa:	6c f3       	brlt	.-38     	; 0xe86 <_ZN17DallasTemperature13setResolutionEh+0x42>
  {
    getAddress(deviceAddress, i);
	setResolution(deviceAddress, bitResolution);
  }
}
     eac:	28 96       	adiw	r28, 0x08	; 8
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	08 95       	ret

00000eca <_ZN17DallasTemperature5beginEv>:
  waitForConversion = true;
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	61 97       	sbiw	r28, 0x11	; 17
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	7c 01       	movw	r14, r24
{
  DeviceAddress deviceAddress;

  _wire->reset_search();
     ef0:	fc 01       	movw	r30, r24
     ef2:	85 81       	ldd	r24, Z+5	; 0x05
     ef4:	96 81       	ldd	r25, Z+6	; 0x06
     ef6:	0e 94 b3 09 	call	0x1366	; 0x1366 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
     efa:	f7 01       	movw	r30, r14
     efc:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
     efe:	6e 01       	movw	r12, r28
     f00:	08 94       	sec
     f02:	c1 1c       	adc	r12, r1
     f04:	d1 1c       	adc	r13, r1
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     f06:	79 e0       	ldi	r23, 0x09	; 9
     f08:	a7 2e       	mov	r10, r23
     f0a:	b1 2c       	mov	r11, r1
     f0c:	ac 0e       	add	r10, r28
     f0e:	bd 1e       	adc	r11, r29

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     f10:	01 e0       	ldi	r16, 0x01	; 1
     f12:	2b c0       	rjmp	.+86     	; 0xf6a <_ZN17DallasTemperature5beginEv+0xa0>
  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
     f14:	c7 01       	movw	r24, r14
     f16:	b6 01       	movw	r22, r12
     f18:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN17DallasTemperature12validAddressEPh>
     f1c:	88 23       	and	r24, r24
     f1e:	29 f1       	breq	.+74     	; 0xf6a <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
     f20:	f7 01       	movw	r30, r14
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	41 f4       	brne	.+16     	; 0xf38 <_ZN17DallasTemperature5beginEv+0x6e>
     f28:	c7 01       	movw	r24, r14
     f2a:	b6 01       	movw	r22, r12
     f2c:	0e 94 91 04 	call	0x922	; 0x922 <_ZN17DallasTemperature15readPowerSupplyEPh>
     f30:	88 23       	and	r24, r24
     f32:	11 f0       	breq	.+4      	; 0xf38 <_ZN17DallasTemperature5beginEv+0x6e>
     f34:	f7 01       	movw	r30, r14
     f36:	00 83       	st	Z, r16

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	a5 01       	movw	r20, r10
     f3e:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
     f42:	f7 01       	movw	r30, r14
     f44:	11 81       	ldd	r17, Z+1	; 0x01
     f46:	c7 01       	movw	r24, r14
     f48:	b6 01       	movw	r22, r12
     f4a:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN17DallasTemperature13getResolutionEPh>
     f4e:	81 17       	cp	r24, r17
     f50:	18 f4       	brcc	.+6      	; 0xf58 <_ZN17DallasTemperature5beginEv+0x8e>
     f52:	f7 01       	movw	r30, r14
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <_ZN17DallasTemperature5beginEv+0x96>
     f58:	c7 01       	movw	r24, r14
     f5a:	b6 01       	movw	r22, r12
     f5c:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN17DallasTemperature13getResolutionEPh>
     f60:	f7 01       	movw	r30, r14
     f62:	81 83       	std	Z+1, r24	; 0x01

      devices++;
     f64:	84 81       	ldd	r24, Z+4	; 0x04
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
     f6a:	f7 01       	movw	r30, r14
     f6c:	85 81       	ldd	r24, Z+5	; 0x05
     f6e:	96 81       	ldd	r25, Z+6	; 0x06
     f70:	b6 01       	movw	r22, r12
     f72:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN7OneWire6searchEPh>
     f76:	88 23       	and	r24, r24
     f78:	69 f6       	brne	.-102    	; 0xf14 <_ZN17DallasTemperature5beginEv+0x4a>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
     f7a:	61 96       	adiw	r28, 0x11	; 17
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	cf 90       	pop	r12
     f96:	bf 90       	pop	r11
     f98:	af 90       	pop	r10
     f9a:	08 95       	ret

00000f9c <_Z9breakTimemR12tmElements_t>:
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t time, tmElements_t &tm){
     f9c:	8f 92       	push	r8
     f9e:	9f 92       	push	r9
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	cf 92       	push	r12
     fa6:	df 92       	push	r13
     fa8:	ef 92       	push	r14
     faa:	ff 92       	push	r15
     fac:	0f 93       	push	r16
     fae:	1f 93       	push	r17
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	7b 01       	movw	r14, r22
     fb6:	8c 01       	movw	r16, r24
     fb8:	ea 01       	movw	r28, r20

  uint8_t year;
  uint8_t month, monthLength;
  unsigned long days;
  
  tm.Second = time % 60;
     fba:	2c e3       	ldi	r18, 0x3C	; 60
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
     fc6:	68 83       	st	Y, r22
  time /= 60; // now it is minutes
     fc8:	c8 01       	movw	r24, r16
     fca:	b7 01       	movw	r22, r14
     fcc:	2c e3       	ldi	r18, 0x3C	; 60
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
     fd8:	12 2f       	mov	r17, r18
     fda:	03 2f       	mov	r16, r19
     fdc:	f4 2e       	mov	r15, r20
     fde:	e5 2e       	mov	r14, r21
  tm.Minute = time % 60;
     fe0:	62 2f       	mov	r22, r18
     fe2:	73 2f       	mov	r23, r19
     fe4:	84 2f       	mov	r24, r20
     fe6:	95 2f       	mov	r25, r21
     fe8:	2c e3       	ldi	r18, 0x3C	; 60
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
     ff4:	69 83       	std	Y+1, r22	; 0x01
  time /= 60; // now it is hours
     ff6:	61 2f       	mov	r22, r17
     ff8:	70 2f       	mov	r23, r16
     ffa:	8f 2d       	mov	r24, r15
     ffc:	9e 2d       	mov	r25, r14
     ffe:	2c e3       	ldi	r18, 0x3C	; 60
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    100a:	12 2f       	mov	r17, r18
    100c:	03 2f       	mov	r16, r19
    100e:	f4 2e       	mov	r15, r20
    1010:	e5 2e       	mov	r14, r21
  tm.Hour = time % 24;
    1012:	62 2f       	mov	r22, r18
    1014:	73 2f       	mov	r23, r19
    1016:	84 2f       	mov	r24, r20
    1018:	95 2f       	mov	r25, r21
    101a:	28 e1       	ldi	r18, 0x18	; 24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    1026:	6a 83       	std	Y+2, r22	; 0x02
  time /= 24; // now it is days
    1028:	61 2f       	mov	r22, r17
    102a:	70 2f       	mov	r23, r16
    102c:	8f 2d       	mov	r24, r15
    102e:	9e 2d       	mov	r25, r14
    1030:	28 e1       	ldi	r18, 0x18	; 24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    103c:	79 01       	movw	r14, r18
    103e:	8a 01       	movw	r16, r20
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    1040:	c8 01       	movw	r24, r16
    1042:	b7 01       	movw	r22, r14
    1044:	6c 5f       	subi	r22, 0xFC	; 252
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	27 e0       	ldi	r18, 0x07	; 7
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	6b 83       	std	Y+3, r22	; 0x03
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	aa 24       	eor	r10, r10
    1060:	bb 24       	eor	r11, r11
    1062:	65 01       	movw	r12, r10
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <_Z9breakTimemR12tmElements_t+0xcc>
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
    1066:	2f 5f       	subi	r18, 0xFF	; 255
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    1068:	82 2e       	mov	r8, r18
    106a:	99 24       	eor	r9, r9
    106c:	f4 01       	movw	r30, r8
    106e:	ee 54       	subi	r30, 0x4E	; 78
    1070:	f8 4f       	sbci	r31, 0xF8	; 248
    1072:	cf 01       	movw	r24, r30
    1074:	83 70       	andi	r24, 0x03	; 3
    1076:	90 70       	andi	r25, 0x00	; 0
    1078:	89 2b       	or	r24, r25
    107a:	99 f4       	brne	.+38     	; 0x10a2 <_Z9breakTimemR12tmElements_t+0x106>
    107c:	cf 01       	movw	r24, r30
    107e:	64 e6       	ldi	r22, 0x64	; 100
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1086:	89 2b       	or	r24, r25
    1088:	39 f4       	brne	.+14     	; 0x1098 <_Z9breakTimemR12tmElements_t+0xfc>
    108a:	cf 01       	movw	r24, r30
    108c:	60 e9       	ldi	r22, 0x90	; 144
    108e:	71 e0       	ldi	r23, 0x01	; 1
    1090:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1094:	89 2b       	or	r24, r25
    1096:	29 f4       	brne	.+10     	; 0x10a2 <_Z9breakTimemR12tmElements_t+0x106>
    1098:	8e e6       	ldi	r24, 0x6E	; 110
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	a0 e0       	ldi	r26, 0x00	; 0
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <_Z9breakTimemR12tmElements_t+0x10e>
    10a2:	8d e6       	ldi	r24, 0x6D	; 109
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	a8 0e       	add	r10, r24
    10ac:	b9 1e       	adc	r11, r25
    10ae:	ca 1e       	adc	r12, r26
    10b0:	db 1e       	adc	r13, r27
    10b2:	c5 01       	movw	r24, r10
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 16       	cp	r14, r24
    10ba:	f9 06       	cpc	r15, r25
    10bc:	0a 07       	cpc	r16, r26
    10be:	1b 07       	cpc	r17, r27
    10c0:	90 f6       	brcc	.-92     	; 0x1066 <_Z9breakTimemR12tmElements_t+0xca>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    10c2:	2e 83       	std	Y+6, r18	; 0x06
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    10c4:	f4 01       	movw	r30, r8
    10c6:	ee 54       	subi	r30, 0x4E	; 78
    10c8:	f8 4f       	sbci	r31, 0xF8	; 248
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	88 2e       	mov	r8, r24
    10ce:	91 2c       	mov	r9, r1
    10d0:	8e 22       	and	r8, r30
    10d2:	9f 22       	and	r9, r31
    10d4:	81 14       	cp	r8, r1
    10d6:	91 04       	cpc	r9, r1
    10d8:	99 f4       	brne	.+38     	; 0x1100 <_Z9breakTimemR12tmElements_t+0x164>
    10da:	cf 01       	movw	r24, r30
    10dc:	64 e6       	ldi	r22, 0x64	; 100
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    10e4:	89 2b       	or	r24, r25
    10e6:	39 f4       	brne	.+14     	; 0x10f6 <_Z9breakTimemR12tmElements_t+0x15a>
    10e8:	cf 01       	movw	r24, r30
    10ea:	60 e9       	ldi	r22, 0x90	; 144
    10ec:	71 e0       	ldi	r23, 0x01	; 1
    10ee:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    10f2:	89 2b       	or	r24, r25
    10f4:	29 f4       	brne	.+10     	; 0x1100 <_Z9breakTimemR12tmElements_t+0x164>
    10f6:	8e e6       	ldi	r24, 0x6E	; 110
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <_Z9breakTimemR12tmElements_t+0x16c>
    1100:	8d e6       	ldi	r24, 0x6D	; 109
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
  time  -= days; // now it is days in this year, starting at 0
    1108:	a8 1a       	sub	r10, r24
    110a:	b9 0a       	sbc	r11, r25
    110c:	ca 0a       	sbc	r12, r26
    110e:	db 0a       	sbc	r13, r27
    1110:	98 01       	movw	r18, r16
    1112:	87 01       	movw	r16, r14
    1114:	0a 19       	sub	r16, r10
    1116:	1b 09       	sbc	r17, r11
    1118:	2c 09       	sbc	r18, r12
    111a:	3d 09       	sbc	r19, r13
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    111c:	cf 01       	movw	r24, r30
    111e:	64 e6       	ldi	r22, 0x64	; 100
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1126:	7c 01       	movw	r14, r24
    1128:	cf 01       	movw	r24, r30
    112a:	60 e9       	ldi	r22, 0x90	; 144
    112c:	71 e0       	ldi	r23, 0x01	; 1
    112e:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1132:	ac 01       	movw	r20, r24
    1134:	e8 ef       	ldi	r30, 0xF8	; 248
    1136:	f1 e0       	ldi	r31, 0x01	; 1
    1138:	60 e0       	ldi	r22, 0x00	; 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    113a:	61 30       	cpi	r22, 0x01	; 1
    113c:	51 f4       	brne	.+20     	; 0x1152 <_Z9breakTimemR12tmElements_t+0x1b6>
      if (LEAP_YEAR(year)) {
    113e:	81 14       	cp	r8, r1
    1140:	91 04       	cpc	r9, r1
    1142:	49 f4       	brne	.+18     	; 0x1156 <_Z9breakTimemR12tmElements_t+0x1ba>
    1144:	e1 14       	cp	r14, r1
    1146:	f1 04       	cpc	r15, r1
    1148:	41 f4       	brne	.+16     	; 0x115a <_Z9breakTimemR12tmElements_t+0x1be>
    114a:	41 15       	cp	r20, r1
    114c:	51 05       	cpc	r21, r1
    114e:	29 f0       	breq	.+10     	; 0x115a <_Z9breakTimemR12tmElements_t+0x1be>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <_Z9breakTimemR12tmElements_t+0x1ba>
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    1152:	80 81       	ld	r24, Z
    1154:	03 c0       	rjmp	.+6      	; 0x115c <_Z9breakTimemR12tmElements_t+0x1c0>
    1156:	8c e1       	ldi	r24, 0x1C	; 28
    1158:	01 c0       	rjmp	.+2      	; 0x115c <_Z9breakTimemR12tmElements_t+0x1c0>
    115a:	8d e1       	ldi	r24, 0x1D	; 29
    }
    
    if (time >= monthLength) {
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	08 17       	cp	r16, r24
    1164:	19 07       	cpc	r17, r25
    1166:	2a 07       	cpc	r18, r26
    1168:	3b 07       	cpc	r19, r27
    116a:	40 f0       	brcs	.+16     	; 0x117c <_Z9breakTimemR12tmElements_t+0x1e0>
      time -= monthLength;
    116c:	08 1b       	sub	r16, r24
    116e:	19 0b       	sbc	r17, r25
    1170:	2a 0b       	sbc	r18, r26
    1172:	3b 0b       	sbc	r19, r27
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    1174:	6f 5f       	subi	r22, 0xFF	; 255
    1176:	31 96       	adiw	r30, 0x01	; 1
    1178:	6c 30       	cpi	r22, 0x0C	; 12
    117a:	f9 f6       	brne	.-66     	; 0x113a <_Z9breakTimemR12tmElements_t+0x19e>
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	6d 83       	std	Y+5, r22	; 0x05
  tm.Day = time + 1;     // day of month
    1180:	80 2f       	mov	r24, r16
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	8c 83       	std	Y+4, r24	; 0x04
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	08 95       	ret

000011a0 <_Z12refreshCachem>:

static tmElements_t tm;          // a cache of time elements
static time_t       cacheTime;   // the time the cache was updated
static time_t       syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache( time_t t){
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	7b 01       	movw	r14, r22
    11aa:	8c 01       	movw	r16, r24
  if( t != cacheTime)
    11ac:	80 91 5b 02 	lds	r24, 0x025B
    11b0:	90 91 5c 02 	lds	r25, 0x025C
    11b4:	a0 91 5d 02 	lds	r26, 0x025D
    11b8:	b0 91 5e 02 	lds	r27, 0x025E
    11bc:	e8 16       	cp	r14, r24
    11be:	f9 06       	cpc	r15, r25
    11c0:	0a 07       	cpc	r16, r26
    11c2:	1b 07       	cpc	r17, r27
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <_Z12refreshCachem+0x42>
  {
    breakTime(t, tm); 
    11c6:	c8 01       	movw	r24, r16
    11c8:	b7 01       	movw	r22, r14
    11ca:	40 e5       	ldi	r20, 0x50	; 80
    11cc:	52 e0       	ldi	r21, 0x02	; 2
    11ce:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_Z9breakTimemR12tmElements_t>
    cacheTime = t; 
    11d2:	e0 92 5b 02 	sts	0x025B, r14
    11d6:	f0 92 5c 02 	sts	0x025C, r15
    11da:	00 93 5d 02 	sts	0x025D, r16
    11de:	10 93 5e 02 	sts	0x025E, r17
  }
}
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <_Z10timeStatusv>:
  sysTime += adjustment;
}

timeStatus_t timeStatus(){ // indicates if time has been set and recently synchronized
  return Status;
}
    11ec:	80 91 4e 02 	lds	r24, 0x024E
    11f0:	90 91 4f 02 	lds	r25, 0x024F
    11f4:	08 95       	ret

000011f6 <_Z7setTimem>:
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = t;  
    11f6:	60 93 46 02 	sts	0x0246, r22
    11fa:	70 93 47 02 	sts	0x0247, r23
    11fe:	80 93 48 02 	sts	0x0248, r24
    1202:	90 93 49 02 	sts	0x0249, r25
  nextSyncTime = t + syncInterval;
    1206:	20 91 f3 01 	lds	r18, 0x01F3
    120a:	30 91 f4 01 	lds	r19, 0x01F4
    120e:	40 91 f5 01 	lds	r20, 0x01F5
    1212:	50 91 f6 01 	lds	r21, 0x01F6
    1216:	26 0f       	add	r18, r22
    1218:	37 1f       	adc	r19, r23
    121a:	48 1f       	adc	r20, r24
    121c:	59 1f       	adc	r21, r25
    121e:	20 93 4a 02 	sts	0x024A, r18
    1222:	30 93 4b 02 	sts	0x024B, r19
    1226:	40 93 4c 02 	sts	0x024C, r20
    122a:	50 93 4d 02 	sts	0x024D, r21
  Status = timeSet; 
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	90 93 4f 02 	sts	0x024F, r25
    1236:	80 93 4e 02 	sts	0x024E, r24
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    123a:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    123e:	60 93 57 02 	sts	0x0257, r22
    1242:	70 93 58 02 	sts	0x0258, r23
    1246:	80 93 59 02 	sts	0x0259, r24
    124a:	90 93 5a 02 	sts	0x025A, r25
} 
    124e:	08 95       	ret

00001250 <_Z3nowv>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now(){
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	1c c0       	rjmp	.+56     	; 0x1292 <_Z3nowv+0x42>
  while( millis() - prevMillis >= 1000){      
    sysTime++;
    125a:	2f 5f       	subi	r18, 0xFF	; 255
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	4f 4f       	sbci	r20, 0xFF	; 255
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	20 93 46 02 	sts	0x0246, r18
    1266:	30 93 47 02 	sts	0x0247, r19
    126a:	40 93 48 02 	sts	0x0248, r20
    126e:	50 93 49 02 	sts	0x0249, r21
    prevMillis += 1000;	
    1272:	88 ee       	ldi	r24, 0xE8	; 232
    1274:	93 e0       	ldi	r25, 0x03	; 3
    1276:	a0 e0       	ldi	r26, 0x00	; 0
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 0e       	add	r14, r24
    127c:	f9 1e       	adc	r15, r25
    127e:	0a 1f       	adc	r16, r26
    1280:	1b 1f       	adc	r17, r27
    1282:	e0 92 57 02 	sts	0x0257, r14
    1286:	f0 92 58 02 	sts	0x0258, r15
    128a:	00 93 59 02 	sts	0x0259, r16
    128e:	10 93 5a 02 	sts	0x025A, r17
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now(){
  while( millis() - prevMillis >= 1000){      
    1292:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    1296:	e0 90 57 02 	lds	r14, 0x0257
    129a:	f0 90 58 02 	lds	r15, 0x0258
    129e:	00 91 59 02 	lds	r16, 0x0259
    12a2:	10 91 5a 02 	lds	r17, 0x025A
    12a6:	6e 19       	sub	r22, r14
    12a8:	7f 09       	sbc	r23, r15
    12aa:	80 0b       	sbc	r24, r16
    12ac:	91 0b       	sbc	r25, r17
    12ae:	20 91 46 02 	lds	r18, 0x0246
    12b2:	30 91 47 02 	lds	r19, 0x0247
    12b6:	40 91 48 02 	lds	r20, 0x0248
    12ba:	50 91 49 02 	lds	r21, 0x0249
    12be:	68 5e       	subi	r22, 0xE8	; 232
    12c0:	73 40       	sbci	r23, 0x03	; 3
    12c2:	80 40       	sbci	r24, 0x00	; 0
    12c4:	90 40       	sbci	r25, 0x00	; 0
    12c6:	48 f6       	brcc	.-110    	; 0x125a <_Z3nowv+0xa>
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif	
  }
  if(nextSyncTime <= sysTime){
    12c8:	80 91 4a 02 	lds	r24, 0x024A
    12cc:	90 91 4b 02 	lds	r25, 0x024B
    12d0:	a0 91 4c 02 	lds	r26, 0x024C
    12d4:	b0 91 4d 02 	lds	r27, 0x024D
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	4a 07       	cpc	r20, r26
    12de:	5b 07       	cpc	r21, r27
    12e0:	e8 f0       	brcs	.+58     	; 0x131c <_Z3nowv+0xcc>
	if(getTimePtr != 0){
    12e2:	e0 91 44 02 	lds	r30, 0x0244
    12e6:	f0 91 45 02 	lds	r31, 0x0245
    12ea:	30 97       	sbiw	r30, 0x00	; 0
    12ec:	b9 f0       	breq	.+46     	; 0x131c <_Z3nowv+0xcc>
	  time_t t = getTimePtr();
    12ee:	09 95       	icall
      if( t != 0)
    12f0:	61 15       	cp	r22, r1
    12f2:	71 05       	cpc	r23, r1
    12f4:	81 05       	cpc	r24, r1
    12f6:	91 05       	cpc	r25, r1
    12f8:	19 f0       	breq	.+6      	; 0x1300 <_Z3nowv+0xb0>
        setTime(t);
    12fa:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_Z7setTimem>
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <_Z3nowv+0xcc>
      else
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;        
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	80 91 4e 02 	lds	r24, 0x024E
    1308:	90 91 4f 02 	lds	r25, 0x024F
    130c:	89 2b       	or	r24, r25
    130e:	11 f0       	breq	.+4      	; 0x1314 <_Z3nowv+0xc4>
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	30 93 4f 02 	sts	0x024F, r19
    1318:	20 93 4e 02 	sts	0x024E, r18
    131c:	60 91 46 02 	lds	r22, 0x0246
    1320:	70 91 47 02 	lds	r23, 0x0247
    }
  }  
  return sysTime;
}
    1324:	80 91 48 02 	lds	r24, 0x0248
    1328:	90 91 49 02 	lds	r25, 0x0249
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	08 95       	ret

00001336 <_Z6secondv>:
  refreshCache(t);
  return tm.Minute;  
}

int second() {
  return second(now()); 
    1336:	0e 94 28 09 	call	0x1250	; 0x1250 <_Z3nowv>
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
    133a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z12refreshCachem>
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    133e:	80 91 50 02 	lds	r24, 0x0250
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	08 95       	ret

00001346 <_Z6minutev>:
uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
    1346:	0e 94 28 09 	call	0x1250	; 0x1250 <_Z3nowv>
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
    134a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z12refreshCachem>
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    134e:	80 91 51 02 	lds	r24, 0x0251
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	08 95       	ret

00001356 <_Z4hourv>:
    cacheTime = t; 
  }
}

int hour() { // the hour now 
  return hour(now()); 
    1356:	0e 94 28 09 	call	0x1250	; 0x1250 <_Z3nowv>
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
    135a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_Z12refreshCachem>
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    135e:	80 91 52 02 	lds	r24, 0x0252
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	08 95       	ret

00001366 <_ZN7OneWire12reset_searchEv>:

//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
    1366:	fc 01       	movw	r30, r24
  {
  // reset the search state
  LastDiscrepancy = 0;
    1368:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    136a:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    136c:	14 86       	std	Z+12, r1	; 0x0c
    136e:	87 e0       	ldi	r24, 0x07	; 7
    1370:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--)
    {
    ROM_NO[i] = 0;
    1372:	12 86       	std	Z+10, r1	; 0x0a
    1374:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	11 f0       	breq	.+4      	; 0x137e <_ZN7OneWire12reset_searchEv+0x18>
  {
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--)
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	fa cf       	rjmp	.-12     	; 0x1372 <_ZN7OneWire12reset_searchEv+0xc>
    137e:	08 95       	ret

00001380 <_ZN7OneWire4crc8EPhh>:
// and the registers.  (note: this might better be done without to
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
    1380:	dc 01       	movw	r26, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	0b c0       	rjmp	.+22     	; 0x139c <_ZN7OneWire4crc8EPhh+0x1c>
{
	uint8_t crc = 0;

	while (len--) {
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    1386:	e8 2f       	mov	r30, r24
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8d 91       	ld	r24, X+
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	e8 27       	eor	r30, r24
    1390:	f9 27       	eor	r31, r25
    1392:	e8 59       	subi	r30, 0x98	; 152
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	e4 91       	lpm	r30, Z+
    1398:	61 50       	subi	r22, 0x01	; 1
    139a:	8e 2f       	mov	r24, r30
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    139c:	66 23       	and	r22, r22
    139e:	99 f7       	brne	.-26     	; 0x1386 <_ZN7OneWire4crc8EPhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    13a0:	08 95       	ret

000013a2 <_ZN7OneWire8read_bitEv>:

//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    13ae:	e0 80       	ld	r14, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    13b0:	01 81       	ldd	r16, Z+1	; 0x01
    13b2:	12 81       	ldd	r17, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    13b4:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    13b6:	f8 01       	movw	r30, r16
    13b8:	81 81       	ldd	r24, Z+1	; 0x01
    13ba:	8e 29       	or	r24, r14
    13bc:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    13be:	82 81       	ldd	r24, Z+2	; 0x02
    13c0:	de 2c       	mov	r13, r14
    13c2:	d0 94       	com	r13
    13c4:	8d 21       	and	r24, r13
    13c6:	82 83       	std	Z+2, r24	; 0x02
	delayMicroseconds(3);
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    13d0:	f8 01       	movw	r30, r16
    13d2:	81 81       	ldd	r24, Z+1	; 0x01
    13d4:	8d 21       	and	r24, r13
    13d6:	81 83       	std	Z+1, r24	; 0x01
	delayMicroseconds(10);
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    13e0:	f8 01       	movw	r30, r16
    13e2:	00 81       	ld	r16, Z
	interrupts();
    13e4:	78 94       	sei
	delayMicroseconds(53);
    13e6:	85 e3       	ldi	r24, 0x35	; 53
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	ff 24       	eor	r15, r15
    13f4:	0e 21       	and	r16, r14
    13f6:	1f 21       	and	r17, r15
    13f8:	01 2b       	or	r16, r17
    13fa:	09 f0       	breq	.+2      	; 0x13fe <_ZN7OneWire8read_bitEv+0x5c>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
	return r;
}
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	08 95       	ret

0000140a <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	7c 01       	movw	r14, r24
    1418:	01 e0       	ldi	r16, 0x01	; 1
    141a:	10 e0       	ldi	r17, 0x00	; 0
    141c:	c0 e0       	ldi	r28, 0x00	; 0
    141e:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	if ( OneWire::read_bit()) r |= bitMask;
    1420:	c7 01       	movw	r24, r14
    1422:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7OneWire8read_bitEv>
    1426:	81 11       	cpse	r24, r1
    1428:	10 2b       	or	r17, r16
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    142a:	00 0f       	add	r16, r16
    142c:	21 96       	adiw	r28, 0x01	; 1
    142e:	c8 30       	cpi	r28, 0x08	; 8
    1430:	d1 05       	cpc	r29, r1
    1432:	b1 f7       	brne	.-20     	; 0x1420 <_ZN7OneWire4readEv+0x16>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    1434:	81 2f       	mov	r24, r17
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	08 95       	ret

00001444 <_ZN7OneWire9write_bitEh>:

//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask=bitmask;
    144c:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    144e:	c1 81       	ldd	r28, Z+1	; 0x01
    1450:	d2 81       	ldd	r29, Z+2	; 0x02
    1452:	91 2f       	mov	r25, r17
    1454:	90 95       	com	r25

	if (v & 1) {
    1456:	60 ff       	sbrs	r22, 0
    1458:	12 c0       	rjmp	.+36     	; 0x147e <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
    145a:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	89 23       	and	r24, r25
    1460:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	81 2b       	or	r24, r17
    1466:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(10);
    1468:	8a e0       	ldi	r24, 0x0A	; 10
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	81 2b       	or	r24, r17
    1474:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    1476:	78 94       	sei
		delayMicroseconds(55);
    1478:	87 e3       	ldi	r24, 0x37	; 55
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <_ZN7OneWire9write_bitEh+0x5c>
	} else {
		noInterrupts();
    147e:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	89 23       	and	r24, r25
    1484:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	81 2b       	or	r24, r17
    148a:	89 83       	std	Y+1, r24	; 0x01
		delayMicroseconds(65);
    148c:	81 e4       	ldi	r24, 0x41	; 65
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	81 2b       	or	r24, r17
    1498:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    149a:	78 94       	sei
		delayMicroseconds(5);
    149c:	85 e0       	ldi	r24, 0x05	; 5
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	}
}
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	08 95       	ret

000014ac <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	8c 01       	movw	r16, r24
    14be:	e4 2e       	mov	r14, r20
    14c0:	ff 24       	eor	r15, r15
    14c2:	f3 94       	inc	r15
    14c4:	c0 e0       	ldi	r28, 0x00	; 0
    14c6:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
	OneWire::write_bit( (bitMask & v)?1:0);
    14c8:	c6 2e       	mov	r12, r22
    14ca:	dd 24       	eor	r13, r13
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	8f 2d       	mov	r24, r15
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	8c 21       	and	r24, r12
    14d4:	9d 21       	and	r25, r13
    14d6:	89 2b       	or	r24, r25
    14d8:	09 f0       	breq	.+2      	; 0x14dc <_ZN7OneWire5writeEhh+0x30>
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	c8 01       	movw	r24, r16
    14de:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    14e2:	ff 0c       	add	r15, r15
    14e4:	21 96       	adiw	r28, 0x01	; 1
    14e6:	c8 30       	cpi	r28, 0x08	; 8
    14e8:	d1 05       	cpc	r29, r1
    14ea:	81 f7       	brne	.-32     	; 0x14cc <_ZN7OneWire5writeEhh+0x20>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    14ec:	ee 20       	and	r14, r14
    14ee:	a9 f4       	brne	.+42     	; 0x151a <_ZN7OneWire5writeEhh+0x6e>
	noInterrupts();
    14f0:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    14f2:	d8 01       	movw	r26, r16
    14f4:	11 96       	adiw	r26, 0x01	; 1
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	12 97       	sbiw	r26, 0x02	; 2
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	8c 91       	ld	r24, X
    1500:	80 95       	com	r24
    1502:	98 23       	and	r25, r24
    1504:	91 83       	std	Z+1, r25	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	ed 91       	ld	r30, X+
    150a:	fc 91       	ld	r31, X
    150c:	12 97       	sbiw	r26, 0x02	; 2
    150e:	92 81       	ldd	r25, Z+2	; 0x02
    1510:	8c 91       	ld	r24, X
    1512:	80 95       	com	r24
    1514:	98 23       	and	r25, r24
    1516:	92 83       	std	Z+2, r25	; 0x02
	interrupts();
    1518:	78 94       	sei
    }
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	08 95       	ret

0000152c <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
    152c:	6c ec       	ldi	r22, 0xCC	; 204
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
}
    1534:	08 95       	ret

00001536 <_ZN7OneWire6selectEPh>:
}

//
// Do a ROM select
//
void OneWire::select( uint8_t rom[8])
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	8c 01       	movw	r16, r24
    1544:	7b 01       	movw	r14, r22
{
    int i;

    write(0x55);           // Choose ROM
    1546:	65 e5       	ldi	r22, 0x55	; 85
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
    154e:	c0 e0       	ldi	r28, 0x00	; 0
    1550:	d0 e0       	ldi	r29, 0x00	; 0

    for( i = 0; i < 8; i++) write(rom[i]);
    1552:	f7 01       	movw	r30, r14
    1554:	ec 0f       	add	r30, r28
    1556:	fd 1f       	adc	r31, r29
    1558:	c8 01       	movw	r24, r16
    155a:	60 81       	ld	r22, Z
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
    1562:	21 96       	adiw	r28, 0x01	; 1
    1564:	c8 30       	cpi	r28, 0x08	; 8
    1566:	d1 05       	cpc	r29, r1
    1568:	a1 f7       	brne	.-24     	; 0x1552 <_ZN7OneWire6selectEPh+0x1c>
}
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	08 95       	ret

00001578 <_ZN7OneWire5resetEv>:
// the bus to come high, if it doesn't then it is broken or shorted
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
    1578:	df 92       	push	r13
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	fc 01       	movw	r30, r24
{
	IO_REG_TYPE mask = bitmask;
    1588:	00 81       	ld	r16, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    158a:	c1 81       	ldd	r28, Z+1	; 0x01
    158c:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    158e:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	d0 2e       	mov	r13, r16
    1594:	d0 94       	com	r13
    1596:	8d 21       	and	r24, r13
    1598:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    159a:	78 94       	sei
    159c:	1d e7       	ldi	r17, 0x7D	; 125
	// wait until the wire is high... just in case
	do {
    159e:	e0 2e       	mov	r14, r16
    15a0:	ff 24       	eor	r15, r15
		if (--retries == 0) return 0;
    15a2:	11 50       	subi	r17, 0x01	; 1
    15a4:	59 f1       	breq	.+86     	; 0x15fc <_ZN7OneWire5resetEv+0x84>
		delayMicroseconds(2);
    15a6:	82 e0       	ldi	r24, 0x02	; 2
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    15ae:	88 81       	ld	r24, Y
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	8e 21       	and	r24, r14
    15b4:	9f 21       	and	r25, r15
    15b6:	89 2b       	or	r24, r25
    15b8:	a1 f3       	breq	.-24     	; 0x15a2 <_ZN7OneWire5resetEv+0x2a>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    15ba:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	8d 21       	and	r24, r13
    15c0:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 2b       	or	r24, r16
    15c6:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    15c8:	78 94       	sei
	delayMicroseconds(500);
    15ca:	84 ef       	ldi	r24, 0xF4	; 244
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	noInterrupts();
    15d2:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	8d 21       	and	r24, r13
    15d8:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(80);
    15da:	80 e5       	ldi	r24, 0x50	; 80
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    15e2:	88 81       	ld	r24, Y
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	e8 22       	and	r14, r24
    15ea:	f9 22       	and	r15, r25
    15ec:	ef 28       	or	r14, r15
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <_ZN7OneWire5resetEv+0x7a>
    15f0:	11 e0       	ldi	r17, 0x01	; 1
	interrupts();
    15f2:	78 94       	sei
	delayMicroseconds(420);
    15f4:	84 ea       	ldi	r24, 0xA4	; 164
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
	return r;
}
    15fc:	81 2f       	mov	r24, r17
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	08 95       	ret

0000160e <_ZN7OneWire6searchEPh>:
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    160e:	af 92       	push	r10
    1610:	bf 92       	push	r11
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
    1622:	5b 01       	movw	r10, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	88 23       	and	r24, r24
    1628:	09 f0       	breq	.+2      	; 0x162c <_ZN7OneWire6searchEPh+0x1e>
    162a:	61 c0       	rjmp	.+194    	; 0x16ee <_ZN7OneWire6searchEPh+0xe0>
   {
      // 1-Wire reset
      if (!reset())
    162c:	ce 01       	movw	r24, r28
    162e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <_ZN7OneWire5resetEv>
    1632:	88 23       	and	r24, r24
    1634:	29 f4       	brne	.+10     	; 0x1640 <_ZN7OneWire6searchEPh+0x32>
      {
         // reset the search
         LastDiscrepancy = 0;
    1636:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    1638:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    163a:	1c 86       	std	Y+12, r1	; 0x0c
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	6b c0       	rjmp	.+214    	; 0x1716 <_ZN7OneWire6searchEPh+0x108>
         return FALSE;
      }

      // issue the search command
      write(0xF0);
    1640:	ce 01       	movw	r24, r28
    1642:	60 ef       	ldi	r22, 0xF0	; 240
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	0e 94 56 0a 	call	0x14ac	; 0x14ac <_ZN7OneWire5writeEhh>
    164a:	01 e0       	ldi	r16, 0x01	; 1
    164c:	dd 24       	eor	r13, r13
    164e:	ee 24       	eor	r14, r14
    1650:	ff 24       	eor	r15, r15
    1652:	f3 94       	inc	r15

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1654:	ce 01       	movw	r24, r28
    1656:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7OneWire8read_bitEv>
    165a:	18 2f       	mov	r17, r24
         cmp_id_bit = read_bit();
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    1662:	11 30       	cpi	r17, 0x01	; 1
    1664:	19 f4       	brne	.+6      	; 0x166c <_ZN7OneWire6searchEPh+0x5e>
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	e1 f4       	brne	.+56     	; 0x16a2 <_ZN7OneWire6searchEPh+0x94>
    166a:	39 c0       	rjmp	.+114    	; 0x16de <_ZN7OneWire6searchEPh+0xd0>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    166c:	18 17       	cp	r17, r24
    166e:	09 f5       	brne	.+66     	; 0x16b2 <_ZN7OneWire6searchEPh+0xa4>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    1670:	8b 85       	ldd	r24, Y+11	; 0x0b
    1672:	08 17       	cp	r16, r24
    1674:	70 f4       	brcc	.+28     	; 0x1692 <_ZN7OneWire6searchEPh+0x84>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	fe 01       	movw	r30, r28
    167a:	ee 0d       	add	r30, r14
    167c:	f1 1d       	adc	r31, r1
    167e:	83 81       	ldd	r24, Z+3	; 0x03
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	2f 2d       	mov	r18, r15
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	82 23       	and	r24, r18
    1688:	93 23       	and	r25, r19
    168a:	18 16       	cp	r1, r24
    168c:	19 06       	cpc	r1, r25
    168e:	4c f0       	brlt	.+18     	; 0x16a2 <_ZN7OneWire6searchEPh+0x94>
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <_ZN7OneWire6searchEPh+0x8a>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	08 17       	cp	r16, r24
    1696:	29 f0       	breq	.+10     	; 0x16a2 <_ZN7OneWire6searchEPh+0x94>
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    1698:	09 30       	cpi	r16, 0x09	; 9
    169a:	08 f0       	brcs	.+2      	; 0x169e <_ZN7OneWire6searchEPh+0x90>
    169c:	4c c0       	rjmp	.+152    	; 0x1736 <_ZN7OneWire6searchEPh+0x128>
                     LastFamilyDiscrepancy = last_zero;
    169e:	0c 87       	std	Y+12, r16	; 0x0c
    16a0:	4a c0       	rjmp	.+148    	; 0x1736 <_ZN7OneWire6searchEPh+0x128>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    16a2:	fe 01       	movw	r30, r28
    16a4:	ee 0d       	add	r30, r14
    16a6:	f1 1d       	adc	r31, r1
    16a8:	83 81       	ldd	r24, Z+3	; 0x03
    16aa:	8f 29       	or	r24, r15
    16ac:	83 83       	std	Z+3, r24	; 0x03
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <_ZN7OneWire6searchEPh+0xb6>
    16b2:	61 2f       	mov	r22, r17
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    16b4:	fe 01       	movw	r30, r28
    16b6:	ee 0d       	add	r30, r14
    16b8:	f1 1d       	adc	r31, r1
    16ba:	9f 2d       	mov	r25, r15
    16bc:	90 95       	com	r25
    16be:	83 81       	ldd	r24, Z+3	; 0x03
    16c0:	89 23       	and	r24, r25
    16c2:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    16c4:	ce 01       	movw	r24, r28
    16c6:	0e 94 22 0a 	call	0x1444	; 0x1444 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    16ca:	0f 5f       	subi	r16, 0xFF	; 255
            rom_byte_mask <<= 1;
    16cc:	ff 0c       	add	r15, r15

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <_ZN7OneWire6searchEPh+0xc8>
            {
                rom_byte_number++;
    16d0:	e3 94       	inc	r14
    16d2:	ff 24       	eor	r15, r15
    16d4:	f3 94       	inc	r15

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    16d6:	87 e0       	ldi	r24, 0x07	; 7
    16d8:	8e 15       	cp	r24, r14
    16da:	08 f0       	brcs	.+2      	; 0x16de <_ZN7OneWire6searchEPh+0xd0>
    16dc:	bb cf       	rjmp	.-138    	; 0x1654 <_ZN7OneWire6searchEPh+0x46>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    16de:	01 34       	cpi	r16, 0x41	; 65
    16e0:	30 f0       	brcs	.+12     	; 0x16ee <_ZN7OneWire6searchEPh+0xe0>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    16e2:	db 86       	std	Y+11, r13	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    16e4:	dd 20       	and	r13, r13
    16e6:	11 f5       	brne	.+68     	; 0x172c <_ZN7OneWire6searchEPh+0x11e>
            LastDeviceFlag = TRUE;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8d 87       	std	Y+13, r24	; 0x0d
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <_ZN7OneWire6searchEPh+0x11e>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    16ee:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    16f0:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    16f2:	1c 86       	std	Y+12, r1	; 0x0c
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	de 01       	movw	r26, r28
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    16fc:	f5 01       	movw	r30, r10
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	13 96       	adiw	r26, 0x03	; 3
    1704:	8c 91       	ld	r24, X
    1706:	13 97       	sbiw	r26, 0x03	; 3
    1708:	80 83       	st	Z, r24
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	11 96       	adiw	r26, 0x01	; 1
    1710:	28 30       	cpi	r18, 0x08	; 8
    1712:	31 05       	cpc	r19, r1
    1714:	99 f7       	brne	.-26     	; 0x16fc <_ZN7OneWire6searchEPh+0xee>
   return search_result;
  }
    1716:	89 2f       	mov	r24, r25
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	08 95       	ret
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 23       	and	r24, r24
    1730:	f1 f2       	breq	.-68     	; 0x16ee <_ZN7OneWire6searchEPh+0xe0>
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	e0 cf       	rjmp	.-64     	; 0x16f6 <_ZN7OneWire6searchEPh+0xe8>
    1736:	d0 2e       	mov	r13, r16
    1738:	bd cf       	rjmp	.-134    	; 0x16b4 <_ZN7OneWire6searchEPh+0xa6>

0000173a <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	8c 01       	movw	r16, r24
    1742:	f6 2e       	mov	r15, r22
{
	pinMode(pin, INPUT);
    1744:	86 2f       	mov	r24, r22
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    174c:	8f 2d       	mov	r24, r15
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e6 56       	subi	r30, 0x66	; 102
    1754:	fe 4f       	sbci	r31, 0xFE	; 254
    1756:	e4 91       	lpm	r30, Z+
    1758:	d8 01       	movw	r26, r16
    175a:	ec 93       	st	X, r30
	baseReg = PIN_TO_BASEREG(pin);
    175c:	8a 57       	subi	r24, 0x7A	; 122
    175e:	9e 4f       	sbci	r25, 0xFE	; 254
    1760:	fc 01       	movw	r30, r24
    1762:	64 91       	lpm	r22, Z+
    1764:	e6 2f       	mov	r30, r22
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e4 58       	subi	r30, 0x84	; 132
    176e:	fe 4f       	sbci	r31, 0xFE	; 254
    1770:	85 91       	lpm	r24, Z+
    1772:	94 91       	lpm	r25, Z+
    1774:	12 96       	adiw	r26, 0x02	; 2
    1776:	9c 93       	st	X, r25
    1778:	8e 93       	st	-X, r24
    177a:	11 97       	sbiw	r26, 0x01	; 1
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
  {
  // reset the search state
  LastDiscrepancy = 0;
    177c:	1b 96       	adiw	r26, 0x0b	; 11
    177e:	1c 92       	st	X, r1
    1780:	1b 97       	sbiw	r26, 0x0b	; 11
  LastDeviceFlag = FALSE;
    1782:	1d 96       	adiw	r26, 0x0d	; 13
    1784:	1c 92       	st	X, r1
    1786:	1d 97       	sbiw	r26, 0x0d	; 13
  LastFamilyDiscrepancy = 0;
    1788:	1c 96       	adiw	r26, 0x0c	; 12
    178a:	1c 92       	st	X, r1
    178c:	f8 01       	movw	r30, r16
    178e:	87 e0       	ldi	r24, 0x07	; 7
    1790:	90 e0       	ldi	r25, 0x00	; 0
  for(int i = 7; ; i--)
    {
    ROM_NO[i] = 0;
    1792:	12 86       	std	Z+10, r1	; 0x0a
    1794:	31 97       	sbiw	r30, 0x01	; 1
    if ( i == 0) break;
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	11 f0       	breq	.+4      	; 0x179e <_ZN7OneWireC1Eh+0x64>
  {
  // reset the search state
  LastDiscrepancy = 0;
  LastDeviceFlag = FALSE;
  LastFamilyDiscrepancy = 0;
  for(int i = 7; ; i--)
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	fa cf       	rjmp	.-12     	; 0x1792 <_ZN7OneWireC1Eh+0x58>
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
#endif
}
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	08 95       	ret

000017a6 <_ZN11OLEDFourBit11pulseEnableEv>:

  write4bits(value>>4);
  write4bits(value);
}

void OLEDFourBit::pulseEnable(void) {
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	8c 01       	movw	r16, r24
  digitalWrite(_enable_pin, HIGH);
    17ac:	fc 01       	movw	r30, r24
    17ae:	86 81       	ldd	r24, Z+6	; 0x06
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  delayMicroseconds(100);    // enable pulse must be >450ns
    17b6:	84 e6       	ldi	r24, 0x64	; 100
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
    17be:	f8 01       	movw	r30, r16
    17c0:	86 81       	ldd	r24, Z+6	; 0x06
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
}
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret

000017ce <_ZN11OLEDFourBit10write4bitsEh>:

void OLEDFourBit::write4bits(uint8_t value) {
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	d8 2e       	mov	r13, r24
    17e0:	c9 2e       	mov	r12, r25
    17e2:	28 2f       	mov	r18, r24
    17e4:	39 2f       	mov	r19, r25
    17e6:	c9 01       	movw	r24, r18
    17e8:	8c 01       	movw	r16, r24
    17ea:	c0 e0       	ldi	r28, 0x00	; 0
    17ec:	d0 e0       	ldi	r29, 0x00	; 0
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    17ee:	e6 2e       	mov	r14, r22
    17f0:	ff 24       	eor	r15, r15
  digitalWrite(_enable_pin, LOW);
}

void OLEDFourBit::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    17f2:	f8 01       	movw	r30, r16
    17f4:	80 85       	ldd	r24, Z+8	; 0x08
    17f6:	61 e0       	ldi	r22, 0x01	; 1
    17f8:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
    17fc:	b7 01       	movw	r22, r14
    17fe:	0c 2e       	mov	r0, r28
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <_ZN11OLEDFourBit10write4bitsEh+0x38>
    1802:	75 95       	asr	r23
    1804:	67 95       	ror	r22
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <_ZN11OLEDFourBit10write4bitsEh+0x34>
    180a:	61 70       	andi	r22, 0x01	; 1
    180c:	f8 01       	movw	r30, r16
    180e:	80 85       	ldd	r24, Z+8	; 0x08
    1810:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  delayMicroseconds(100);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
}

void OLEDFourBit::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    1814:	21 96       	adiw	r28, 0x01	; 1
    1816:	0f 5f       	subi	r16, 0xFF	; 255
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	c4 30       	cpi	r28, 0x04	; 4
    181c:	d1 05       	cpc	r29, r1
    181e:	49 f7       	brne	.-46     	; 0x17f2 <_ZN11OLEDFourBit10write4bitsEh+0x24>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  delayMicroseconds(100);
    1820:	84 e6       	ldi	r24, 0x64	; 100
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  pulseEnable();
    1828:	8d 2d       	mov	r24, r13
    182a:	9c 2d       	mov	r25, r12
    182c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN11OLEDFourBit11pulseEnableEv>
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	08 95       	ret

00001842 <_ZN11OLEDFourBit4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data
void OLEDFourBit::send(uint8_t value, uint8_t mode) {
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	8c 01       	movw	r16, r24
    184a:	f6 2e       	mov	r15, r22
  digitalWrite(_rs_pin, mode);
    184c:	fc 01       	movw	r30, r24
    184e:	84 81       	ldd	r24, Z+4	; 0x04
    1850:	64 2f       	mov	r22, r20
    1852:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  pinMode(_rw_pin, OUTPUT);
    1856:	f8 01       	movw	r30, r16
    1858:	85 81       	ldd	r24, Z+5	; 0x05
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  digitalWrite(_rw_pin, LOW);
    1860:	f8 01       	movw	r30, r16
    1862:	85 81       	ldd	r24, Z+5	; 0x05
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>

  write4bits(value>>4);
    186a:	6f 2d       	mov	r22, r15
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	84 e0       	ldi	r24, 0x04	; 4
    1870:	75 95       	asr	r23
    1872:	67 95       	ror	r22
    1874:	8a 95       	dec	r24
    1876:	e1 f7       	brne	.-8      	; 0x1870 <_ZN11OLEDFourBit4sendEhh+0x2e>
    1878:	c8 01       	movw	r24, r16
    187a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>
  write4bits(value);
    187e:	c8 01       	movw	r24, r16
    1880:	6f 2d       	mov	r22, r15
    1882:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>
}
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	08 95       	ret

0000188e <_ZN11OLEDFourBit8waitBusyEv>:
  }
  delayMicroseconds(100);
  pulseEnable();
}

void OLEDFourBit::waitBusy(void) {
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
  //delayMicroseconds(5000);
  unsigned char busy = 1;
  pinMode(_busy_pin, INPUT);
    1896:	8f 81       	ldd	r24, Y+7	; 0x07
    1898:	60 e0       	ldi	r22, 0x00	; 0
    189a:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  digitalWrite(_rs_pin, LOW);
    189e:	8c 81       	ldd	r24, Y+4	; 0x04
    18a0:	60 e0       	ldi	r22, 0x00	; 0
    18a2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  digitalWrite(_rw_pin, HIGH);
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  do{
  	digitalWrite(_enable_pin, LOW);
    18ae:	8e 81       	ldd	r24, Y+6	; 0x06
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  	digitalWrite(_enable_pin, HIGH);
    18b6:	8e 81       	ldd	r24, Y+6	; 0x06
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  	delayMicroseconds(10);
    18be:	8a e0       	ldi	r24, 0x0A	; 10
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  	busy = digitalRead(_busy_pin);
    18c6:	8f 81       	ldd	r24, Y+7	; 0x07
    18c8:	0e 94 3f 29 	call	0x527e	; 0x527e <digitalRead>
    18cc:	18 2f       	mov	r17, r24
  	digitalWrite(_enable_pin, LOW);
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>

  	pulseEnable();		// get remaining 4 bits, which are not used.
    18d6:	ce 01       	movw	r24, r28
    18d8:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN11OLEDFourBit11pulseEnableEv>
  //delayMicroseconds(5000);
  unsigned char busy = 1;
  pinMode(_busy_pin, INPUT);
  digitalWrite(_rs_pin, LOW);
  digitalWrite(_rw_pin, HIGH);
  do{
    18dc:	11 23       	and	r17, r17
    18de:	39 f7       	brne	.-50     	; 0x18ae <_ZN11OLEDFourBit8waitBusyEv+0x20>

  	pulseEnable();		// get remaining 4 bits, which are not used.

  }while(busy);

  pinMode(_busy_pin, OUTPUT);
    18e0:	8f 81       	ldd	r24, Y+7	; 0x07
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  digitalWrite(_rw_pin, LOW);
    18e8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	08 95       	ret

000018f8 <_ZN11OLEDFourBit5writeEh>:
inline void OLEDFourBit::command(uint8_t value) {
  send(value, LOW);
  waitBusy();
}

inline size_t OLEDFourBit::write(uint8_t value) {
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	8c 01       	movw	r16, r24
  send(value, HIGH);
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN11OLEDFourBit4sendEhh>
  waitBusy();
    1904:	c8 01       	movw	r24, r16
    1906:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN11OLEDFourBit8waitBusyEv>
  return 0;
}
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <_ZN11OLEDFourBit7commandEh>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void OLEDFourBit::command(uint8_t value) {
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	8c 01       	movw	r16, r24
  send(value, LOW);
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 21 0c 	call	0x1842	; 0x1842 <_ZN11OLEDFourBit4sendEhh>
  waitBusy();
    1920:	c8 01       	movw	r24, r16
    1922:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN11OLEDFourBit8waitBusyEv>
}
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <_ZN11OLEDFourBit7displayEv>:
// Turn the display on/off (quickly)
void OLEDFourBit::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void OLEDFourBit::display() {
    192c:	fc 01       	movw	r30, r24
  _displaycontrol |= LCD_DISPLAYON;
    192e:	65 85       	ldd	r22, Z+13	; 0x0d
    1930:	86 2f       	mov	r24, r22
    1932:	84 60       	ori	r24, 0x04	; 4
    1934:	85 87       	std	Z+13, r24	; 0x0d
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    1936:	6c 60       	ori	r22, 0x0C	; 12
    1938:	cf 01       	movw	r24, r30
    193a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
}
    193e:	08 95       	ret

00001940 <_ZN11OLEDFourBit9setCursorEhh>:
void OLEDFourBit::home()
{
  command(LCD_RETURNHOME);  // set cursor position to zero
}

void OLEDFourBit::setCursor(uint8_t col, uint8_t row)
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <_ZN11OLEDFourBit9setCursorEhh+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <_ZN11OLEDFourBit9setCursorEhh+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	dc 01       	movw	r26, r24
{
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
  if ( row >= _numlines ) {
    194e:	51 96       	adiw	r26, 0x11	; 17
    1950:	8c 91       	ld	r24, X
    1952:	51 97       	sbiw	r26, 0x11	; 17
    1954:	48 17       	cp	r20, r24
    1956:	08 f0       	brcs	.+2      	; 0x195a <_ZN11OLEDFourBit9setCursorEhh+0x1a>
    1958:	40 e0       	ldi	r20, 0x00	; 0
  command(LCD_RETURNHOME);  // set cursor position to zero
}

void OLEDFourBit::setCursor(uint8_t col, uint8_t row)
{
  uint8_t row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	80 e4       	ldi	r24, 0x40	; 64
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	84 e1       	ldi	r24, 0x14	; 20
    1962:	8b 83       	std	Y+3, r24	; 0x03
    1964:	84 e5       	ldi	r24, 0x54	; 84
    1966:	8c 83       	std	Y+4, r24	; 0x04
  if ( row >= _numlines ) {
    row = 0;  //write to first line if out off bounds
  }

  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    1968:	fe 01       	movw	r30, r28
    196a:	e4 0f       	add	r30, r20
    196c:	f1 1d       	adc	r31, r1
    196e:	81 81       	ldd	r24, Z+1	; 0x01
    1970:	68 0f       	add	r22, r24
    1972:	60 68       	ori	r22, 0x80	; 128
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <_ZN11OLEDFourBit4homeEv>:
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
}

void OLEDFourBit::home()
{
  command(LCD_RETURNHOME);  // set cursor position to zero
    1988:	62 e0       	ldi	r22, 0x02	; 2
    198a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
}
    198e:	08 95       	ret

00001990 <_ZN11OLEDFourBit5clearEv>:
}

/********** high level commands, for the user! */
void OLEDFourBit::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
}
    1996:	08 95       	ret

00001998 <_ZN11OLEDFourBit5beginEhh>:
  _displayfunction = LCD_FUNCTIONSET | LCD_4BITMODE;

  begin(20, 4);
}

void OLEDFourBit::begin(uint8_t cols, uint8_t lines) {
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
  _numlines = lines;
    19a6:	49 8b       	std	Y+17, r20	; 0x11
  _currline = 0;
    19a8:	18 8a       	std	Y+16, r1	; 0x10

  pinMode(_rs_pin, OUTPUT);
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  pinMode(_rw_pin, OUTPUT);
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  pinMode(_enable_pin, OUTPUT);
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>

  digitalWrite(_rs_pin, LOW);
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
    19ca:	8e 81       	ldd	r24, Y+6	; 0x06
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  digitalWrite(_rw_pin, LOW);
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>

  // SEE PAGE 20 of NHD-0420DZW-AY5
  delayMicroseconds(50000); // wait 50 ms just to be sure tha the lcd is initialized
    19da:	80 e5       	ldi	r24, 0x50	; 80
    19dc:	93 ec       	ldi	r25, 0xC3	; 195
    19de:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
    19e2:	8e 01       	movw	r16, r28
    19e4:	ee 24       	eor	r14, r14
    19e6:	ff 24       	eor	r15, r15

  // Now we pull both RS and R/W low to begin commands

  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    19e8:	f8 01       	movw	r30, r16
    19ea:	80 85       	ldd	r24, Z+8	; 0x08
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
    digitalWrite(_data_pins[i], LOW);
    19f2:	f8 01       	movw	r30, r16
    19f4:	80 85       	ldd	r24, Z+8	; 0x08
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
  // SEE PAGE 20 of NHD-0420DZW-AY5
  delayMicroseconds(50000); // wait 50 ms just to be sure tha the lcd is initialized

  // Now we pull both RS and R/W low to begin commands

  for (int i = 0; i < 4; i++) {
    19fc:	08 94       	sec
    19fe:	e1 1c       	adc	r14, r1
    1a00:	f1 1c       	adc	r15, r1
    1a02:	0f 5f       	subi	r16, 0xFF	; 255
    1a04:	1f 4f       	sbci	r17, 0xFF	; 255
    1a06:	f4 e0       	ldi	r31, 0x04	; 4
    1a08:	ef 16       	cp	r14, r31
    1a0a:	f1 04       	cpc	r15, r1
    1a0c:	69 f7       	brne	.-38     	; 0x19e8 <_ZN11OLEDFourBit5beginEhh+0x50>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], LOW);
  }

  delayMicroseconds(100000);
    1a0e:	80 ea       	ldi	r24, 0xA0	; 160
    1a10:	96 e8       	ldi	r25, 0x86	; 134
    1a12:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  write4bits(0x03);
    1a16:	ce 01       	movw	r24, r28
    1a18:	63 e0       	ldi	r22, 0x03	; 3
    1a1a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(100000);
    1a1e:	80 ea       	ldi	r24, 0xA0	; 160
    1a20:	96 e8       	ldi	r25, 0x86	; 134
    1a22:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  write4bits(0x02);
    1a26:	ce 01       	movw	r24, r28
    1a28:	62 e0       	ldi	r22, 0x02	; 2
    1a2a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(10000);
    1a2e:	80 e1       	ldi	r24, 0x10	; 16
    1a30:	97 e2       	ldi	r25, 0x27	; 39
    1a32:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  write4bits(0x02);
    1a36:	ce 01       	movw	r24, r28
    1a38:	62 e0       	ldi	r22, 0x02	; 2
    1a3a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>
  delayMicroseconds(10000);
    1a3e:	80 e1       	ldi	r24, 0x10	; 16
    1a40:	97 e2       	ldi	r25, 0x27	; 39
    1a42:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>
  write4bits(0x08);
    1a46:	ce 01       	movw	r24, r28
    1a48:	68 e0       	ldi	r22, 0x08	; 8
    1a4a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11OLEDFourBit10write4bitsEh>


  //command(0x28);
  delayMicroseconds(10000);
    1a4e:	80 e1       	ldi	r24, 0x10	; 16
    1a50:	97 e2       	ldi	r25, 0x27	; 39
    1a52:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>

  command(0x08);	// Display off
    1a56:	ce 01       	movw	r24, r28
    1a58:	68 e0       	ldi	r22, 0x08	; 8
    1a5a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1a5e:	80 e1       	ldi	r24, 0x10	; 16
    1a60:	97 e2       	ldi	r25, 0x27	; 39
    1a62:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>

  command(0x01);	// display clear
    1a66:	ce 01       	movw	r24, r28
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1a6e:	80 e1       	ldi	r24, 0x10	; 16
    1a70:	97 e2       	ldi	r25, 0x27	; 39
    1a72:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>

  command(0x06);	// Entry Mode Set:
    1a76:	ce 01       	movw	r24, r28
    1a78:	66 e0       	ldi	r22, 0x06	; 6
    1a7a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1a7e:	80 e1       	ldi	r24, 0x10	; 16
    1a80:	97 e2       	ldi	r25, 0x27	; 39
    1a82:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>


  command(0x02);	// Home
    1a86:	ce 01       	movw	r24, r28
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1a8e:	80 e1       	ldi	r24, 0x10	; 16
    1a90:	97 e2       	ldi	r25, 0x27	; 39
    1a92:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>

  command(0x0C);	// display on/ cursor on/ cursor blink
    1a96:	ce 01       	movw	r24, r28
    1a98:	6c e0       	ldi	r22, 0x0C	; 12
    1a9a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <_ZN11OLEDFourBit7commandEh>
  delayMicroseconds(10000);
    1a9e:	80 e1       	ldi	r24, 0x10	; 16
    1aa0:	97 e2       	ldi	r25, 0x27	; 39
    1aa2:	0e 94 42 28 	call	0x5084	; 0x5084 <delayMicroseconds>


}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	08 95       	ret

00001ab4 <_ZN11OLEDFourBit4initEhhhhhhh>:
{
  init(rs, rw, enable, d4, d5, d6, d7);
}

void OLEDFourBit::init(uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
    1ab4:	8f 92       	push	r8
    1ab6:	9f 92       	push	r9
    1ab8:	af 92       	push	r10
    1aba:	cf 92       	push	r12
    1abc:	ef 92       	push	r14
    1abe:	0f 93       	push	r16
    1ac0:	4c 01       	movw	r8, r24
    1ac2:	86 2f       	mov	r24, r22
{
  _rs_pin = rs;
    1ac4:	f4 01       	movw	r30, r8
    1ac6:	64 83       	std	Z+4, r22	; 0x04
  _rw_pin = rw;
    1ac8:	45 83       	std	Z+5, r20	; 0x05
  _enable_pin = enable;
    1aca:	26 83       	std	Z+6, r18	; 0x06
  _busy_pin = d7;
    1acc:	a7 82       	std	Z+7, r10	; 0x07

  _data_pins[0] = d4;
    1ace:	00 87       	std	Z+8, r16	; 0x08
  _data_pins[1] = d5;
    1ad0:	e1 86       	std	Z+9, r14	; 0x09
  _data_pins[2] = d6;
    1ad2:	c2 86       	std	Z+10, r12	; 0x0a
  _data_pins[3] = d7;
    1ad4:	a3 86       	std	Z+11, r10	; 0x0b


  pinMode(_rs_pin, OUTPUT);
    1ad6:	61 e0       	ldi	r22, 0x01	; 1
    1ad8:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  pinMode(_rw_pin, OUTPUT);
    1adc:	f4 01       	movw	r30, r8
    1ade:	85 81       	ldd	r24, Z+5	; 0x05
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
  pinMode(_enable_pin, OUTPUT);
    1ae6:	f4 01       	movw	r30, r8
    1ae8:	86 81       	ldd	r24, Z+6	; 0x06
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>

  _displayfunction = LCD_FUNCTIONSET | LCD_4BITMODE;
    1af0:	88 e2       	ldi	r24, 0x28	; 40
    1af2:	f4 01       	movw	r30, r8
    1af4:	84 87       	std	Z+12, r24	; 0x0c

  begin(20, 4);
    1af6:	c4 01       	movw	r24, r8
    1af8:	64 e1       	ldi	r22, 0x14	; 20
    1afa:	44 e0       	ldi	r20, 0x04	; 4
    1afc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN11OLEDFourBit5beginEhh>
}
    1b00:	0f 91       	pop	r16
    1b02:	ef 90       	pop	r14
    1b04:	cf 90       	pop	r12
    1b06:	af 90       	pop	r10
    1b08:	9f 90       	pop	r9
    1b0a:	8f 90       	pop	r8
    1b0c:	08 95       	ret

00001b0e <_ZN11OLEDFourBitC1Ehhhhhhh>:
#include <string.h>
#include <inttypes.h>
#include "Arduino.h"

OLEDFourBit::OLEDFourBit(uint8_t rs, uint8_t rw, uint8_t enable,
			     uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
    1b0e:	af 92       	push	r10
    1b10:	cf 92       	push	r12
    1b12:	ef 92       	push	r14
    1b14:	0f 93       	push	r16
    1b16:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1b18:	13 82       	std	Z+3, r1	; 0x03
    1b1a:	12 82       	std	Z+2, r1	; 0x02
    1b1c:	88 e0       	ldi	r24, 0x08	; 8
    1b1e:	92 e0       	ldi	r25, 0x02	; 2
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
{
  init(rs, rw, enable, d4, d5, d6, d7);
    1b24:	cf 01       	movw	r24, r30
    1b26:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <_ZN11OLEDFourBit4initEhhhhhhh>
}
    1b2a:	0f 91       	pop	r16
    1b2c:	ef 90       	pop	r14
    1b2e:	cf 90       	pop	r12
    1b30:	af 90       	pop	r10
    1b32:	08 95       	ret

00001b34 <_ZN8MsTimer23setEmPFvvE>:
volatile unsigned int MsTimer2::tcnt2;

void MsTimer2::set(unsigned long ms, void (*f)()) {
	float prescaler = 0.0;
	
	if (ms == 0)
    1b34:	61 15       	cp	r22, r1
    1b36:	71 05       	cpc	r23, r1
    1b38:	81 05       	cpc	r24, r1
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	69 f4       	brne	.+26     	; 0x1b58 <_ZN8MsTimer23setEmPFvvE+0x24>
		msecs = 1;
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e0       	ldi	r26, 0x00	; 0
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	80 93 5f 02 	sts	0x025F, r24
    1b4a:	90 93 60 02 	sts	0x0260, r25
    1b4e:	a0 93 61 02 	sts	0x0261, r26
    1b52:	b0 93 62 02 	sts	0x0262, r27
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <_ZN8MsTimer23setEmPFvvE+0x34>
	else
		msecs = ms;
    1b58:	60 93 5f 02 	sts	0x025F, r22
    1b5c:	70 93 60 02 	sts	0x0260, r23
    1b60:	80 93 61 02 	sts	0x0261, r24
    1b64:	90 93 62 02 	sts	0x0262, r25
		
	func = f;
    1b68:	50 93 64 02 	sts	0x0264, r21
    1b6c:	40 93 63 02 	sts	0x0263, r20

#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TIMSK2 &= ~(1<<TOIE2);
    1b70:	80 91 70 00 	lds	r24, 0x0070
    1b74:	8e 7f       	andi	r24, 0xFE	; 254
    1b76:	80 93 70 00 	sts	0x0070, r24
	TCCR2A &= ~((1<<WGM21) | (1<<WGM20));
    1b7a:	80 91 b0 00 	lds	r24, 0x00B0
    1b7e:	8c 7f       	andi	r24, 0xFC	; 252
    1b80:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B &= ~(1<<WGM22);
    1b84:	80 91 b1 00 	lds	r24, 0x00B1
    1b88:	87 7f       	andi	r24, 0xF7	; 247
    1b8a:	80 93 b1 00 	sts	0x00B1, r24
	ASSR &= ~(1<<AS2);
    1b8e:	80 91 b6 00 	lds	r24, 0x00B6
    1b92:	8f 7d       	andi	r24, 0xDF	; 223
    1b94:	80 93 b6 00 	sts	0x00B6, r24
	TIMSK2 &= ~(1<<OCIE2A);
    1b98:	80 91 70 00 	lds	r24, 0x0070
    1b9c:	8d 7f       	andi	r24, 0xFD	; 253
    1b9e:	80 93 70 00 	sts	0x0070, r24
	
	if ((F_CPU >= 1000000UL) && (F_CPU <= 16000000UL)) {	// prescaler set to 64
		TCCR2B |= (1<<CS22);
    1ba2:	80 91 b1 00 	lds	r24, 0x00B1
    1ba6:	84 60       	ori	r24, 0x04	; 4
    1ba8:	80 93 b1 00 	sts	0x00B1, r24
		TCCR2B &= ~((1<<CS21) | (1<<CS20));
    1bac:	80 91 b1 00 	lds	r24, 0x00B1
    1bb0:	8c 7f       	andi	r24, 0xFC	; 252
    1bb2:	80 93 b1 00 	sts	0x00B1, r24
	return;
#else
#error Unsupported CPU type
#endif

	tcnt2 = 256 - (int)((float)F_CPU * 0.001 / prescaler);
    1bb6:	86 e0       	ldi	r24, 0x06	; 6
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	90 93 6b 02 	sts	0x026B, r25
    1bbe:	80 93 6a 02 	sts	0x026A, r24
}
    1bc2:	08 95       	ret

00001bc4 <_ZN8MsTimer25startEv>:

void MsTimer2::start() {
	count = 0;
    1bc4:	10 92 65 02 	sts	0x0265, r1
    1bc8:	10 92 66 02 	sts	0x0266, r1
    1bcc:	10 92 67 02 	sts	0x0267, r1
    1bd0:	10 92 68 02 	sts	0x0268, r1
	overflowing = 0;
    1bd4:	10 92 69 02 	sts	0x0269, r1
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = tcnt2;
    1bd8:	80 91 6a 02 	lds	r24, 0x026A
    1bdc:	90 91 6b 02 	lds	r25, 0x026B
    1be0:	80 93 b2 00 	sts	0x00B2, r24
	TIMSK2 |= (1<<TOIE2);
    1be4:	e0 e7       	ldi	r30, 0x70	; 112
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	81 60       	ori	r24, 0x01	; 1
    1bec:	80 83       	st	Z, r24
#elif defined (__AVR_ATmega32U4__)
	TIFR4 = (1<<TOV4);
	TCNT4 = 0;
	TIMSK4 = (1<<TOIE4);
#endif
}
    1bee:	08 95       	ret

00001bf0 <_ZN8MsTimer29_overflowEv>:
	TIMSK4 = 0;
#endif
}

void MsTimer2::_overflow() {
	count += 1;
    1bf0:	80 91 65 02 	lds	r24, 0x0265
    1bf4:	90 91 66 02 	lds	r25, 0x0266
    1bf8:	a0 91 67 02 	lds	r26, 0x0267
    1bfc:	b0 91 68 02 	lds	r27, 0x0268
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	b1 1d       	adc	r27, r1
    1c06:	80 93 65 02 	sts	0x0265, r24
    1c0a:	90 93 66 02 	sts	0x0266, r25
    1c0e:	a0 93 67 02 	sts	0x0267, r26
    1c12:	b0 93 68 02 	sts	0x0268, r27
	
	if (count >= msecs && !overflowing) {
    1c16:	80 91 65 02 	lds	r24, 0x0265
    1c1a:	90 91 66 02 	lds	r25, 0x0266
    1c1e:	a0 91 67 02 	lds	r26, 0x0267
    1c22:	b0 91 68 02 	lds	r27, 0x0268
    1c26:	20 91 5f 02 	lds	r18, 0x025F
    1c2a:	30 91 60 02 	lds	r19, 0x0260
    1c2e:	40 91 61 02 	lds	r20, 0x0261
    1c32:	50 91 62 02 	lds	r21, 0x0262
    1c36:	82 17       	cp	r24, r18
    1c38:	93 07       	cpc	r25, r19
    1c3a:	a4 07       	cpc	r26, r20
    1c3c:	b5 07       	cpc	r27, r21
    1c3e:	10 f1       	brcs	.+68     	; 0x1c84 <_ZN8MsTimer29_overflowEv+0x94>
    1c40:	80 91 69 02 	lds	r24, 0x0269
    1c44:	88 23       	and	r24, r24
    1c46:	f1 f4       	brne	.+60     	; 0x1c84 <_ZN8MsTimer29_overflowEv+0x94>
		overflowing = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 93 69 02 	sts	0x0269, r24
		count = count - msecs; // subtract ms to catch missed overflows
    1c4e:	80 91 65 02 	lds	r24, 0x0265
    1c52:	90 91 66 02 	lds	r25, 0x0266
    1c56:	a0 91 67 02 	lds	r26, 0x0267
    1c5a:	b0 91 68 02 	lds	r27, 0x0268
    1c5e:	82 1b       	sub	r24, r18
    1c60:	93 0b       	sbc	r25, r19
    1c62:	a4 0b       	sbc	r26, r20
    1c64:	b5 0b       	sbc	r27, r21
    1c66:	80 93 65 02 	sts	0x0265, r24
    1c6a:	90 93 66 02 	sts	0x0266, r25
    1c6e:	a0 93 67 02 	sts	0x0267, r26
    1c72:	b0 93 68 02 	sts	0x0268, r27
					// set to 0 if you don't want this.
		(*func)();
    1c76:	e0 91 63 02 	lds	r30, 0x0263
    1c7a:	f0 91 64 02 	lds	r31, 0x0264
    1c7e:	09 95       	icall
		overflowing = 0;
    1c80:	10 92 69 02 	sts	0x0269, r1
    1c84:	08 95       	ret

00001c86 <__vector_9>:
}

#if defined (__AVR_ATmega32U4__)
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_OVF_vect) {
    1c86:	1f 92       	push	r1
    1c88:	0f 92       	push	r0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	0f 92       	push	r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
#endif
#if defined (__AVR_ATmega168__) || defined (__AVR_ATmega48__) || defined (__AVR_ATmega88__) || defined (__AVR_ATmega328P__) || defined (__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB1286__)
	TCNT2 = MsTimer2::tcnt2;
    1ca8:	80 91 6a 02 	lds	r24, 0x026A
    1cac:	90 91 6b 02 	lds	r25, 0x026B
    1cb0:	80 93 b2 00 	sts	0x00B2, r24
#elif defined (__AVR_ATmega8__)
	TCNT2 = MsTimer2::tcnt2;
#elif defined (__AVR_ATmega32U4__)
	// not necessary on 32u4's high speed timer4
#endif
	MsTimer2::_overflow();
    1cb4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN8MsTimer29_overflowEv>
}
    1cb8:	ff 91       	pop	r31
    1cba:	ef 91       	pop	r30
    1cbc:	bf 91       	pop	r27
    1cbe:	af 91       	pop	r26
    1cc0:	9f 91       	pop	r25
    1cc2:	8f 91       	pop	r24
    1cc4:	7f 91       	pop	r23
    1cc6:	6f 91       	pop	r22
    1cc8:	5f 91       	pop	r21
    1cca:	4f 91       	pop	r20
    1ccc:	3f 91       	pop	r19
    1cce:	2f 91       	pop	r18
    1cd0:	0f 90       	pop	r0
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	0f 90       	pop	r0
    1cd6:	1f 90       	pop	r1
    1cd8:	18 95       	reti

00001cda <_ZN18BeerTempControllerD1Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

BeerTempController::~BeerTempController() {
    1cda:	fc 01       	movw	r30, r24
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	92 e0       	ldi	r25, 0x02	; 2
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    1ce4:	08 95       	ret

00001ce6 <_ZN18BeerTempController14SetTempSettingEf>:
//float BeerTempController::GetTemp()
//{
//	return _Temp->GetTemperature();
//}
//
float BeerTempController::SetTempSetting(float newSetting)
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
{
	return TemperatureSetting = newSetting;
    1cea:	8c 01       	movw	r16, r24
    1cec:	0f 5a       	subi	r16, 0xAF	; 175
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	db 01       	movw	r26, r22
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	80 83       	st	Z, r24
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	a2 83       	std	Z+2, r26	; 0x02
    1cfc:	b3 83       	std	Z+3, r27	; 0x03
}
    1cfe:	ba 01       	movw	r22, r20
    1d00:	cd 01       	movw	r24, r26
    1d02:	1f 91       	pop	r17
    1d04:	0f 91       	pop	r16
    1d06:	08 95       	ret

00001d08 <_ZN18BeerTempController13GetTempActualEv>:

float BeerTempController::GetTempActual()
    1d08:	fc 01       	movw	r30, r24
    1d0a:	e3 5b       	subi	r30, 0xB3	; 179
    1d0c:	ff 4f       	sbci	r31, 0xFF	; 255
{
	return TemperatureActual;
}
    1d0e:	20 81       	ld	r18, Z
    1d10:	31 81       	ldd	r19, Z+1	; 0x01
    1d12:	42 81       	ldd	r20, Z+2	; 0x02
    1d14:	53 81       	ldd	r21, Z+3	; 0x03
    1d16:	b9 01       	movw	r22, r18
    1d18:	ca 01       	movw	r24, r20
    1d1a:	08 95       	ret

00001d1c <_ZN18BeerTempController14GetTempSettingEv>:

float BeerTempController::GetTempSetting()
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	ef 5a       	subi	r30, 0xAF	; 175
    1d20:	ff 4f       	sbci	r31, 0xFF	; 255
{
	return TemperatureSetting;
}
    1d22:	20 81       	ld	r18, Z
    1d24:	31 81       	ldd	r19, Z+1	; 0x01
    1d26:	42 81       	ldd	r20, Z+2	; 0x02
    1d28:	53 81       	ldd	r21, Z+3	; 0x03
    1d2a:	b9 01       	movw	r22, r18
    1d2c:	ca 01       	movw	r24, r20
    1d2e:	08 95       	ret

00001d30 <_ZN18BeerTempController11updateSlopeEv>:
	}
//	Serial.print("Beer After ");
//	Serial.println(_timer);
}

void BeerTempController::updateSlope()  //called every minute
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	fc 01       	movw	r30, r24
{
	TempHistory[TempHistoryIndex] = TempFiltSlow[3];
    1d46:	5d ec       	ldi	r21, 0xCD	; 205
    1d48:	85 2e       	mov	r8, r21
    1d4a:	91 2c       	mov	r9, r1
    1d4c:	88 0e       	add	r8, r24
    1d4e:	99 1e       	adc	r9, r25
    1d50:	d4 01       	movw	r26, r8
    1d52:	0c 91       	ld	r16, X
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	d8 01       	movw	r26, r16
    1d58:	aa 0f       	add	r26, r26
    1d5a:	bb 1f       	adc	r27, r27
    1d5c:	aa 0f       	add	r26, r26
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	a8 0f       	add	r26, r24
    1d62:	b9 1f       	adc	r27, r25
    1d64:	ab 5a       	subi	r26, 0xAB	; 171
    1d66:	bf 4f       	sbci	r27, 0xFF	; 255
    1d68:	fe 96       	adiw	r30, 0x3e	; 62
    1d6a:	c0 80       	ld	r12, Z
    1d6c:	d1 80       	ldd	r13, Z+1	; 0x01
    1d6e:	e2 80       	ldd	r14, Z+2	; 0x02
    1d70:	f3 80       	ldd	r15, Z+3	; 0x03
    1d72:	fe 97       	sbiw	r30, 0x3e	; 62
    1d74:	cd 92       	st	X+, r12
    1d76:	dd 92       	st	X+, r13
    1d78:	ed 92       	st	X+, r14
    1d7a:	fc 92       	st	X, r15
    1d7c:	13 97       	sbiw	r26, 0x03	; 3
	Slope = TempHistory[TempHistoryIndex]
		- TempHistory[(TempHistoryIndex + 1) % 30];
    1d7e:	32 e4       	ldi	r19, 0x42	; 66
    1d80:	a3 2e       	mov	r10, r19
    1d82:	b1 2c       	mov	r11, r1
    1d84:	ae 0e       	add	r10, r30
    1d86:	bf 1e       	adc	r11, r31
    1d88:	0f 5f       	subi	r16, 0xFF	; 255
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	6e e1       	ldi	r22, 0x1E	; 30
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	e8 0f       	add	r30, r24
    1da0:	f9 1f       	adc	r31, r25
    1da2:	eb 5a       	subi	r30, 0xAB	; 171
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	c7 01       	movw	r24, r14
    1da8:	b6 01       	movw	r22, r12
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	42 81       	ldd	r20, Z+2	; 0x02
    1db0:	53 81       	ldd	r21, Z+3	; 0x03
    1db2:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    1db6:	f5 01       	movw	r30, r10
    1db8:	60 83       	st	Z, r22
    1dba:	71 83       	std	Z+1, r23	; 0x01
    1dbc:	82 83       	std	Z+2, r24	; 0x02
    1dbe:	93 83       	std	Z+3, r25	; 0x03
	TempHistoryIndex = (TempHistoryIndex + 1) % 30;
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	6e e1       	ldi	r22, 0x1E	; 30
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    1dca:	d4 01       	movw	r26, r8
    1dcc:	8c 93       	st	X, r24
	Services &= ~updateSlope_SERVICE;		// reset the service flag
    1dce:	80 91 7e 02 	lds	r24, 0x027E
    1dd2:	8f 7d       	andi	r24, 0xDF	; 223
    1dd4:	80 93 7e 02 	sts	0x027E, r24
}
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	df 90       	pop	r13
    1de2:	cf 90       	pop	r12
    1de4:	bf 90       	pop	r11
    1de6:	af 90       	pop	r10
    1de8:	9f 90       	pop	r9
    1dea:	8f 90       	pop	r8
    1dec:	08 95       	ret

00001dee <_ZN18BeerTempController30updateSlowFilteredTemperaturesEv>:
void BeerTempController::updateSlowFilteredTemperatures() //called every 10 seconds
    1dee:	2f 92       	push	r2
    1df0:	3f 92       	push	r3
    1df2:	4f 92       	push	r4
    1df4:	5f 92       	push	r5
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	2a 97       	sbiw	r28, 0x0a	; 10
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	fc 01       	movw	r30, r24
{

	TempSlow[0] = TempSlow[1];
    1e24:	66 a1       	ldd	r22, Z+38	; 0x26
    1e26:	77 a1       	ldd	r23, Z+39	; 0x27
    1e28:	80 a5       	ldd	r24, Z+40	; 0x28
    1e2a:	91 a5       	ldd	r25, Z+41	; 0x29
    1e2c:	62 a3       	std	Z+34, r22	; 0x22
    1e2e:	73 a3       	std	Z+35, r23	; 0x23
    1e30:	84 a3       	std	Z+36, r24	; 0x24
    1e32:	95 a3       	std	Z+37, r25	; 0x25
	TempSlow[1] = TempSlow[2];
    1e34:	62 a4       	ldd	r6, Z+42	; 0x2a
    1e36:	73 a4       	ldd	r7, Z+43	; 0x2b
    1e38:	84 a4       	ldd	r8, Z+44	; 0x2c
    1e3a:	95 a4       	ldd	r9, Z+45	; 0x2d
    1e3c:	66 a2       	std	Z+38, r6	; 0x26
    1e3e:	77 a2       	std	Z+39, r7	; 0x27
    1e40:	80 a6       	std	Z+40, r8	; 0x28
    1e42:	91 a6       	std	Z+41, r9	; 0x29
	TempSlow[2] = TempSlow[3];
    1e44:	a6 a4       	ldd	r10, Z+46	; 0x2e
    1e46:	b7 a4       	ldd	r11, Z+47	; 0x2f
    1e48:	c0 a8       	ldd	r12, Z+48	; 0x30
    1e4a:	d1 a8       	ldd	r13, Z+49	; 0x31
    1e4c:	a2 a6       	std	Z+42, r10	; 0x2a
    1e4e:	b3 a6       	std	Z+43, r11	; 0x2b
    1e50:	c4 a6       	std	Z+44, r12	; 0x2c
    1e52:	d5 a6       	std	Z+45, r13	; 0x2d
	TempSlow[3] = TempFiltFast[3];
    1e54:	26 8d       	ldd	r18, Z+30	; 0x1e
    1e56:	37 8d       	ldd	r19, Z+31	; 0x1f
    1e58:	40 a1       	ldd	r20, Z+32	; 0x20
    1e5a:	51 a1       	ldd	r21, Z+33	; 0x21
    1e5c:	26 a7       	std	Z+46, r18	; 0x2e
    1e5e:	37 a7       	std	Z+47, r19	; 0x2f
    1e60:	40 ab       	std	Z+48, r20	; 0x30
    1e62:	51 ab       	std	Z+49, r21	; 0x31

	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=0.1Hz)
	TempFiltSlow[0] = TempFiltSlow[1];
    1e64:	26 a8       	ldd	r2, Z+54	; 0x36
    1e66:	37 a8       	ldd	r3, Z+55	; 0x37
    1e68:	40 ac       	ldd	r4, Z+56	; 0x38
    1e6a:	51 ac       	ldd	r5, Z+57	; 0x39
    1e6c:	22 aa       	std	Z+50, r2	; 0x32
    1e6e:	33 aa       	std	Z+51, r3	; 0x33
    1e70:	44 aa       	std	Z+52, r4	; 0x34
    1e72:	55 aa       	std	Z+53, r5	; 0x35
	TempFiltSlow[1] = TempFiltSlow[2];
    1e74:	e2 ac       	ldd	r14, Z+58	; 0x3a
    1e76:	f3 ac       	ldd	r15, Z+59	; 0x3b
    1e78:	04 ad       	ldd	r16, Z+60	; 0x3c
    1e7a:	15 ad       	ldd	r17, Z+61	; 0x3d
    1e7c:	ed 82       	std	Y+5, r14	; 0x05
    1e7e:	fe 82       	std	Y+6, r15	; 0x06
    1e80:	0f 83       	std	Y+7, r16	; 0x07
    1e82:	18 87       	std	Y+8, r17	; 0x08
    1e84:	e6 aa       	std	Z+54, r14	; 0x36
    1e86:	f7 aa       	std	Z+55, r15	; 0x37
    1e88:	00 af       	std	Z+56, r16	; 0x38
    1e8a:	11 af       	std	Z+57, r17	; 0x39
	TempFiltSlow[2] = TempFiltSlow[3];
    1e8c:	8f 01       	movw	r16, r30
    1e8e:	02 5c       	subi	r16, 0xC2	; 194
    1e90:	1f 4f       	sbci	r17, 0xFF	; 255
    1e92:	1a 87       	std	Y+10, r17	; 0x0a
    1e94:	09 87       	std	Y+9, r16	; 0x09
    1e96:	d8 01       	movw	r26, r16
    1e98:	ed 90       	ld	r14, X+
    1e9a:	fd 90       	ld	r15, X+
    1e9c:	0d 91       	ld	r16, X+
    1e9e:	1c 91       	ld	r17, X
    1ea0:	e9 82       	std	Y+1, r14	; 0x01
    1ea2:	fa 82       	std	Y+2, r15	; 0x02
    1ea4:	0b 83       	std	Y+3, r16	; 0x03
    1ea6:	1c 83       	std	Y+4, r17	; 0x04
    1ea8:	e2 ae       	std	Z+58, r14	; 0x3a
    1eaa:	f3 ae       	std	Z+59, r15	; 0x3b
    1eac:	04 af       	std	Z+60, r16	; 0x3c
    1eae:	15 af       	std	Z+61, r17	; 0x3d
	TempFiltSlow[3] = (TempSlow[0] + TempSlow[3]
        + 3 * (TempSlow[1] + TempSlow[2])) / 3.430944333e+04
        + (0.8818931306 * TempFiltSlow[0])
        + (-2.7564831952 * TempFiltSlow[1])
        + (2.8743568927 * TempFiltSlow[2]);
    1eb0:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1eb4:	7b 01       	movw	r14, r22
    1eb6:	8c 01       	movw	r16, r24
    1eb8:	c4 01       	movw	r24, r8
    1eba:	b3 01       	movw	r22, r6
    1ebc:	a6 01       	movw	r20, r12
    1ebe:	95 01       	movw	r18, r10
    1ec0:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e4       	ldi	r20, 0x40	; 64
    1eca:	50 e4       	ldi	r21, 0x40	; 64
    1ecc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1edc:	21 e7       	ldi	r18, 0x71	; 113
    1ede:	35 e0       	ldi	r19, 0x05	; 5
    1ee0:	46 e0       	ldi	r20, 0x06	; 6
    1ee2:	57 e4       	ldi	r21, 0x47	; 71
    1ee4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    1ee8:	7b 01       	movw	r14, r22
    1eea:	8c 01       	movw	r16, r24
    1eec:	c2 01       	movw	r24, r4
    1eee:	b1 01       	movw	r22, r2
    1ef0:	20 ec       	ldi	r18, 0xC0	; 192
    1ef2:	33 ec       	ldi	r19, 0xC3	; 195
    1ef4:	41 e6       	ldi	r20, 0x61	; 97
    1ef6:	5f e3       	ldi	r21, 0x3F	; 63
    1ef8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    1efc:	9b 01       	movw	r18, r22
    1efe:	ac 01       	movw	r20, r24
    1f00:	c8 01       	movw	r24, r16
    1f02:	b7 01       	movw	r22, r14
    1f04:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1f08:	7b 01       	movw	r14, r22
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f10:	8f 81       	ldd	r24, Y+7	; 0x07
    1f12:	98 85       	ldd	r25, Y+8	; 0x08
    1f14:	28 e3       	ldi	r18, 0x38	; 56
    1f16:	3a e6       	ldi	r19, 0x6A	; 106
    1f18:	40 e3       	ldi	r20, 0x30	; 48
    1f1a:	50 ec       	ldi	r21, 0xC0	; 192
    1f1c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    1f20:	9b 01       	movw	r18, r22
    1f22:	ac 01       	movw	r20, r24
    1f24:	c8 01       	movw	r24, r16
    1f26:	b7 01       	movw	r22, r14
    1f28:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1f2c:	7b 01       	movw	r14, r22
    1f2e:	8c 01       	movw	r16, r24
    1f30:	69 81       	ldd	r22, Y+1	; 0x01
    1f32:	7a 81       	ldd	r23, Y+2	; 0x02
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	27 e7       	ldi	r18, 0x77	; 119
    1f3a:	35 ef       	ldi	r19, 0xF5	; 245
    1f3c:	47 e3       	ldi	r20, 0x37	; 55
    1f3e:	50 e4       	ldi	r21, 0x40	; 64
    1f40:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    1f44:	9b 01       	movw	r18, r22
    1f46:	ac 01       	movw	r20, r24
    1f48:	c8 01       	movw	r24, r16
    1f4a:	b7 01       	movw	r22, r14
    1f4c:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    1f50:	e9 85       	ldd	r30, Y+9	; 0x09
    1f52:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f54:	60 83       	st	Z, r22
    1f56:	71 83       	std	Z+1, r23	; 0x01
    1f58:	82 83       	std	Z+2, r24	; 0x02
    1f5a:	93 83       	std	Z+3, r25	; 0x03

	Services &= ~updateSlowFilteredTemperatures_SERVICE;		// reset the service flag
    1f5c:	80 91 7e 02 	lds	r24, 0x027E
    1f60:	8f 7d       	andi	r24, 0xDF	; 223
    1f62:	80 93 7e 02 	sts	0x027E, r24
}
    1f66:	2a 96       	adiw	r28, 0x0a	; 10
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	bf 90       	pop	r11
    1f84:	af 90       	pop	r10
    1f86:	9f 90       	pop	r9
    1f88:	8f 90       	pop	r8
    1f8a:	7f 90       	pop	r7
    1f8c:	6f 90       	pop	r6
    1f8e:	5f 90       	pop	r5
    1f90:	4f 90       	pop	r4
    1f92:	3f 90       	pop	r3
    1f94:	2f 90       	pop	r2
    1f96:	08 95       	ret

00001f98 <_ZN18BeerTempController18updateTemperaturesEv>:


void BeerTempController::updateTemperatures() { //called every 200 milliseconds
    1f98:	4f 92       	push	r4
    1f9a:	5f 92       	push	r5
    1f9c:	6f 92       	push	r6
    1f9e:	7f 92       	push	r7
    1fa0:	8f 92       	push	r8
    1fa2:	9f 92       	push	r9
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <_ZN18BeerTempController18updateTemperaturesEv+0x22>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <_ZN18BeerTempController18updateTemperaturesEv+0x24>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	8c 01       	movw	r16, r24
//	Serial.println("Beer1");
//	Serial.println(TempFast[1]);
	TempFast[0] = TempFast[1];
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	86 81       	ldd	r24, Z+6	; 0x06
    1fc6:	97 81       	ldd	r25, Z+7	; 0x07
    1fc8:	a0 85       	ldd	r26, Z+8	; 0x08
    1fca:	b1 85       	ldd	r27, Z+9	; 0x09
    1fcc:	82 83       	std	Z+2, r24	; 0x02
    1fce:	93 83       	std	Z+3, r25	; 0x03
    1fd0:	a4 83       	std	Z+4, r26	; 0x04
    1fd2:	b5 83       	std	Z+5, r27	; 0x05
//	Serial.println("Beer2");
//	Serial.println(TempFast[2]);
	TempFast[1] = TempFast[2];
    1fd4:	82 85       	ldd	r24, Z+10	; 0x0a
    1fd6:	93 85       	ldd	r25, Z+11	; 0x0b
    1fd8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fda:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fdc:	86 83       	std	Z+6, r24	; 0x06
    1fde:	97 83       	std	Z+7, r25	; 0x07
    1fe0:	a0 87       	std	Z+8, r26	; 0x08
    1fe2:	b1 87       	std	Z+9, r27	; 0x09
//	Serial.println("Beer3");
//	Serial.println(TempFast[3]);
	TempFast[2] = TempFast[3];
    1fe4:	86 85       	ldd	r24, Z+14	; 0x0e
    1fe6:	97 85       	ldd	r25, Z+15	; 0x0f
    1fe8:	a0 89       	ldd	r26, Z+16	; 0x10
    1fea:	b1 89       	ldd	r27, Z+17	; 0x11
    1fec:	82 87       	std	Z+10, r24	; 0x0a
    1fee:	93 87       	std	Z+11, r25	; 0x0b
    1ff0:	a4 87       	std	Z+12, r26	; 0x0c
    1ff2:	b5 87       	std	Z+13, r27	; 0x0d
	TempFast[3] = _Temp->GetTemperature();
    1ff4:	ea 5b       	subi	r30, 0xBA	; 186
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	91 81       	ldd	r25, Z+1	; 0x01
    1ffc:	0e 94 03 23 	call	0x4606	; 0x4606 <_ZN11TempSensors14GetTemperatureEv>
    2000:	9b 01       	movw	r18, r22
    2002:	ac 01       	movw	r20, r24
    2004:	d8 01       	movw	r26, r16
    2006:	1e 96       	adiw	r26, 0x0e	; 14
    2008:	6d 93       	st	X+, r22
    200a:	7d 93       	st	X+, r23
    200c:	8d 93       	st	X+, r24
    200e:	9c 93       	st	X, r25
    2010:	51 97       	sbiw	r26, 0x11	; 17
//	}

	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=5Hz)
//	Serial.println("Beer5");
//	Serial.println(TempFiltFast[1]);
	TempFiltFast[0] = TempFiltFast[1];
    2012:	56 96       	adiw	r26, 0x16	; 22
    2014:	8d 90       	ld	r8, X+
    2016:	9d 90       	ld	r9, X+
    2018:	ad 90       	ld	r10, X+
    201a:	bc 90       	ld	r11, X
    201c:	59 97       	sbiw	r26, 0x19	; 25
    201e:	f8 01       	movw	r30, r16
    2020:	82 8a       	std	Z+18, r8	; 0x12
    2022:	93 8a       	std	Z+19, r9	; 0x13
    2024:	a4 8a       	std	Z+20, r10	; 0x14
    2026:	b5 8a       	std	Z+21, r11	; 0x15
//	Serial.println("Beer6");
//	Serial.println(TempFiltFast[2]);
	TempFiltFast[1] = TempFiltFast[2];
    2028:	42 8c       	ldd	r4, Z+26	; 0x1a
    202a:	53 8c       	ldd	r5, Z+27	; 0x1b
    202c:	64 8c       	ldd	r6, Z+28	; 0x1c
    202e:	75 8c       	ldd	r7, Z+29	; 0x1d
    2030:	56 96       	adiw	r26, 0x16	; 22
    2032:	4d 92       	st	X+, r4
    2034:	5d 92       	st	X+, r5
    2036:	6d 92       	st	X+, r6
    2038:	7c 92       	st	X, r7
    203a:	59 97       	sbiw	r26, 0x19	; 25
//	Serial.println("Beer7");
//	Serial.println(TempFiltFast[3]);
	TempFiltFast[2] = TempFiltFast[3];
    203c:	5e 96       	adiw	r26, 0x1e	; 30
    203e:	8d 91       	ld	r24, X+
    2040:	9d 91       	ld	r25, X+
    2042:	0d 90       	ld	r0, X+
    2044:	bc 91       	ld	r27, X
    2046:	a0 2d       	mov	r26, r0
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	9a 83       	std	Y+2, r25	; 0x02
    204c:	ab 83       	std	Y+3, r26	; 0x03
    204e:	bc 83       	std	Y+4, r27	; 0x04
    2050:	82 8f       	std	Z+26, r24	; 0x1a
    2052:	93 8f       	std	Z+27, r25	; 0x1b
    2054:	a4 8f       	std	Z+28, r26	; 0x1c
    2056:	b5 8f       	std	Z+29, r27	; 0x1d
//	Serial.println(TempFast[0]);
	TempFiltFast[3] = (TempFast[0] + TempFast[3]
		+ 3 * (TempFast[1] + TempFast[2])) / 3.430944333e+04
		+ (0.8818931306 * TempFiltFast[0])
		+ (-2.7564831952 * TempFiltFast[1])
		+ (2.8743568927 * TempFiltFast[2]);
    2058:	62 81       	ldd	r22, Z+2	; 0x02
    205a:	73 81       	ldd	r23, Z+3	; 0x03
    205c:	84 81       	ldd	r24, Z+4	; 0x04
    205e:	95 81       	ldd	r25, Z+5	; 0x05
    2060:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2064:	6b 01       	movw	r12, r22
    2066:	7c 01       	movw	r14, r24
    2068:	d8 01       	movw	r26, r16
    206a:	16 96       	adiw	r26, 0x06	; 6
    206c:	6d 91       	ld	r22, X+
    206e:	7d 91       	ld	r23, X+
    2070:	8d 91       	ld	r24, X+
    2072:	9c 91       	ld	r25, X
    2074:	19 97       	sbiw	r26, 0x09	; 9
    2076:	1a 96       	adiw	r26, 0x0a	; 10
    2078:	2d 91       	ld	r18, X+
    207a:	3d 91       	ld	r19, X+
    207c:	4d 91       	ld	r20, X+
    207e:	5c 91       	ld	r21, X
    2080:	1d 97       	sbiw	r26, 0x0d	; 13
    2082:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e4       	ldi	r20, 0x40	; 64
    208c:	50 e4       	ldi	r21, 0x40	; 64
    208e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	c7 01       	movw	r24, r14
    2098:	b6 01       	movw	r22, r12
    209a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    209e:	21 e7       	ldi	r18, 0x71	; 113
    20a0:	35 e0       	ldi	r19, 0x05	; 5
    20a2:	46 e0       	ldi	r20, 0x06	; 6
    20a4:	57 e4       	ldi	r21, 0x47	; 71
    20a6:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    20aa:	6b 01       	movw	r12, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	c5 01       	movw	r24, r10
    20b0:	b4 01       	movw	r22, r8
    20b2:	20 ec       	ldi	r18, 0xC0	; 192
    20b4:	33 ec       	ldi	r19, 0xC3	; 195
    20b6:	41 e6       	ldi	r20, 0x61	; 97
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	c7 01       	movw	r24, r14
    20c4:	b6 01       	movw	r22, r12
    20c6:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    20ca:	6b 01       	movw	r12, r22
    20cc:	7c 01       	movw	r14, r24
    20ce:	c3 01       	movw	r24, r6
    20d0:	b2 01       	movw	r22, r4
    20d2:	28 e3       	ldi	r18, 0x38	; 56
    20d4:	3a e6       	ldi	r19, 0x6A	; 106
    20d6:	40 e3       	ldi	r20, 0x30	; 48
    20d8:	50 ec       	ldi	r21, 0xC0	; 192
    20da:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    20de:	9b 01       	movw	r18, r22
    20e0:	ac 01       	movw	r20, r24
    20e2:	c7 01       	movw	r24, r14
    20e4:	b6 01       	movw	r22, r12
    20e6:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    20ea:	6b 01       	movw	r12, r22
    20ec:	7c 01       	movw	r14, r24
    20ee:	69 81       	ldd	r22, Y+1	; 0x01
    20f0:	7a 81       	ldd	r23, Y+2	; 0x02
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	9c 81       	ldd	r25, Y+4	; 0x04
    20f6:	27 e7       	ldi	r18, 0x77	; 119
    20f8:	35 ef       	ldi	r19, 0xF5	; 245
    20fa:	47 e3       	ldi	r20, 0x37	; 55
    20fc:	50 e4       	ldi	r21, 0x40	; 64
    20fe:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	c7 01       	movw	r24, r14
    2108:	b6 01       	movw	r22, r12
    210a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	9b 01       	movw	r18, r22
    2112:	ac 01       	movw	r20, r24
    2114:	f8 01       	movw	r30, r16
    2116:	26 8f       	std	Z+30, r18	; 0x1e
    2118:	37 8f       	std	Z+31, r19	; 0x1f
    211a:	40 a3       	std	Z+32, r20	; 0x20
    211c:	51 a3       	std	Z+33, r21	; 0x21
//	Serial.println("Beer9");
//	Serial.println(TempFiltFast[3]);
	TemperatureActual = TempFiltFast[3];
    211e:	03 5b       	subi	r16, 0xB3	; 179
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	cb 01       	movw	r24, r22
    2124:	f8 01       	movw	r30, r16
    2126:	80 83       	st	Z, r24
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	a2 83       	std	Z+2, r26	; 0x02
    212c:	b3 83       	std	Z+3, r27	; 0x03

	Services &= ~updateTemperatures_SERVICE;		// reset the service flag
    212e:	80 91 7e 02 	lds	r24, 0x027E
    2132:	8f 7e       	andi	r24, 0xEF	; 239
    2134:	80 93 7e 02 	sts	0x027E, r24
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	ff 90       	pop	r15
    214a:	ef 90       	pop	r14
    214c:	df 90       	pop	r13
    214e:	cf 90       	pop	r12
    2150:	bf 90       	pop	r11
    2152:	af 90       	pop	r10
    2154:	9f 90       	pop	r9
    2156:	8f 90       	pop	r8
    2158:	7f 90       	pop	r7
    215a:	6f 90       	pop	r6
    215c:	5f 90       	pop	r5
    215e:	4f 90       	pop	r4
    2160:	08 95       	ret

00002162 <_ZN18BeerTempController11UpdateTimerEv>:
{
	return 0;
	//Run the algorithm
}

void BeerTempController::UpdateTimer()
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	ec 01       	movw	r28, r24
{
	_timer+=200;
    216c:	fc 01       	movw	r30, r24
    216e:	e8 5b       	subi	r30, 0xB8	; 184
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	60 81       	ld	r22, Z
    2174:	71 81       	ldd	r23, Z+1	; 0x01
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	68 53       	subi	r22, 0x38	; 56
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	8f 4f       	sbci	r24, 0xFF	; 255
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	60 83       	st	Z, r22
    2184:	71 83       	std	Z+1, r23	; 0x01
    2186:	82 83       	std	Z+2, r24	; 0x02
    2188:	93 83       	std	Z+3, r25	; 0x03

//	Serial.print("Beer Before ");
//	Serial.println(_timer);
	//Check the timers
	if ((_timer % 200) == 0){
    218a:	28 ec       	ldi	r18, 0xC8	; 200
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    2196:	61 15       	cp	r22, r1
    2198:	71 05       	cpc	r23, r1
    219a:	81 05       	cpc	r24, r1
    219c:	91 05       	cpc	r25, r1
    219e:	19 f4       	brne	.+6      	; 0x21a6 <_ZN18BeerTempController11UpdateTimerEv+0x44>
//		Serial.println("Updating Beer Fast Temps");
		updateTemperatures();					// Update Fast Temperatures every 200ms
    21a0:	ce 01       	movw	r24, r28
    21a2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <_ZN18BeerTempController18updateTemperaturesEv>
	}
	if((_timer % 10000) == 0){					// Update Slow Temperatures every 10 seconds
    21a6:	c8 5b       	subi	r28, 0xB8	; 184
    21a8:	df 4f       	sbci	r29, 0xFF	; 255
    21aa:	68 81       	ld	r22, Y
    21ac:	79 81       	ldd	r23, Y+1	; 0x01
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	9b 81       	ldd	r25, Y+3	; 0x03
    21b2:	c8 54       	subi	r28, 0x48	; 72
    21b4:	d0 40       	sbci	r29, 0x00	; 0
    21b6:	20 e1       	ldi	r18, 0x10	; 16
    21b8:	37 e2       	ldi	r19, 0x27	; 39
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    21c2:	61 15       	cp	r22, r1
    21c4:	71 05       	cpc	r23, r1
    21c6:	81 05       	cpc	r24, r1
    21c8:	91 05       	cpc	r25, r1
    21ca:	91 f5       	brne	.+100    	; 0x2230 <_ZN18BeerTempController11UpdateTimerEv+0xce>
//		Serial.println("Updating Beer Slow Temps");
		updateSlowFilteredTemperatures();
    21cc:	ce 01       	movw	r24, r28
    21ce:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <_ZN18BeerTempController30updateSlowFilteredTemperaturesEv>
		Serial.print(TempFast[3]);
    21d2:	4e 85       	ldd	r20, Y+14	; 0x0e
    21d4:	5f 85       	ldd	r21, Y+15	; 0x0f
    21d6:	68 89       	ldd	r22, Y+16	; 0x10
    21d8:	79 89       	ldd	r23, Y+17	; 0x11
    21da:	82 e4       	ldi	r24, 0x42	; 66
    21dc:	93 e0       	ldi	r25, 0x03	; 3
    21de:	22 e0       	ldi	r18, 0x02	; 2
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    21e6:	82 e4       	ldi	r24, 0x42	; 66
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	6c e2       	ldi	r22, 0x2C	; 44
    21ec:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
		Serial.print(TempFiltFast[3]);
    21f0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    21f2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    21f4:	68 a1       	ldd	r22, Y+32	; 0x20
    21f6:	79 a1       	ldd	r23, Y+33	; 0x21
    21f8:	82 e4       	ldi	r24, 0x42	; 66
    21fa:	93 e0       	ldi	r25, 0x03	; 3
    21fc:	22 e0       	ldi	r18, 0x02	; 2
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    2204:	82 e4       	ldi	r24, 0x42	; 66
    2206:	93 e0       	ldi	r25, 0x03	; 3
    2208:	6c e2       	ldi	r22, 0x2C	; 44
    220a:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
		Serial.print(TempFiltSlow[3]);
    220e:	ee 96       	adiw	r28, 0x3e	; 62
    2210:	48 81       	ld	r20, Y
    2212:	59 81       	ldd	r21, Y+1	; 0x01
    2214:	6a 81       	ldd	r22, Y+2	; 0x02
    2216:	7b 81       	ldd	r23, Y+3	; 0x03
    2218:	ee 97       	sbiw	r28, 0x3e	; 62
    221a:	82 e4       	ldi	r24, 0x42	; 66
    221c:	93 e0       	ldi	r25, 0x03	; 3
    221e:	22 e0       	ldi	r18, 0x02	; 2
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    2226:	82 e4       	ldi	r24, 0x42	; 66
    2228:	93 e0       	ldi	r25, 0x03	; 3
    222a:	6c e2       	ldi	r22, 0x2C	; 44
    222c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
	}
	if((_timer % 60000) == 0){
    2230:	8e 01       	movw	r16, r28
    2232:	08 5b       	subi	r16, 0xB8	; 184
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	f8 01       	movw	r30, r16
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e6       	ldi	r18, 0x60	; 96
    2242:	3a ee       	ldi	r19, 0xEA	; 234
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    224c:	61 15       	cp	r22, r1
    224e:	71 05       	cpc	r23, r1
    2250:	81 05       	cpc	r24, r1
    2252:	91 05       	cpc	r25, r1
    2254:	41 f4       	brne	.+16     	; 0x2266 <_ZN18BeerTempController11UpdateTimerEv+0x104>
//		Serial.println("Updating Beer Slope");
		updateSlope();
    2256:	ce 01       	movw	r24, r28
    2258:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN18BeerTempController11updateSlopeEv>
		_timer = 0;
    225c:	f8 01       	movw	r30, r16
    225e:	10 82       	st	Z, r1
    2260:	11 82       	std	Z+1, r1	; 0x01
    2262:	12 82       	std	Z+2, r1	; 0x02
    2264:	13 82       	std	Z+3, r1	; 0x03
	}
//	Serial.print("Beer After ");
//	Serial.println(_timer);
}
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	08 95       	ret

00002270 <_ZN18BeerTempControllerD0Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

BeerTempController::~BeerTempController() {
    2270:	fc 01       	movw	r30, r24
    2272:	80 e1       	ldi	r24, 0x10	; 16
    2274:	92 e0       	ldi	r25, 0x02	; 2
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    227a:	cf 01       	movw	r24, r30
    227c:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZdlPv>
    2280:	08 95       	ret

00002282 <_ZN18BeerTempControllerC1EPKch>:
 */

#include "BeerTempController.h"
#include "TCLExample.h"

BeerTempController::BeerTempController(const char* initName, uint8_t initIndex)
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	ec 01       	movw	r28, r24
    228c:	80 e1       	ldi	r24, 0x10	; 16
    228e:	92 e0       	ldi	r25, 0x02	; 2
    2290:	99 83       	std	Y+1, r25	; 0x01
    2292:	88 83       	st	Y, r24
{
	_timer = 0;
    2294:	c8 5b       	subi	r28, 0xB8	; 184
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	18 82       	st	Y, r1
    229a:	19 82       	std	Y+1, r1	; 0x01
    229c:	1a 82       	std	Y+2, r1	; 0x02
    229e:	1b 82       	std	Y+3, r1	; 0x03
    22a0:	c8 54       	subi	r28, 0x48	; 72
    22a2:	d0 40       	sbci	r29, 0x00	; 0
	_Temp = new TempSensors("Beer",1);
    22a4:	86 e2       	ldi	r24, 0x26	; 38
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    22ac:	18 2f       	mov	r17, r24
    22ae:	09 2f       	mov	r16, r25
    22b0:	66 e0       	ldi	r22, 0x06	; 6
    22b2:	71 e0       	ldi	r23, 0x01	; 1
    22b4:	41 e0       	ldi	r20, 0x01	; 1
    22b6:	0e 94 1e 23 	call	0x463c	; 0x463c <_ZN11TempSensorsC1EPKch>
    22ba:	fe 01       	movw	r30, r28
    22bc:	ea 5b       	subi	r30, 0xBA	; 186
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	10 83       	st	Z, r17
    22c2:	01 83       	std	Z+1, r16	; 0x01

	_Temp->_lastTempRequest = 0;
    22c4:	10 92 b9 02 	sts	0x02B9, r1
    22c8:	10 92 b8 02 	sts	0x02B8, r1

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
    22cc:	cf 5a       	subi	r28, 0xAF	; 175
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	aa e7       	ldi	r26, 0x7A	; 122
    22d6:	b3 e4       	ldi	r27, 0x43	; 67
    22d8:	88 83       	st	Y, r24
    22da:	99 83       	std	Y+1, r25	; 0x01
    22dc:	aa 83       	std	Y+2, r26	; 0x02
    22de:	bb 83       	std	Y+3, r27	; 0x03
    22e0:	c1 55       	subi	r28, 0x51	; 81
    22e2:	d0 40       	sbci	r29, 0x00	; 0
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	0e 94 03 23 	call	0x4606	; 0x4606 <_ZN11TempSensors14GetTemperatureEv>
    22ec:	fe 01       	movw	r30, r28
    22ee:	e3 5b       	subi	r30, 0xB3	; 179
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	60 83       	st	Z, r22
    22f4:	71 83       	std	Z+1, r23	; 0x01
    22f6:	82 83       	std	Z+2, r24	; 0x02
    22f8:	93 83       	std	Z+3, r25	; 0x03
    22fa:	9e 01       	movw	r18, r28
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
    22fc:	bf 01       	movw	r22, r30
	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    22fe:	ae 01       	movw	r20, r28
    2300:	40 5f       	subi	r20, 0xF0	; 240
    2302:	5f 4f       	sbci	r21, 0xFF	; 255
		TempFast[i] = TemperatureActual;
    2304:	fb 01       	movw	r30, r22
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	a2 81       	ldd	r26, Z+2	; 0x02
    230c:	b3 81       	ldd	r27, Z+3	; 0x03
    230e:	f9 01       	movw	r30, r18
    2310:	82 83       	std	Z+2, r24	; 0x02
    2312:	93 83       	std	Z+3, r25	; 0x03
    2314:	a4 83       	std	Z+4, r26	; 0x04
    2316:	b5 83       	std	Z+5, r27	; 0x05
		TempFiltFast[i] = TemperatureActual;
    2318:	82 8b       	std	Z+18, r24	; 0x12
    231a:	93 8b       	std	Z+19, r25	; 0x13
    231c:	a4 8b       	std	Z+20, r26	; 0x14
    231e:	b5 8b       	std	Z+21, r27	; 0x15
    2320:	2c 5f       	subi	r18, 0xFC	; 252
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
//	Serial.println("BeerTempController");
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    2324:	24 17       	cp	r18, r20
    2326:	35 07       	cpc	r19, r21
    2328:	69 f7       	brne	.-38     	; 0x2304 <_ZN18BeerTempControllerC1EPKch+0x82>
    232a:	fe 01       	movw	r30, r28
    232c:	b2 96       	adiw	r30, 0x22	; 34
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    232e:	9e 01       	movw	r18, r28
    2330:	2e 5c       	subi	r18, 0xCE	; 206
    2332:	3f 4f       	sbci	r19, 0xFF	; 255
		TempSlow[i] = TempFiltFast[3];
    2334:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2336:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2338:	a8 a1       	ldd	r26, Y+32	; 0x20
    233a:	b9 a1       	ldd	r27, Y+33	; 0x21
    233c:	80 83       	st	Z, r24
    233e:	91 83       	std	Z+1, r25	; 0x01
    2340:	a2 83       	std	Z+2, r26	; 0x02
    2342:	b3 83       	std	Z+3, r27	; 0x03
		TempFiltSlow[i] = TempFiltFast[3];
    2344:	80 8b       	std	Z+16, r24	; 0x10
    2346:	91 8b       	std	Z+17, r25	; 0x11
    2348:	a2 8b       	std	Z+18, r26	; 0x12
    234a:	b3 8b       	std	Z+19, r27	; 0x13
    234c:	34 96       	adiw	r30, 0x04	; 4
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    234e:	e2 17       	cp	r30, r18
    2350:	f3 07       	cpc	r31, r19
    2352:	81 f7       	brne	.-32     	; 0x2334 <_ZN18BeerTempControllerC1EPKch+0xb2>
		TempSlow[i] = TempFiltFast[3];
		TempFiltSlow[i] = TempFiltFast[3];
	}
//		updateSlowFilteredTemperatures();

	Slope = 0;
    2354:	ce 5b       	subi	r28, 0xBE	; 190
    2356:	df 4f       	sbci	r29, 0xFF	; 255
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e0       	ldi	r26, 0x00	; 0
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	88 83       	st	Y, r24
    2362:	99 83       	std	Y+1, r25	; 0x01
    2364:	aa 83       	std	Y+2, r26	; 0x02
    2366:	bb 83       	std	Y+3, r27	; 0x03
    2368:	c2 54       	subi	r28, 0x42	; 66
    236a:	d0 40       	sbci	r29, 0x00	; 0
	TempHistoryIndex = 0;
    236c:	fe 01       	movw	r30, r28
    236e:	e3 53       	subi	r30, 0x33	; 51
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	10 82       	st	Z, r1
    2374:	9e 01       	movw	r18, r28
    2376:	2b 5a       	subi	r18, 0xAB	; 171
    2378:	3f 4f       	sbci	r19, 0xFF	; 255

	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
    237a:	ee 96       	adiw	r28, 0x3e	; 62
//		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    237c:	af 01       	movw	r20, r30
		TempHistory[i] = TempFiltSlow[3];
    237e:	88 81       	ld	r24, Y
    2380:	99 81       	ldd	r25, Y+1	; 0x01
    2382:	aa 81       	ldd	r26, Y+2	; 0x02
    2384:	bb 81       	ldd	r27, Y+3	; 0x03
    2386:	f9 01       	movw	r30, r18
    2388:	81 93       	st	Z+, r24
    238a:	91 93       	st	Z+, r25
    238c:	a1 93       	st	Z+, r26
    238e:	b1 93       	st	Z+, r27
    2390:	9f 01       	movw	r18, r30
//		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    2392:	e4 17       	cp	r30, r20
    2394:	f5 07       	cpc	r31, r21
    2396:	99 f7       	brne	.-26     	; 0x237e <_ZN18BeerTempControllerC1EPKch+0xfc>
		TempHistory[i] = TempFiltSlow[3];
	}
}
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <_ZN6ButtonD1Ev>:
    23a2:	08 95       	ret

000023a4 <_ZN6Button9IsPressedEv>:

bool Button::IsPressed(){
    23a4:	cf 93       	push	r28
    23a6:	df 93       	push	r29
    23a8:	ec 01       	movw	r28, r24
	int pinread;		// MUST BE int to do AnalogRead
	if((pinread = analogRead(_pin)) > 900){
    23aa:	8d 81       	ldd	r24, Y+5	; 0x05
    23ac:	0e 94 8a 28 	call	0x5114	; 0x5114 <analogRead>
    23b0:	2c 81       	ldd	r18, Y+4	; 0x04
    23b2:	85 58       	subi	r24, 0x85	; 133
    23b4:	93 40       	sbci	r25, 0x03	; 3
    23b6:	e4 f0       	brlt	.+56     	; 0x23f0 <_ZN6Button9IsPressedEv+0x4c>
	  if(_lastState == 0){        // is this the first time it was pressed?
    23b8:	22 23       	and	r18, r18
    23ba:	19 f4       	brne	.+6      	; 0x23c2 <_ZN6Button9IsPressedEv+0x1e>
		  _lastState++;              // show the button is already pressed
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	8c 83       	std	Y+4, r24	; 0x04
    23c0:	1e c0       	rjmp	.+60     	; 0x23fe <_ZN6Button9IsPressedEv+0x5a>
	  }
	  else if ((_lastState) && ((millis() - _lastMillis) > BUTTON_BOUNCE)){
    23c2:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    23c6:	28 81       	ld	r18, Y
    23c8:	39 81       	ldd	r19, Y+1	; 0x01
    23ca:	4a 81       	ldd	r20, Y+2	; 0x02
    23cc:	5b 81       	ldd	r21, Y+3	; 0x03
    23ce:	62 1b       	sub	r22, r18
    23d0:	73 0b       	sbc	r23, r19
    23d2:	84 0b       	sbc	r24, r20
    23d4:	95 0b       	sbc	r25, r21
    23d6:	6b 3f       	cpi	r22, 0xFB	; 251
    23d8:	71 05       	cpc	r23, r1
    23da:	81 05       	cpc	r24, r1
    23dc:	91 05       	cpc	r25, r1
    23de:	78 f0       	brcs	.+30     	; 0x23fe <_ZN6Button9IsPressedEv+0x5a>
          _lastMillis = millis();      //   capture the millis for the next go around
    23e0:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    23e4:	68 83       	st	Y, r22
    23e6:	79 83       	std	Y+1, r23	; 0x01
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	9b 83       	std	Y+3, r25	; 0x03
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	08 c0       	rjmp	.+16     	; 0x2400 <_ZN6Button9IsPressedEv+0x5c>
		  return true;
	  }
	}
	else if (_lastState){
    23f0:	22 23       	and	r18, r18
    23f2:	29 f0       	breq	.+10     	; 0x23fe <_ZN6Button9IsPressedEv+0x5a>
		_lastState = 0;              // otherwise the button was just released
    23f4:	1c 82       	std	Y+4, r1	; 0x04
		_lastMillis = 0;
    23f6:	18 82       	st	Y, r1
    23f8:	19 82       	std	Y+1, r1	; 0x01
    23fa:	1a 82       	std	Y+2, r1	; 0x02
    23fc:	1b 82       	std	Y+3, r1	; 0x03
    23fe:	80 e0       	ldi	r24, 0x00	; 0
	}
	return false;
}
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	08 95       	ret

00002406 <_ZN6ButtonC1Eh>:
 *      Author: sfeltner
 */

#include "Button.h"

Button::Button(uint8_t pin) {
    2406:	fc 01       	movw	r30, r24
    2408:	86 2f       	mov	r24, r22
	_lastMillis = 0;
    240a:	10 82       	st	Z, r1
    240c:	11 82       	std	Z+1, r1	; 0x01
    240e:	12 82       	std	Z+2, r1	; 0x02
    2410:	13 82       	std	Z+3, r1	; 0x03
	_lastState = 0;
    2412:	14 82       	std	Z+4, r1	; 0x04
	_pin = pin;
    2414:	65 83       	std	Z+5, r22	; 0x05

	pinMode(_pin, INPUT);
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
}
    241c:	08 95       	ret

0000241e <_Z18processSyncMessagev>:
	if(digits < 10)
		lcd.print('0');
	lcd.print(digits);
}

void processSyncMessage() {
    241e:	8f 92       	push	r8
    2420:	9f 92       	push	r9
    2422:	af 92       	push	r10
    2424:	bf 92       	push	r11
    2426:	cf 92       	push	r12
    2428:	df 92       	push	r13
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	c0 55       	subi	r28, 0x50	; 80
    243c:	d0 40       	sbci	r29, 0x00	; 0
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	a5 c0       	rjmp	.+330    	; 0x2594 <_Z18processSyncMessagev+0x176>
	// if time sync available from serial port, update time and return true
	// time message consists of a header and ten ascii digits
	while(Serial.available() >=  TIME_MSG_LEN ){
		char c = Serial.read() ;
    244a:	82 e4       	ldi	r24, 0x42	; 66
    244c:	93 e0       	ldi	r25, 0x03	; 3
    244e:	0e 94 af 24 	call	0x495e	; 0x495e <_ZN14HardwareSerial4readEv>
    2452:	18 2f       	mov	r17, r24
		Serial.println(c);
    2454:	82 e4       	ldi	r24, 0x42	; 66
    2456:	93 e0       	ldi	r25, 0x03	; 3
    2458:	61 2f       	mov	r22, r17
    245a:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <_ZN5Print7printlnEc>
		if( c == TIME_HEADER ) {    // C<unsigned long epoch>
    245e:	14 35       	cpi	r17, 0x54	; 84
    2460:	91 f5       	brne	.+100    	; 0x24c6 <_Z18processSyncMessagev+0xa8>
    2462:	ee 24       	eor	r14, r14
    2464:	ff 24       	eor	r15, r15
    2466:	87 01       	movw	r16, r14
    2468:	aa 24       	eor	r10, r10
    246a:	bb 24       	eor	r11, r11
			time_t pctime = 0;
			for(int i=0; i < TIME_MSG_LEN -1; i++){
				c = Serial.read();
    246c:	82 e4       	ldi	r24, 0x42	; 66
    246e:	93 e0       	ldi	r25, 0x03	; 3
    2470:	0e 94 af 24 	call	0x495e	; 0x495e <_ZN14HardwareSerial4readEv>
				if( isDigit(c)) {
    2474:	c8 2e       	mov	r12, r24
    2476:	dd 24       	eor	r13, r13
    2478:	c7 fc       	sbrc	r12, 7
    247a:	d0 94       	com	r13
    247c:	80 ed       	ldi	r24, 0xD0	; 208
    247e:	9f ef       	ldi	r25, 0xFF	; 255
    2480:	c8 0e       	add	r12, r24
    2482:	d9 1e       	adc	r13, r25
    2484:	9a e0       	ldi	r25, 0x0A	; 10
    2486:	c9 16       	cp	r12, r25
    2488:	d1 04       	cpc	r13, r1
    248a:	88 f4       	brcc	.+34     	; 0x24ae <_Z18processSyncMessagev+0x90>
					pctime = (10 * pctime) + (c - '0') ; // convert digits to a number
    248c:	c8 01       	movw	r24, r16
    248e:	b7 01       	movw	r22, r14
    2490:	2a e0       	ldi	r18, 0x0A	; 10
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	0e 94 ad 2b 	call	0x575a	; 0x575a <__mulsi3>
    249c:	76 01       	movw	r14, r12
    249e:	00 27       	eor	r16, r16
    24a0:	f7 fc       	sbrc	r15, 7
    24a2:	00 95       	com	r16
    24a4:	10 2f       	mov	r17, r16
    24a6:	e6 0e       	add	r14, r22
    24a8:	f7 1e       	adc	r15, r23
    24aa:	08 1f       	adc	r16, r24
    24ac:	19 1f       	adc	r17, r25
	while(Serial.available() >=  TIME_MSG_LEN ){
		char c = Serial.read() ;
		Serial.println(c);
		if( c == TIME_HEADER ) {    // C<unsigned long epoch>
			time_t pctime = 0;
			for(int i=0; i < TIME_MSG_LEN -1; i++){
    24ae:	08 94       	sec
    24b0:	a1 1c       	adc	r10, r1
    24b2:	b1 1c       	adc	r11, r1
    24b4:	8a e0       	ldi	r24, 0x0A	; 10
    24b6:	a8 16       	cp	r10, r24
    24b8:	b1 04       	cpc	r11, r1
    24ba:	c1 f6       	brne	.-80     	; 0x246c <_Z18processSyncMessagev+0x4e>
				c = Serial.read();
				if( isDigit(c)) {
					pctime = (10 * pctime) + (c - '0') ; // convert digits to a number
				}
			}
			setTime(pctime);   // Sync clock to the time received on serial port
    24bc:	c8 01       	movw	r24, r16
    24be:	b7 01       	movw	r22, r14
    24c0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_Z7setTimem>
    24c4:	67 c0       	rjmp	.+206    	; 0x2594 <_Z18processSyncMessagev+0x176>
		}
		else if(c == PROFILE_HEADER){  // P<unsigned long epoch1>,<float targetTemp1>;<unsigned long epoch2>,<float targetTemp2>;...
    24c6:	10 35       	cpi	r17, 0x50	; 80
    24c8:	09 f0       	breq	.+2      	; 0x24cc <_Z18processSyncMessagev+0xae>
    24ca:	64 c0       	rjmp	.+200    	; 0x2594 <_Z18processSyncMessagev+0x176>
    24cc:	5b c0       	rjmp	.+182    	; 0x2584 <_Z18processSyncMessagev+0x166>
				time_t profStartTime = 0;
				float  profTargetTemp = 0;
				char buffer[BUFFER_LEN];
				uint8_t idx = 0;
				while (c != ','){
					c = Serial.read();
    24ce:	82 e4       	ldi	r24, 0x42	; 66
    24d0:	93 e0       	ldi	r25, 0x03	; 3
    24d2:	0e 94 af 24 	call	0x495e	; 0x495e <_ZN14HardwareSerial4readEv>
    24d6:	f8 2e       	mov	r15, r24
					if( isDigit(c)) {
    24d8:	08 2f       	mov	r16, r24
    24da:	11 27       	eor	r17, r17
    24dc:	07 fd       	sbrc	r16, 7
    24de:	10 95       	com	r17
    24e0:	00 53       	subi	r16, 0x30	; 48
    24e2:	10 40       	sbci	r17, 0x00	; 0
    24e4:	0a 30       	cpi	r16, 0x0A	; 10
    24e6:	11 05       	cpc	r17, r1
    24e8:	88 f4       	brcc	.+34     	; 0x250c <_Z18processSyncMessagev+0xee>
						profStartTime = (10 * profStartTime) + (c - '0') ; // convert digits to a number
    24ea:	c6 01       	movw	r24, r12
    24ec:	b5 01       	movw	r22, r10
    24ee:	2a e0       	ldi	r18, 0x0A	; 10
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	0e 94 ad 2b 	call	0x575a	; 0x575a <__mulsi3>
    24fa:	58 01       	movw	r10, r16
    24fc:	cc 24       	eor	r12, r12
    24fe:	b7 fc       	sbrc	r11, 7
    2500:	c0 94       	com	r12
    2502:	dc 2c       	mov	r13, r12
    2504:	a6 0e       	add	r10, r22
    2506:	b7 1e       	adc	r11, r23
    2508:	c8 1e       	adc	r12, r24
    250a:	d9 1e       	adc	r13, r25
			while (c!= '\n'){
				time_t profStartTime = 0;
				float  profTargetTemp = 0;
				char buffer[BUFFER_LEN];
				uint8_t idx = 0;
				while (c != ','){
    250c:	9c e2       	ldi	r25, 0x2C	; 44
    250e:	f9 16       	cp	r15, r25
    2510:	f1 f6       	brne	.-68     	; 0x24ce <_Z18processSyncMessagev+0xb0>
    2512:	10 e0       	ldi	r17, 0x00	; 0
					if( isDigit(c)) {
						profStartTime = (10 * profStartTime) + (c - '0') ; // convert digits to a number
					}
				}
				while(c != ';'){
					c = Serial.read();
    2514:	82 e4       	ldi	r24, 0x42	; 66
    2516:	93 e0       	ldi	r25, 0x03	; 3
    2518:	0e 94 af 24 	call	0x495e	; 0x495e <_ZN14HardwareSerial4readEv>
    251c:	28 2f       	mov	r18, r24
					if ((isDigit(c) || c == '.') && (idx < BUFFER_LEN)){
    251e:	99 27       	eor	r25, r25
    2520:	87 fd       	sbrc	r24, 7
    2522:	90 95       	com	r25
    2524:	c0 97       	sbiw	r24, 0x30	; 48
    2526:	0a 97       	sbiw	r24, 0x0a	; 10
    2528:	10 f0       	brcs	.+4      	; 0x252e <_Z18processSyncMessagev+0x110>
    252a:	2e 32       	cpi	r18, 0x2E	; 46
    252c:	39 f4       	brne	.+14     	; 0x253c <_Z18processSyncMessagev+0x11e>
    252e:	10 35       	cpi	r17, 0x50	; 80
    2530:	28 f4       	brcc	.+10     	; 0x253c <_Z18processSyncMessagev+0x11e>
						buffer[idx++] = c;
    2532:	f4 01       	movw	r30, r8
    2534:	e1 0f       	add	r30, r17
    2536:	f1 1d       	adc	r31, r1
    2538:	20 83       	st	Z, r18
    253a:	1f 5f       	subi	r17, 0xFF	; 255
					c = Serial.read();
					if( isDigit(c)) {
						profStartTime = (10 * profStartTime) + (c - '0') ; // convert digits to a number
					}
				}
				while(c != ';'){
    253c:	2b 33       	cpi	r18, 0x3B	; 59
    253e:	51 f7       	brne	.-44     	; 0x2514 <_Z18processSyncMessagev+0xf6>
					c = Serial.read();
					if ((isDigit(c) || c == '.') && (idx < BUFFER_LEN)){
						buffer[idx++] = c;
					}
				}
				profTargetTemp = atof(buffer);
    2540:	c4 01       	movw	r24, r8
    2542:	0e 94 2f 02 	call	0x45e	; 0x45e <atof>
    2546:	7b 01       	movw	r14, r22
    2548:	8c 01       	movw	r16, r24

				Serial.print("Parsed Profile Point:");
    254a:	82 e4       	ldi	r24, 0x42	; 66
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	6b e0       	ldi	r22, 0x0B	; 11
    2550:	71 e0       	ldi	r23, 0x01	; 1
    2552:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
				Serial.print(profStartTime);
    2556:	82 e4       	ldi	r24, 0x42	; 66
    2558:	93 e0       	ldi	r25, 0x03	; 3
    255a:	b6 01       	movw	r22, r12
    255c:	a5 01       	movw	r20, r10
    255e:	2a e0       	ldi	r18, 0x0A	; 10
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	0e 94 55 26 	call	0x4caa	; 0x4caa <_ZN5Print5printEmi>
				Serial.print(" ");
    2566:	82 e4       	ldi	r24, 0x42	; 66
    2568:	93 e0       	ldi	r25, 0x03	; 3
    256a:	61 e2       	ldi	r22, 0x21	; 33
    256c:	71 e0       	ldi	r23, 0x01	; 1
    256e:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
				Serial.println(profTargetTemp);
    2572:	82 e4       	ldi	r24, 0x42	; 66
    2574:	93 e0       	ldi	r25, 0x03	; 3
    2576:	b8 01       	movw	r22, r16
    2578:	a7 01       	movw	r20, r14
    257a:	22 e0       	ldi	r18, 0x02	; 2
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <_ZN5Print7printlnEdi>
    2582:	04 c0       	rjmp	.+8      	; 0x258c <_Z18processSyncMessagev+0x16e>
					}
				}
				while(c != ';'){
					c = Serial.read();
					if ((isDigit(c) || c == '.') && (idx < BUFFER_LEN)){
						buffer[idx++] = c;
    2584:	4e 01       	movw	r8, r28
    2586:	08 94       	sec
    2588:	81 1c       	adc	r8, r1
    258a:	91 1c       	adc	r9, r1
				profTargetTemp = atof(buffer);

				Serial.print("Parsed Profile Point:");
				Serial.print(profStartTime);
				Serial.print(" ");
				Serial.println(profTargetTemp);
    258c:	aa 24       	eor	r10, r10
    258e:	bb 24       	eor	r11, r11
    2590:	65 01       	movw	r12, r10
    2592:	9d cf       	rjmp	.-198    	; 0x24ce <_Z18processSyncMessagev+0xb0>
}

void processSyncMessage() {
	// if time sync available from serial port, update time and return true
	// time message consists of a header and ten ascii digits
	while(Serial.available() >=  TIME_MSG_LEN ){
    2594:	82 e4       	ldi	r24, 0x42	; 66
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_ZN14HardwareSerial9availableEv>
    259c:	0b 97       	sbiw	r24, 0x0b	; 11
    259e:	0c f0       	brlt	.+2      	; 0x25a2 <_Z18processSyncMessagev+0x184>
    25a0:	54 cf       	rjmp	.-344    	; 0x244a <_Z18processSyncMessagev+0x2c>
				Serial.print(" ");
				Serial.println(profTargetTemp);
			}
		}
	}
}
    25a2:	c0 5b       	subi	r28, 0xB0	; 176
    25a4:	df 4f       	sbci	r29, 0xFF	; 255
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	df 90       	pop	r13
    25be:	cf 90       	pop	r12
    25c0:	bf 90       	pop	r11
    25c2:	af 90       	pop	r10
    25c4:	9f 90       	pop	r9
    25c6:	8f 90       	pop	r8
    25c8:	08 95       	ret

000025ca <_ZN7DisplayD1Ev>:
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
	_modeChange = true;
	_stateChange = true;
}

Display::~Display() {
    25ca:	fc 01       	movw	r30, r24
    25cc:	88 e1       	ldi	r24, 0x18	; 24
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    25d4:	08 95       	ret

000025d6 <_ZN7Display8SetStateEPKc>:
	_mode = (char*)malloc(newModeLen+1);
	strcpy(_mode,Mode);
	_modeChange = true;
}

void Display::SetState(const char* State)
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	7c 01       	movw	r14, r24
    25e4:	8b 01       	movw	r16, r22
{
//	Serial.print("THIS IS THE STATE");
//	Serial.println(State);
	//check if my mode is null
	if(State==NULL)
    25e6:	61 15       	cp	r22, r1
    25e8:	71 05       	cpc	r23, r1
    25ea:	49 f1       	breq	.+82     	; 0x263e <_ZN7Display8SetStateEPKc+0x68>
		return;

	//check for first run
	if(_state==NULL){
    25ec:	fc 01       	movw	r30, r24
    25ee:	c4 a1       	ldd	r28, Z+36	; 0x24
    25f0:	d5 a1       	ldd	r29, Z+37	; 0x25
    25f2:	20 97       	sbiw	r28, 0x00	; 0
    25f4:	49 f4       	brne	.+18     	; 0x2608 <_ZN7Display8SetStateEPKc+0x32>
		int len = strlen(State);
    25f6:	fb 01       	movw	r30, r22
    25f8:	01 90       	ld	r0, Z+
    25fa:	00 20       	and	r0, r0
    25fc:	e9 f7       	brne	.-6      	; 0x25f8 <_ZN7Display8SetStateEPKc+0x22>
    25fe:	31 97       	sbiw	r30, 0x01	; 1
		_state = (char*)malloc(len);
    2600:	cf 01       	movw	r24, r30
    2602:	86 1b       	sub	r24, r22
    2604:	97 0b       	sbc	r25, r23
    2606:	10 c0       	rjmp	.+32     	; 0x2628 <_ZN7Display8SetStateEPKc+0x52>
		_stateChange = true;
		return;
	}

	//Check for same mode
	if(strcmp(State,_state)==0){
    2608:	cb 01       	movw	r24, r22
    260a:	be 01       	movw	r22, r28
    260c:	0e 94 33 02 	call	0x466	; 0x466 <strcmp>
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	a9 f0       	breq	.+42     	; 0x263e <_ZN7Display8SetStateEPKc+0x68>
		return;
	}

	free(_state);
    2614:	ce 01       	movw	r24, r28
    2616:	0e 94 d7 01 	call	0x3ae	; 0x3ae <free>
	int newModeLen = strlen(State);
    261a:	d8 01       	movw	r26, r16
    261c:	0d 90       	ld	r0, X+
    261e:	00 20       	and	r0, r0
    2620:	e9 f7       	brne	.-6      	; 0x261c <_ZN7Display8SetStateEPKc+0x46>
	_state = (char*)malloc(newModeLen+1);
    2622:	cd 01       	movw	r24, r26
    2624:	80 1b       	sub	r24, r16
    2626:	91 0b       	sbc	r25, r17
    2628:	0e 94 2d 01 	call	0x25a	; 0x25a <malloc>
    262c:	f7 01       	movw	r30, r14
    262e:	84 a3       	std	Z+36, r24	; 0x24
    2630:	95 a3       	std	Z+37, r25	; 0x25
	strcpy(_state,State);
    2632:	b8 01       	movw	r22, r16
    2634:	0e 94 3c 02 	call	0x478	; 0x478 <strcpy>
	_stateChange = true;
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	f7 01       	movw	r30, r14
    263c:	87 a3       	std	Z+39, r24	; 0x27
	//Serial.print("New State ");
	//Serial.println(_stateChange);
}
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	1f 91       	pop	r17
    2644:	0f 91       	pop	r16
    2646:	ff 90       	pop	r15
    2648:	ef 90       	pop	r14
    264a:	08 95       	ret

0000264c <_ZN7Display7SetModeEPKc>:
			_lcd->print(minute());
			_lcd->print(":");
			_lcd->print(second());
	}
}
void Display::SetMode(const char* Mode)
    264c:	ef 92       	push	r14
    264e:	ff 92       	push	r15
    2650:	0f 93       	push	r16
    2652:	1f 93       	push	r17
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	7c 01       	movw	r14, r24
    265a:	8b 01       	movw	r16, r22
{
	//check if my mode is null
	if(Mode==NULL)
    265c:	61 15       	cp	r22, r1
    265e:	71 05       	cpc	r23, r1
    2660:	89 f1       	breq	.+98     	; 0x26c4 <_ZN7Display7SetModeEPKc+0x78>
		return;

	//check for first run
	if(_mode==NULL){
    2662:	fc 01       	movw	r30, r24
    2664:	c2 a1       	ldd	r28, Z+34	; 0x22
    2666:	d3 a1       	ldd	r29, Z+35	; 0x23
    2668:	20 97       	sbiw	r28, 0x00	; 0
    266a:	89 f4       	brne	.+34     	; 0x268e <_ZN7Display7SetModeEPKc+0x42>
		int len = strlen(Mode);
    266c:	fb 01       	movw	r30, r22
    266e:	01 90       	ld	r0, Z+
    2670:	00 20       	and	r0, r0
    2672:	e9 f7       	brne	.-6      	; 0x266e <_ZN7Display7SetModeEPKc+0x22>
    2674:	31 97       	sbiw	r30, 0x01	; 1
		_mode = (char*)malloc(len);
    2676:	cf 01       	movw	r24, r30
    2678:	86 1b       	sub	r24, r22
    267a:	97 0b       	sbc	r25, r23
    267c:	0e 94 2d 01 	call	0x25a	; 0x25a <malloc>
    2680:	f7 01       	movw	r30, r14
    2682:	82 a3       	std	Z+34, r24	; 0x22
    2684:	93 a3       	std	Z+35, r25	; 0x23
		strcpy(_mode,Mode);
    2686:	b8 01       	movw	r22, r16
    2688:	0e 94 3c 02 	call	0x478	; 0x478 <strcpy>
    268c:	1b c0       	rjmp	.+54     	; 0x26c4 <_ZN7Display7SetModeEPKc+0x78>
		return;
	}

	//Check for same mode
	if(strcmp(Mode,_mode)==0){
    268e:	cb 01       	movw	r24, r22
    2690:	be 01       	movw	r22, r28
    2692:	0e 94 33 02 	call	0x466	; 0x466 <strcmp>
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	a9 f0       	breq	.+42     	; 0x26c4 <_ZN7Display7SetModeEPKc+0x78>
		return;
	}

	free(_mode);
    269a:	ce 01       	movw	r24, r28
    269c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <free>
	int newModeLen = strlen(Mode);
    26a0:	d8 01       	movw	r26, r16
    26a2:	0d 90       	ld	r0, X+
    26a4:	00 20       	and	r0, r0
    26a6:	e9 f7       	brne	.-6      	; 0x26a2 <_ZN7Display7SetModeEPKc+0x56>
	_mode = (char*)malloc(newModeLen+1);
    26a8:	cd 01       	movw	r24, r26
    26aa:	80 1b       	sub	r24, r16
    26ac:	91 0b       	sbc	r25, r17
    26ae:	0e 94 2d 01 	call	0x25a	; 0x25a <malloc>
    26b2:	f7 01       	movw	r30, r14
    26b4:	82 a3       	std	Z+34, r24	; 0x22
    26b6:	93 a3       	std	Z+35, r25	; 0x23
	strcpy(_mode,Mode);
    26b8:	b8 01       	movw	r22, r16
    26ba:	0e 94 3c 02 	call	0x478	; 0x478 <strcpy>
	_modeChange = true;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	f7 01       	movw	r30, r14
    26c2:	86 a3       	std	Z+38, r24	; 0x26
}
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	08 95       	ret

000026d2 <_ZN7Display4DrawEv>:

Display::~Display() {
	// TODO Auto-generated destructor stub
}

void Display::Draw(void)
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	ec 01       	movw	r28, r24
{
	if(TargetTemp!=_preTargetTemp)
    26dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    26de:	7f 85       	ldd	r23, Y+15	; 0x0f
    26e0:	88 89       	ldd	r24, Y+16	; 0x10
    26e2:	99 89       	ldd	r25, Y+17	; 0x11
    26e4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    26e6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    26e8:	48 a1       	ldd	r20, Y+32	; 0x20
    26ea:	59 a1       	ldd	r21, Y+33	; 0x21
    26ec:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	f1 f0       	breq	.+60     	; 0x2730 <_ZN7Display4DrawEv+0x5e>
	{
		_lcd->setCursor(0,1);
    26f4:	88 a5       	ldd	r24, Y+40	; 0x28
    26f6:	99 a5       	ldd	r25, Y+41	; 0x29
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Targ ");
    2700:	88 a5       	ldd	r24, Y+40	; 0x28
    2702:	99 a5       	ldd	r25, Y+41	; 0x29
    2704:	65 e2       	ldi	r22, 0x25	; 37
    2706:	71 e0       	ldi	r23, 0x01	; 1
    2708:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		_lcd->print(TargetTemp);
    270c:	4e 85       	ldd	r20, Y+14	; 0x0e
    270e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2710:	68 89       	ldd	r22, Y+16	; 0x10
    2712:	79 89       	ldd	r23, Y+17	; 0x11
    2714:	88 a5       	ldd	r24, Y+40	; 0x28
    2716:	99 a5       	ldd	r25, Y+41	; 0x29
    2718:	22 e0       	ldi	r18, 0x02	; 2
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		_preTargetTemp = TargetTemp;
    2720:	8e 85       	ldd	r24, Y+14	; 0x0e
    2722:	9f 85       	ldd	r25, Y+15	; 0x0f
    2724:	a8 89       	ldd	r26, Y+16	; 0x10
    2726:	b9 89       	ldd	r27, Y+17	; 0x11
    2728:	8e 8f       	std	Y+30, r24	; 0x1e
    272a:	9f 8f       	std	Y+31, r25	; 0x1f
    272c:	a8 a3       	std	Y+32, r26	; 0x20
    272e:	b9 a3       	std	Y+33, r27	; 0x21
	}


	if(AtmosphereTemp!=_preAtmosphereTemp){
    2730:	6a 81       	ldd	r22, Y+2	; 0x02
    2732:	7b 81       	ldd	r23, Y+3	; 0x03
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	9d 81       	ldd	r25, Y+5	; 0x05
    2738:	2a 89       	ldd	r18, Y+18	; 0x12
    273a:	3b 89       	ldd	r19, Y+19	; 0x13
    273c:	4c 89       	ldd	r20, Y+20	; 0x14
    273e:	5d 89       	ldd	r21, Y+21	; 0x15
    2740:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    2744:	88 23       	and	r24, r24
    2746:	f1 f0       	breq	.+60     	; 0x2784 <_ZN7Display4DrawEv+0xb2>
		//Draw and save atmosphere
		_lcd->setCursor(0,2);
    2748:	88 a5       	ldd	r24, Y+40	; 0x28
    274a:	99 a5       	ldd	r25, Y+41	; 0x29
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	42 e0       	ldi	r20, 0x02	; 2
    2750:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Atmo ");
    2754:	88 a5       	ldd	r24, Y+40	; 0x28
    2756:	99 a5       	ldd	r25, Y+41	; 0x29
    2758:	6b e2       	ldi	r22, 0x2B	; 43
    275a:	71 e0       	ldi	r23, 0x01	; 1
    275c:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		_lcd->print(AtmosphereTemp);
    2760:	4a 81       	ldd	r20, Y+2	; 0x02
    2762:	5b 81       	ldd	r21, Y+3	; 0x03
    2764:	6c 81       	ldd	r22, Y+4	; 0x04
    2766:	7d 81       	ldd	r23, Y+5	; 0x05
    2768:	88 a5       	ldd	r24, Y+40	; 0x28
    276a:	99 a5       	ldd	r25, Y+41	; 0x29
    276c:	22 e0       	ldi	r18, 0x02	; 2
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		_preAtmosphereTemp = AtmosphereTemp;
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	ac 81       	ldd	r26, Y+4	; 0x04
    277a:	bd 81       	ldd	r27, Y+5	; 0x05
    277c:	8a 8b       	std	Y+18, r24	; 0x12
    277e:	9b 8b       	std	Y+19, r25	; 0x13
    2780:	ac 8b       	std	Y+20, r26	; 0x14
    2782:	bd 8b       	std	Y+21, r27	; 0x15
	}

	if(LiquidTemp != _preLiquidTemp){
    2784:	6e 81       	ldd	r22, Y+6	; 0x06
    2786:	7f 81       	ldd	r23, Y+7	; 0x07
    2788:	88 85       	ldd	r24, Y+8	; 0x08
    278a:	99 85       	ldd	r25, Y+9	; 0x09
    278c:	2e 89       	ldd	r18, Y+22	; 0x16
    278e:	3f 89       	ldd	r19, Y+23	; 0x17
    2790:	48 8d       	ldd	r20, Y+24	; 0x18
    2792:	59 8d       	ldd	r21, Y+25	; 0x19
    2794:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    2798:	88 23       	and	r24, r24
    279a:	f1 f0       	breq	.+60     	; 0x27d8 <_ZN7Display4DrawEv+0x106>
		//Draw and save liquid temp
		_lcd->setCursor(0,3);
    279c:	88 a5       	ldd	r24, Y+40	; 0x28
    279e:	99 a5       	ldd	r25, Y+41	; 0x29
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	43 e0       	ldi	r20, 0x03	; 3
    27a4:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print("Beer ");
    27a8:	88 a5       	ldd	r24, Y+40	; 0x28
    27aa:	99 a5       	ldd	r25, Y+41	; 0x29
    27ac:	61 e3       	ldi	r22, 0x31	; 49
    27ae:	71 e0       	ldi	r23, 0x01	; 1
    27b0:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		_lcd->print(LiquidTemp);
    27b4:	4e 81       	ldd	r20, Y+6	; 0x06
    27b6:	5f 81       	ldd	r21, Y+7	; 0x07
    27b8:	68 85       	ldd	r22, Y+8	; 0x08
    27ba:	79 85       	ldd	r23, Y+9	; 0x09
    27bc:	88 a5       	ldd	r24, Y+40	; 0x28
    27be:	99 a5       	ldd	r25, Y+41	; 0x29
    27c0:	22 e0       	ldi	r18, 0x02	; 2
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		_preLiquidTemp = LiquidTemp;
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	9f 81       	ldd	r25, Y+7	; 0x07
    27cc:	a8 85       	ldd	r26, Y+8	; 0x08
    27ce:	b9 85       	ldd	r27, Y+9	; 0x09
    27d0:	8e 8b       	std	Y+22, r24	; 0x16
    27d2:	9f 8b       	std	Y+23, r25	; 0x17
    27d4:	a8 8f       	std	Y+24, r26	; 0x18
    27d6:	b9 8f       	std	Y+25, r27	; 0x19
	}

	if(_modeChange)	{
    27d8:	8e a1       	ldd	r24, Y+38	; 0x26
    27da:	88 23       	and	r24, r24
    27dc:	69 f0       	breq	.+26     	; 0x27f8 <_ZN7Display4DrawEv+0x126>
		_lcd->setCursor(12,2);
    27de:	88 a5       	ldd	r24, Y+40	; 0x28
    27e0:	99 a5       	ldd	r25, Y+41	; 0x29
    27e2:	6c e0       	ldi	r22, 0x0C	; 12
    27e4:	42 e0       	ldi	r20, 0x02	; 2
    27e6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print(_mode);
    27ea:	6a a1       	ldd	r22, Y+34	; 0x22
    27ec:	7b a1       	ldd	r23, Y+35	; 0x23
    27ee:	88 a5       	ldd	r24, Y+40	; 0x28
    27f0:	99 a5       	ldd	r25, Y+41	; 0x29
    27f2:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		_modeChange = false;
    27f6:	1e a2       	std	Y+38, r1	; 0x26
	}

//	Serial.println(_state);
//	Serial.println(" Needs to Change? ");
//	Serial.println(_stateChange);
	if(_stateChange)	{
    27f8:	8f a1       	ldd	r24, Y+39	; 0x27
    27fa:	88 23       	and	r24, r24
    27fc:	69 f0       	breq	.+26     	; 0x2818 <_ZN7Display4DrawEv+0x146>
		_lcd->setCursor(12,3);
    27fe:	88 a5       	ldd	r24, Y+40	; 0x28
    2800:	99 a5       	ldd	r25, Y+41	; 0x29
    2802:	6c e0       	ldi	r22, 0x0C	; 12
    2804:	43 e0       	ldi	r20, 0x03	; 3
    2806:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
		_lcd->print(_state);
    280a:	6c a1       	ldd	r22, Y+36	; 0x24
    280c:	7d a1       	ldd	r23, Y+37	; 0x25
    280e:	88 a5       	ldd	r24, Y+40	; 0x28
    2810:	99 a5       	ldd	r25, Y+41	; 0x29
    2812:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		_stateChange = false;
    2816:	1f a2       	std	Y+39, r1	; 0x27
	}

	//Draw time update
	if(timeStatus() != timeNotSet){  // here if the time has been set
    2818:	0e 94 f6 08 	call	0x11ec	; 0x11ec <_Z10timeStatusv>
    281c:	89 2b       	or	r24, r25
    281e:	81 f1       	breq	.+96     	; 0x2880 <_ZN7Display4DrawEv+0x1ae>
			_lcd->setCursor(12,1);
    2820:	88 a5       	ldd	r24, Y+40	; 0x28
    2822:	99 a5       	ldd	r25, Y+41	; 0x29
    2824:	6c e0       	ldi	r22, 0x0C	; 12
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
			_lcd->print(hour());
    282c:	08 a5       	ldd	r16, Y+40	; 0x28
    282e:	19 a5       	ldd	r17, Y+41	; 0x29
    2830:	0e 94 ab 09 	call	0x1356	; 0x1356 <_Z4hourv>
    2834:	bc 01       	movw	r22, r24
    2836:	c8 01       	movw	r24, r16
    2838:	4a e0       	ldi	r20, 0x0A	; 10
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <_ZN5Print5printEii>
			_lcd->print(":");
    2840:	88 a5       	ldd	r24, Y+40	; 0x28
    2842:	99 a5       	ldd	r25, Y+41	; 0x29
    2844:	67 e3       	ldi	r22, 0x37	; 55
    2846:	71 e0       	ldi	r23, 0x01	; 1
    2848:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
			_lcd->print(minute());
    284c:	08 a5       	ldd	r16, Y+40	; 0x28
    284e:	19 a5       	ldd	r17, Y+41	; 0x29
    2850:	0e 94 a3 09 	call	0x1346	; 0x1346 <_Z6minutev>
    2854:	bc 01       	movw	r22, r24
    2856:	c8 01       	movw	r24, r16
    2858:	4a e0       	ldi	r20, 0x0A	; 10
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <_ZN5Print5printEii>
			_lcd->print(":");
    2860:	88 a5       	ldd	r24, Y+40	; 0x28
    2862:	99 a5       	ldd	r25, Y+41	; 0x29
    2864:	67 e3       	ldi	r22, 0x37	; 55
    2866:	71 e0       	ldi	r23, 0x01	; 1
    2868:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
			_lcd->print(second());
    286c:	08 a5       	ldd	r16, Y+40	; 0x28
    286e:	19 a5       	ldd	r17, Y+41	; 0x29
    2870:	0e 94 9b 09 	call	0x1336	; 0x1336 <_Z6secondv>
    2874:	bc 01       	movw	r22, r24
    2876:	c8 01       	movw	r24, r16
    2878:	4a e0       	ldi	r20, 0x0A	; 10
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <_ZN5Print5printEii>
	}
}
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	08 95       	ret

0000288a <_ZN7DisplayD0Ev>:
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
	_modeChange = true;
	_stateChange = true;
}

Display::~Display() {
    288a:	fc 01       	movw	r30, r24
    288c:	88 e1       	ldi	r24, 0x18	; 24
    288e:	92 e0       	ldi	r25, 0x02	; 2
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2894:	cf 01       	movw	r24, r30
    2896:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZdlPv>
    289a:	08 95       	ret

0000289c <_ZN7DisplayC1Ev>:
#include "Display.h"
#include <Arduino.h>
#include <OLEDFourBit.h>
#include <Time.h>

Display::Display() {
    289c:	8f 92       	push	r8
    289e:	9f 92       	push	r9
    28a0:	af 92       	push	r10
    28a2:	cf 92       	push	r12
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	1f 93       	push	r17
    28ac:	4c 01       	movw	r8, r24
    28ae:	88 e1       	ldi	r24, 0x18	; 24
    28b0:	92 e0       	ldi	r25, 0x02	; 2
    28b2:	f4 01       	movw	r30, r8
    28b4:	91 83       	std	Z+1, r25	; 0x01
    28b6:	80 83       	st	Z, r24
	_mode = NULL;
    28b8:	13 a2       	std	Z+35, r1	; 0x23
    28ba:	12 a2       	std	Z+34, r1	; 0x22
	_state = NULL;
    28bc:	15 a2       	std	Z+37, r1	; 0x25
    28be:	14 a2       	std	Z+36, r1	; 0x24
	_lcd = new OLEDFourBit(3, 4, 5, 6, 7, 8, 9);
    28c0:	82 e1       	ldi	r24, 0x12	; 18
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    28c8:	18 2f       	mov	r17, r24
    28ca:	f9 2e       	mov	r15, r25
    28cc:	63 e0       	ldi	r22, 0x03	; 3
    28ce:	44 e0       	ldi	r20, 0x04	; 4
    28d0:	25 e0       	ldi	r18, 0x05	; 5
    28d2:	06 e0       	ldi	r16, 0x06	; 6
    28d4:	77 e0       	ldi	r23, 0x07	; 7
    28d6:	e7 2e       	mov	r14, r23
    28d8:	58 e0       	ldi	r21, 0x08	; 8
    28da:	c5 2e       	mov	r12, r21
    28dc:	39 e0       	ldi	r19, 0x09	; 9
    28de:	a3 2e       	mov	r10, r19
    28e0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_ZN11OLEDFourBitC1Ehhhhhhh>
    28e4:	f4 01       	movw	r30, r8
    28e6:	10 a7       	std	Z+40, r17	; 0x28
    28e8:	f1 a6       	std	Z+41, r15	; 0x29
	_modeChange = true;
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	86 a3       	std	Z+38, r24	; 0x26
	_stateChange = true;
    28ee:	87 a3       	std	Z+39, r24	; 0x27
}
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	cf 90       	pop	r12
    28fa:	af 90       	pop	r10
    28fc:	9f 90       	pop	r9
    28fe:	8f 90       	pop	r8
    2900:	08 95       	ret

00002902 <_ZN20FridgeTempControllerD1Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

FridgeTempController::~FridgeTempController() {
    2902:	fc 01       	movw	r30, r24
    2904:	80 e2       	ldi	r24, 0x20	; 32
    2906:	92 e0       	ldi	r25, 0x02	; 2
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    290c:	08 95       	ret

0000290e <_ZN20FridgeTempController13GetTempActualEv>:
//float FridgeTempController::GetTemp()
//{
//	return _Temp->GetTemperature();
//}
//
float FridgeTempController::GetTempActual()
    290e:	fc 01       	movw	r30, r24
{
	return TemperatureActual;
}
    2910:	22 81       	ldd	r18, Z+2	; 0x02
    2912:	33 81       	ldd	r19, Z+3	; 0x03
    2914:	44 81       	ldd	r20, Z+4	; 0x04
    2916:	55 81       	ldd	r21, Z+5	; 0x05
    2918:	b9 01       	movw	r22, r18
    291a:	ca 01       	movw	r24, r20
    291c:	08 95       	ret

0000291e <_ZN20FridgeTempController14GetTempSettingEv>:

float FridgeTempController::GetTempSetting()
    291e:	fc 01       	movw	r30, r24
{
	return TemperatureSetting;
}
    2920:	26 81       	ldd	r18, Z+6	; 0x06
    2922:	37 81       	ldd	r19, Z+7	; 0x07
    2924:	40 85       	ldd	r20, Z+8	; 0x08
    2926:	51 85       	ldd	r21, Z+9	; 0x09
    2928:	b9 01       	movw	r22, r18
    292a:	ca 01       	movw	r24, r20
    292c:	08 95       	ret

0000292e <_ZN20FridgeTempController14SetTempSettingEf>:

float FridgeTempController::SetTempSetting(float newSetting)
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
{
	return TemperatureSetting = newSetting;
    2932:	db 01       	movw	r26, r22
    2934:	8a 01       	movw	r16, r20
    2936:	9b 01       	movw	r18, r22
    2938:	fc 01       	movw	r30, r24
    293a:	06 83       	std	Z+6, r16	; 0x06
    293c:	17 83       	std	Z+7, r17	; 0x07
    293e:	20 87       	std	Z+8, r18	; 0x08
    2940:	31 87       	std	Z+9, r19	; 0x09
}
    2942:	ba 01       	movw	r22, r20
    2944:	cd 01       	movw	r24, r26
    2946:	1f 91       	pop	r17
    2948:	0f 91       	pop	r16
    294a:	08 95       	ret

0000294c <_ZN20FridgeTempController11updateSlopeEv>:
	}
//	Serial.print("Fridge After ");
//	Serial.println(_timer);
}

void FridgeTempController::updateSlope()  //called every minute
    294c:	8f 92       	push	r8
    294e:	9f 92       	push	r9
    2950:	af 92       	push	r10
    2952:	bf 92       	push	r11
    2954:	cf 92       	push	r12
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	9c 01       	movw	r18, r24
{
	TempHistory[TempHistoryIndex] = TempFiltSlow[3];
    2962:	5c ec       	ldi	r21, 0xCC	; 204
    2964:	85 2e       	mov	r8, r21
    2966:	91 2c       	mov	r9, r1
    2968:	88 0e       	add	r8, r24
    296a:	99 1e       	adc	r9, r25
    296c:	d4 01       	movw	r26, r8
    296e:	0c 91       	ld	r16, X
    2970:	10 e0       	ldi	r17, 0x00	; 0
    2972:	0b 5e       	subi	r16, 0xEB	; 235
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	f8 01       	movw	r30, r16
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	ee 0f       	add	r30, r30
    297e:	ff 1f       	adc	r31, r31
    2980:	e8 0f       	add	r30, r24
    2982:	f9 1f       	adc	r31, r25
    2984:	2a 5b       	subi	r18, 0xBA	; 186
    2986:	3f 4f       	sbci	r19, 0xFF	; 255
    2988:	d9 01       	movw	r26, r18
    298a:	cd 90       	ld	r12, X+
    298c:	dd 90       	ld	r13, X+
    298e:	ed 90       	ld	r14, X+
    2990:	fc 90       	ld	r15, X
    2992:	26 54       	subi	r18, 0x46	; 70
    2994:	30 40       	sbci	r19, 0x00	; 0
    2996:	c0 82       	st	Z, r12
    2998:	d1 82       	std	Z+1, r13	; 0x01
    299a:	e2 82       	std	Z+2, r14	; 0x02
    299c:	f3 82       	std	Z+3, r15	; 0x03
	Slope = TempHistory[TempHistoryIndex]
		- TempHistory[(TempHistoryIndex + 1) % 30];
    299e:	90 e5       	ldi	r25, 0x50	; 80
    29a0:	a9 2e       	mov	r10, r25
    29a2:	b1 2c       	mov	r11, r1
    29a4:	a2 0e       	add	r10, r18
    29a6:	b3 1e       	adc	r11, r19
    29a8:	04 51       	subi	r16, 0x14	; 20
    29aa:	10 40       	sbci	r17, 0x00	; 0
    29ac:	c8 01       	movw	r24, r16
    29ae:	6e e1       	ldi	r22, 0x1E	; 30
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    29b6:	fc 01       	movw	r30, r24
    29b8:	75 96       	adiw	r30, 0x15	; 21
    29ba:	ee 0f       	add	r30, r30
    29bc:	ff 1f       	adc	r31, r31
    29be:	ee 0f       	add	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	c7 01       	movw	r24, r14
    29c8:	b6 01       	movw	r22, r12
    29ca:	20 81       	ld	r18, Z
    29cc:	31 81       	ldd	r19, Z+1	; 0x01
    29ce:	42 81       	ldd	r20, Z+2	; 0x02
    29d0:	53 81       	ldd	r21, Z+3	; 0x03
    29d2:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    29d6:	f5 01       	movw	r30, r10
    29d8:	60 83       	st	Z, r22
    29da:	71 83       	std	Z+1, r23	; 0x01
    29dc:	82 83       	std	Z+2, r24	; 0x02
    29de:	93 83       	std	Z+3, r25	; 0x03
	TempHistoryIndex = (TempHistoryIndex + 1) % 30;
    29e0:	c8 01       	movw	r24, r16
    29e2:	6e e1       	ldi	r22, 0x1E	; 30
    29e4:	70 e0       	ldi	r23, 0x00	; 0
    29e6:	0e 94 cc 2b 	call	0x5798	; 0x5798 <__divmodhi4>
    29ea:	d4 01       	movw	r26, r8
    29ec:	8c 93       	st	X, r24
	Services &= ~updateSlope_SERVICE;		// reset the service flag
    29ee:	80 91 7e 02 	lds	r24, 0x027E
    29f2:	8f 7d       	andi	r24, 0xDF	; 223
    29f4:	80 93 7e 02 	sts	0x027E, r24
}
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	ff 90       	pop	r15
    29fe:	ef 90       	pop	r14
    2a00:	df 90       	pop	r13
    2a02:	cf 90       	pop	r12
    2a04:	bf 90       	pop	r11
    2a06:	af 90       	pop	r10
    2a08:	9f 90       	pop	r9
    2a0a:	8f 90       	pop	r8
    2a0c:	08 95       	ret

00002a0e <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>:

void FridgeTempController::updateSlowFilteredTemperatures() //called every 10 seconds
    2a0e:	2f 92       	push	r2
    2a10:	3f 92       	push	r3
    2a12:	4f 92       	push	r4
    2a14:	5f 92       	push	r5
    2a16:	6f 92       	push	r6
    2a18:	7f 92       	push	r7
    2a1a:	8f 92       	push	r8
    2a1c:	9f 92       	push	r9
    2a1e:	af 92       	push	r10
    2a20:	bf 92       	push	r11
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x26>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x28>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv+0x2a>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	6c 01       	movw	r12, r24
{
//	Serial.println("Input");
	// Input for filter
	TempSlow[0] = TempSlow[1];
    2a3e:	dc 01       	movw	r26, r24
    2a40:	9e 96       	adiw	r26, 0x2e	; 46
    2a42:	6d 91       	ld	r22, X+
    2a44:	7d 91       	ld	r23, X+
    2a46:	8d 91       	ld	r24, X+
    2a48:	9c 91       	ld	r25, X
    2a4a:	d1 97       	sbiw	r26, 0x31	; 49
    2a4c:	f6 01       	movw	r30, r12
    2a4e:	62 a7       	std	Z+42, r22	; 0x2a
    2a50:	73 a7       	std	Z+43, r23	; 0x2b
    2a52:	84 a7       	std	Z+44, r24	; 0x2c
    2a54:	95 a7       	std	Z+45, r25	; 0x2d
	TempSlow[1] = TempSlow[2];
    2a56:	42 a8       	ldd	r4, Z+50	; 0x32
    2a58:	53 a8       	ldd	r5, Z+51	; 0x33
    2a5a:	64 a8       	ldd	r6, Z+52	; 0x34
    2a5c:	75 a8       	ldd	r7, Z+53	; 0x35
    2a5e:	9e 96       	adiw	r26, 0x2e	; 46
    2a60:	4d 92       	st	X+, r4
    2a62:	5d 92       	st	X+, r5
    2a64:	6d 92       	st	X+, r6
    2a66:	7c 92       	st	X, r7
    2a68:	d1 97       	sbiw	r26, 0x31	; 49
	TempSlow[2] = TempSlow[3];
    2a6a:	d6 96       	adiw	r26, 0x36	; 54
    2a6c:	8d 90       	ld	r8, X+
    2a6e:	9d 90       	ld	r9, X+
    2a70:	ad 90       	ld	r10, X+
    2a72:	bc 90       	ld	r11, X
    2a74:	d9 97       	sbiw	r26, 0x39	; 57
    2a76:	82 aa       	std	Z+50, r8	; 0x32
    2a78:	93 aa       	std	Z+51, r9	; 0x33
    2a7a:	a4 aa       	std	Z+52, r10	; 0x34
    2a7c:	b5 aa       	std	Z+53, r11	; 0x35
	TempSlow[3] = TempFiltFast[3];
    2a7e:	26 a1       	ldd	r18, Z+38	; 0x26
    2a80:	37 a1       	ldd	r19, Z+39	; 0x27
    2a82:	40 a5       	ldd	r20, Z+40	; 0x28
    2a84:	51 a5       	ldd	r21, Z+41	; 0x29
    2a86:	d6 96       	adiw	r26, 0x36	; 54
    2a88:	2d 93       	st	X+, r18
    2a8a:	3d 93       	st	X+, r19
    2a8c:	4d 93       	st	X+, r20
    2a8e:	5c 93       	st	X, r21
    2a90:	d9 97       	sbiw	r26, 0x39	; 57
//	Serial.println("Butterworth");
	// Butterworth filter with cutoff frequency 0.01*sample frequency (FS=0.1Hz)
//	Serial.println(TempFiltSlow[1]);
	TempFiltSlow[0] = TempFiltSlow[1];
    2a92:	ee e3       	ldi	r30, 0x3E	; 62
    2a94:	2e 2e       	mov	r2, r30
    2a96:	31 2c       	mov	r3, r1
    2a98:	2c 0c       	add	r2, r12
    2a9a:	3d 1c       	adc	r3, r13
    2a9c:	f1 01       	movw	r30, r2
    2a9e:	e0 80       	ld	r14, Z
    2aa0:	f1 80       	ldd	r15, Z+1	; 0x01
    2aa2:	02 81       	ldd	r16, Z+2	; 0x02
    2aa4:	13 81       	ldd	r17, Z+3	; 0x03
    2aa6:	da 96       	adiw	r26, 0x3a	; 58
    2aa8:	ed 92       	st	X+, r14
    2aaa:	fd 92       	st	X+, r15
    2aac:	0d 93       	st	X+, r16
    2aae:	1c 93       	st	X, r17
    2ab0:	dd 97       	sbiw	r26, 0x3d	; 61
//	Serial.println(TempFiltSlow[2]);
	TempFiltSlow[1] = TempFiltSlow[2];
    2ab2:	f6 01       	movw	r30, r12
    2ab4:	ee 5b       	subi	r30, 0xBE	; 190
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	e0 80       	ld	r14, Z
    2aba:	f1 80       	ldd	r15, Z+1	; 0x01
    2abc:	02 81       	ldd	r16, Z+2	; 0x02
    2abe:	13 81       	ldd	r17, Z+3	; 0x03
    2ac0:	d1 01       	movw	r26, r2
    2ac2:	ed 92       	st	X+, r14
    2ac4:	fd 92       	st	X+, r15
    2ac6:	0d 93       	st	X+, r16
    2ac8:	1c 93       	st	X, r17
    2aca:	13 97       	sbiw	r26, 0x03	; 3
//	Serial.println(TempFiltSlow[3]);
	TempFiltSlow[2] = TempFiltSlow[3];
    2acc:	86 01       	movw	r16, r12
    2ace:	0a 5b       	subi	r16, 0xBA	; 186
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	1e 83       	std	Y+6, r17	; 0x06
    2ad4:	0d 83       	std	Y+5, r16	; 0x05
    2ad6:	d8 01       	movw	r26, r16
    2ad8:	ed 90       	ld	r14, X+
    2ada:	fd 90       	ld	r15, X+
    2adc:	0d 91       	ld	r16, X+
    2ade:	1c 91       	ld	r17, X
    2ae0:	e9 82       	std	Y+1, r14	; 0x01
    2ae2:	fa 82       	std	Y+2, r15	; 0x02
    2ae4:	0b 83       	std	Y+3, r16	; 0x03
    2ae6:	1c 83       	std	Y+4, r17	; 0x04
    2ae8:	e0 82       	st	Z, r14
    2aea:	f1 82       	std	Z+1, r15	; 0x01
    2aec:	02 83       	std	Z+2, r16	; 0x02
    2aee:	13 83       	std	Z+3, r17	; 0x03
//	                                      + (2.8743568927 * TempFiltSlow[2]);
	TempFiltSlow[3] = (TempSlow[0] + TempSlow[3]
	    + 3 * (TempSlow[1] + TempSlow[2])) / 3.430944333e+04
        + (0.8818931306 * TempFiltSlow[0])
        + (-2.7564831952 * TempFiltSlow[1])
	    + (2.8743568927 * TempFiltSlow[2]);
    2af0:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2af4:	7b 01       	movw	r14, r22
    2af6:	8c 01       	movw	r16, r24
    2af8:	c3 01       	movw	r24, r6
    2afa:	b2 01       	movw	r22, r4
    2afc:	a5 01       	movw	r20, r10
    2afe:	94 01       	movw	r18, r8
    2b00:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e4       	ldi	r20, 0x40	; 64
    2b0a:	50 e4       	ldi	r21, 0x40	; 64
    2b0c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2b10:	9b 01       	movw	r18, r22
    2b12:	ac 01       	movw	r20, r24
    2b14:	c8 01       	movw	r24, r16
    2b16:	b7 01       	movw	r22, r14
    2b18:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2b1c:	21 e7       	ldi	r18, 0x71	; 113
    2b1e:	35 e0       	ldi	r19, 0x05	; 5
    2b20:	46 e0       	ldi	r20, 0x06	; 6
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    2b28:	7b 01       	movw	r14, r22
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	f6 01       	movw	r30, r12
    2b2e:	62 ad       	ldd	r22, Z+58	; 0x3a
    2b30:	73 ad       	ldd	r23, Z+59	; 0x3b
    2b32:	84 ad       	ldd	r24, Z+60	; 0x3c
    2b34:	95 ad       	ldd	r25, Z+61	; 0x3d
    2b36:	20 ec       	ldi	r18, 0xC0	; 192
    2b38:	33 ec       	ldi	r19, 0xC3	; 195
    2b3a:	41 e6       	ldi	r20, 0x61	; 97
    2b3c:	5f e3       	ldi	r21, 0x3F	; 63
    2b3e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2b42:	9b 01       	movw	r18, r22
    2b44:	ac 01       	movw	r20, r24
    2b46:	c8 01       	movw	r24, r16
    2b48:	b7 01       	movw	r22, r14
    2b4a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2b4e:	7b 01       	movw	r14, r22
    2b50:	8c 01       	movw	r16, r24
    2b52:	d1 01       	movw	r26, r2
    2b54:	6d 91       	ld	r22, X+
    2b56:	7d 91       	ld	r23, X+
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	28 e3       	ldi	r18, 0x38	; 56
    2b5e:	3a e6       	ldi	r19, 0x6A	; 106
    2b60:	40 e3       	ldi	r20, 0x30	; 48
    2b62:	50 ec       	ldi	r21, 0xC0	; 192
    2b64:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2b68:	9b 01       	movw	r18, r22
    2b6a:	ac 01       	movw	r20, r24
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	b7 01       	movw	r22, r14
    2b70:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2b74:	7b 01       	movw	r14, r22
    2b76:	8c 01       	movw	r16, r24
    2b78:	69 81       	ldd	r22, Y+1	; 0x01
    2b7a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	27 e7       	ldi	r18, 0x77	; 119
    2b82:	35 ef       	ldi	r19, 0xF5	; 245
    2b84:	47 e3       	ldi	r20, 0x37	; 55
    2b86:	50 e4       	ldi	r21, 0x40	; 64
    2b88:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2b8c:	9b 01       	movw	r18, r22
    2b8e:	ac 01       	movw	r20, r24
    2b90:	c8 01       	movw	r24, r16
    2b92:	b7 01       	movw	r22, r14
    2b94:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2b98:	ed 81       	ldd	r30, Y+5	; 0x05
    2b9a:	fe 81       	ldd	r31, Y+6	; 0x06
    2b9c:	60 83       	st	Z, r22
    2b9e:	71 83       	std	Z+1, r23	; 0x01
    2ba0:	82 83       	std	Z+2, r24	; 0x02
    2ba2:	93 83       	std	Z+3, r25	; 0x03
//	Serial.println("Done");
}
    2ba4:	26 96       	adiw	r28, 0x06	; 6
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	cf 91       	pop	r28
    2bb2:	df 91       	pop	r29
    2bb4:	1f 91       	pop	r17
    2bb6:	0f 91       	pop	r16
    2bb8:	ff 90       	pop	r15
    2bba:	ef 90       	pop	r14
    2bbc:	df 90       	pop	r13
    2bbe:	cf 90       	pop	r12
    2bc0:	bf 90       	pop	r11
    2bc2:	af 90       	pop	r10
    2bc4:	9f 90       	pop	r9
    2bc6:	8f 90       	pop	r8
    2bc8:	7f 90       	pop	r7
    2bca:	6f 90       	pop	r6
    2bcc:	5f 90       	pop	r5
    2bce:	4f 90       	pop	r4
    2bd0:	3f 90       	pop	r3
    2bd2:	2f 90       	pop	r2
    2bd4:	08 95       	ret

00002bd6 <_ZN20FridgeTempController18updateTemperaturesEv>:

void FridgeTempController::updateTemperatures()  //called every 200 milliseconds
    2bd6:	4f 92       	push	r4
    2bd8:	5f 92       	push	r5
    2bda:	6f 92       	push	r6
    2bdc:	7f 92       	push	r7
    2bde:	8f 92       	push	r8
    2be0:	9f 92       	push	r9
    2be2:	af 92       	push	r10
    2be4:	bf 92       	push	r11
    2be6:	cf 92       	push	r12
    2be8:	df 92       	push	r13
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <_ZN20FridgeTempController18updateTemperaturesEv+0x22>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <_ZN20FridgeTempController18updateTemperaturesEv+0x24>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	8c 01       	movw	r16, r24
{
	TempFast[0] = TempFast[1];
    2c00:	fc 01       	movw	r30, r24
    2c02:	86 85       	ldd	r24, Z+14	; 0x0e
    2c04:	97 85       	ldd	r25, Z+15	; 0x0f
    2c06:	a0 89       	ldd	r26, Z+16	; 0x10
    2c08:	b1 89       	ldd	r27, Z+17	; 0x11
    2c0a:	82 87       	std	Z+10, r24	; 0x0a
    2c0c:	93 87       	std	Z+11, r25	; 0x0b
    2c0e:	a4 87       	std	Z+12, r26	; 0x0c
    2c10:	b5 87       	std	Z+13, r27	; 0x0d
	TempFast[1] = TempFast[2];
    2c12:	82 89       	ldd	r24, Z+18	; 0x12
    2c14:	93 89       	ldd	r25, Z+19	; 0x13
    2c16:	a4 89       	ldd	r26, Z+20	; 0x14
    2c18:	b5 89       	ldd	r27, Z+21	; 0x15
    2c1a:	86 87       	std	Z+14, r24	; 0x0e
    2c1c:	97 87       	std	Z+15, r25	; 0x0f
    2c1e:	a0 8b       	std	Z+16, r26	; 0x10
    2c20:	b1 8b       	std	Z+17, r27	; 0x11
	TempFast[2] = TempFast[3];
    2c22:	86 89       	ldd	r24, Z+22	; 0x16
    2c24:	97 89       	ldd	r25, Z+23	; 0x17
    2c26:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c28:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c2a:	82 8b       	std	Z+18, r24	; 0x12
    2c2c:	93 8b       	std	Z+19, r25	; 0x13
    2c2e:	a4 8b       	std	Z+20, r26	; 0x14
    2c30:	b5 8b       	std	Z+21, r27	; 0x15
//	Serial.println("FridgeTempController::updateTemperatures");
	TempFast[3] = _Temp->GetTemperature();
    2c32:	e6 5b       	subi	r30, 0xB6	; 182
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	91 81       	ldd	r25, Z+1	; 0x01
    2c3a:	0e 94 03 23 	call	0x4606	; 0x4606 <_ZN11TempSensors14GetTemperatureEv>
    2c3e:	9b 01       	movw	r18, r22
    2c40:	ac 01       	movw	r20, r24
    2c42:	d8 01       	movw	r26, r16
    2c44:	56 96       	adiw	r26, 0x16	; 22
    2c46:	6d 93       	st	X+, r22
    2c48:	7d 93       	st	X+, r23
    2c4a:	8d 93       	st	X+, r24
    2c4c:	9c 93       	st	X, r25
    2c4e:	59 97       	sbiw	r26, 0x19	; 25
//		Serial.print(" ");
//		Serial.println(TempFast[3],10);
//	}

	// Butterworth filter with cutoff frequency 0.033*sample frequency (FS=5Hz)
	TempFiltFast[0] = TempFiltFast[1];
    2c50:	5e 96       	adiw	r26, 0x1e	; 30
    2c52:	8d 90       	ld	r8, X+
    2c54:	9d 90       	ld	r9, X+
    2c56:	ad 90       	ld	r10, X+
    2c58:	bc 90       	ld	r11, X
    2c5a:	91 97       	sbiw	r26, 0x21	; 33
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	82 8e       	std	Z+26, r8	; 0x1a
    2c60:	93 8e       	std	Z+27, r9	; 0x1b
    2c62:	a4 8e       	std	Z+28, r10	; 0x1c
    2c64:	b5 8e       	std	Z+29, r11	; 0x1d
	TempFiltFast[1] = TempFiltFast[2];
    2c66:	42 a0       	ldd	r4, Z+34	; 0x22
    2c68:	53 a0       	ldd	r5, Z+35	; 0x23
    2c6a:	64 a0       	ldd	r6, Z+36	; 0x24
    2c6c:	75 a0       	ldd	r7, Z+37	; 0x25
    2c6e:	5e 96       	adiw	r26, 0x1e	; 30
    2c70:	4d 92       	st	X+, r4
    2c72:	5d 92       	st	X+, r5
    2c74:	6d 92       	st	X+, r6
    2c76:	7c 92       	st	X, r7
    2c78:	91 97       	sbiw	r26, 0x21	; 33
	TempFiltFast[2] = TempFiltFast[3];
    2c7a:	96 96       	adiw	r26, 0x26	; 38
    2c7c:	8d 91       	ld	r24, X+
    2c7e:	9d 91       	ld	r25, X+
    2c80:	0d 90       	ld	r0, X+
    2c82:	bc 91       	ld	r27, X
    2c84:	a0 2d       	mov	r26, r0
    2c86:	89 83       	std	Y+1, r24	; 0x01
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	ab 83       	std	Y+3, r26	; 0x03
    2c8c:	bc 83       	std	Y+4, r27	; 0x04
    2c8e:	82 a3       	std	Z+34, r24	; 0x22
    2c90:	93 a3       	std	Z+35, r25	; 0x23
    2c92:	a4 a3       	std	Z+36, r26	; 0x24
    2c94:	b5 a3       	std	Z+37, r27	; 0x25
	TempFiltFast[3] = (TempFast[0] + TempFast[3]
		+ 3 * (TempFast[1] + TempFast[2])) / 1.092799972e+03
		+ (0.6600489526 * TempFiltFast[0])
		+ (-2.2533982563 * TempFiltFast[1])
		+ (2.5860286592 * TempFiltFast[2]);
    2c96:	62 85       	ldd	r22, Z+10	; 0x0a
    2c98:	73 85       	ldd	r23, Z+11	; 0x0b
    2c9a:	84 85       	ldd	r24, Z+12	; 0x0c
    2c9c:	95 85       	ldd	r25, Z+13	; 0x0d
    2c9e:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2ca2:	6b 01       	movw	r12, r22
    2ca4:	7c 01       	movw	r14, r24
    2ca6:	d8 01       	movw	r26, r16
    2ca8:	1e 96       	adiw	r26, 0x0e	; 14
    2caa:	6d 91       	ld	r22, X+
    2cac:	7d 91       	ld	r23, X+
    2cae:	8d 91       	ld	r24, X+
    2cb0:	9c 91       	ld	r25, X
    2cb2:	51 97       	sbiw	r26, 0x11	; 17
    2cb4:	52 96       	adiw	r26, 0x12	; 18
    2cb6:	2d 91       	ld	r18, X+
    2cb8:	3d 91       	ld	r19, X+
    2cba:	4d 91       	ld	r20, X+
    2cbc:	5c 91       	ld	r21, X
    2cbe:	55 97       	sbiw	r26, 0x15	; 21
    2cc0:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e4       	ldi	r20, 0x40	; 64
    2cca:	50 e4       	ldi	r21, 0x40	; 64
    2ccc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2cd0:	9b 01       	movw	r18, r22
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	c7 01       	movw	r24, r14
    2cd6:	b6 01       	movw	r22, r12
    2cd8:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2cdc:	29 e9       	ldi	r18, 0x99	; 153
    2cde:	39 e9       	ldi	r19, 0x99	; 153
    2ce0:	48 e8       	ldi	r20, 0x88	; 136
    2ce2:	54 e4       	ldi	r21, 0x44	; 68
    2ce4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    2ce8:	6b 01       	movw	r12, r22
    2cea:	7c 01       	movw	r14, r24
    2cec:	c5 01       	movw	r24, r10
    2cee:	b4 01       	movw	r22, r8
    2cf0:	28 ef       	ldi	r18, 0xF8	; 248
    2cf2:	38 ef       	ldi	r19, 0xF8	; 248
    2cf4:	48 e2       	ldi	r20, 0x28	; 40
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2cfc:	9b 01       	movw	r18, r22
    2cfe:	ac 01       	movw	r20, r24
    2d00:	c7 01       	movw	r24, r14
    2d02:	b6 01       	movw	r22, r12
    2d04:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2d08:	6b 01       	movw	r12, r22
    2d0a:	7c 01       	movw	r14, r24
    2d0c:	c3 01       	movw	r24, r6
    2d0e:	b2 01       	movw	r22, r4
    2d10:	2d ea       	ldi	r18, 0xAD	; 173
    2d12:	37 e3       	ldi	r19, 0x37	; 55
    2d14:	40 e1       	ldi	r20, 0x10	; 16
    2d16:	50 ec       	ldi	r21, 0xC0	; 192
    2d18:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2d1c:	9b 01       	movw	r18, r22
    2d1e:	ac 01       	movw	r20, r24
    2d20:	c7 01       	movw	r24, r14
    2d22:	b6 01       	movw	r22, r12
    2d24:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2d28:	6b 01       	movw	r12, r22
    2d2a:	7c 01       	movw	r14, r24
    2d2c:	69 81       	ldd	r22, Y+1	; 0x01
    2d2e:	7a 81       	ldd	r23, Y+2	; 0x02
    2d30:	8b 81       	ldd	r24, Y+3	; 0x03
    2d32:	9c 81       	ldd	r25, Y+4	; 0x04
    2d34:	2e e7       	ldi	r18, 0x7E	; 126
    2d36:	31 e8       	ldi	r19, 0x81	; 129
    2d38:	45 e2       	ldi	r20, 0x25	; 37
    2d3a:	50 e4       	ldi	r21, 0x40	; 64
    2d3c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    2d40:	9b 01       	movw	r18, r22
    2d42:	ac 01       	movw	r20, r24
    2d44:	c7 01       	movw	r24, r14
    2d46:	b6 01       	movw	r22, r12
    2d48:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	9b 01       	movw	r18, r22
    2d50:	ac 01       	movw	r20, r24
    2d52:	f8 01       	movw	r30, r16
    2d54:	26 a3       	std	Z+38, r18	; 0x26
    2d56:	37 a3       	std	Z+39, r19	; 0x27
    2d58:	40 a7       	std	Z+40, r20	; 0x28
    2d5a:	51 a7       	std	Z+41, r21	; 0x29
//		Serial.print("FridgeActual: ");
//		Serial.print(TemperatureActual,10);
//		Serial.print(" ");
//		Serial.println(TempFiltFast[3],10);
//	}
	TemperatureActual = TempFiltFast[3];
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	82 83       	std	Z+2, r24	; 0x02
    2d60:	93 83       	std	Z+3, r25	; 0x03
    2d62:	a4 83       	std	Z+4, r26	; 0x04
    2d64:	b5 83       	std	Z+5, r27	; 0x05
//	Serial.println("FridgeActual");
//	Serial.println(TemperatureActual);
}
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	ff 90       	pop	r15
    2d78:	ef 90       	pop	r14
    2d7a:	df 90       	pop	r13
    2d7c:	cf 90       	pop	r12
    2d7e:	bf 90       	pop	r11
    2d80:	af 90       	pop	r10
    2d82:	9f 90       	pop	r9
    2d84:	8f 90       	pop	r8
    2d86:	7f 90       	pop	r7
    2d88:	6f 90       	pop	r6
    2d8a:	5f 90       	pop	r5
    2d8c:	4f 90       	pop	r4
    2d8e:	08 95       	ret

00002d90 <_ZN20FridgeTempController11UpdateTimerEv>:
{
	//Run the algorithm
	return 0;
}

void FridgeTempController::UpdateTimer()
    2d90:	0f 93       	push	r16
    2d92:	1f 93       	push	r17
    2d94:	cf 93       	push	r28
    2d96:	df 93       	push	r29
    2d98:	ec 01       	movw	r28, r24
{
	_timer+=200;
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e4 5b       	subi	r30, 0xB4	; 180
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	60 81       	ld	r22, Z
    2da2:	71 81       	ldd	r23, Z+1	; 0x01
    2da4:	82 81       	ldd	r24, Z+2	; 0x02
    2da6:	93 81       	ldd	r25, Z+3	; 0x03
    2da8:	68 53       	subi	r22, 0x38	; 56
    2daa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dac:	8f 4f       	sbci	r24, 0xFF	; 255
    2dae:	9f 4f       	sbci	r25, 0xFF	; 255
    2db0:	60 83       	st	Z, r22
    2db2:	71 83       	std	Z+1, r23	; 0x01
    2db4:	82 83       	std	Z+2, r24	; 0x02
    2db6:	93 83       	std	Z+3, r25	; 0x03

//	Serial.print("Fridge Before ");
//	Serial.println(_timer);
	//Check the timers
	if ((_timer % 200) == 0){
    2db8:	28 ec       	ldi	r18, 0xC8	; 200
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    2dc4:	61 15       	cp	r22, r1
    2dc6:	71 05       	cpc	r23, r1
    2dc8:	81 05       	cpc	r24, r1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	19 f4       	brne	.+6      	; 0x2dd4 <_ZN20FridgeTempController11UpdateTimerEv+0x44>
//		Serial.println("Updating Fridge Fast Temps");
		updateTemperatures();					// Update Fast Temperatures every 200ms
    2dce:	ce 01       	movw	r24, r28
    2dd0:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <_ZN20FridgeTempController18updateTemperaturesEv>
	}
	if((_timer % 10000) == 0){					// Update Slow Temperatures every 10 seconds
    2dd4:	c4 5b       	subi	r28, 0xB4	; 180
    2dd6:	df 4f       	sbci	r29, 0xFF	; 255
    2dd8:	68 81       	ld	r22, Y
    2dda:	79 81       	ldd	r23, Y+1	; 0x01
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	9b 81       	ldd	r25, Y+3	; 0x03
    2de0:	cc 54       	subi	r28, 0x4C	; 76
    2de2:	d0 40       	sbci	r29, 0x00	; 0
    2de4:	20 e1       	ldi	r18, 0x10	; 16
    2de6:	37 e2       	ldi	r19, 0x27	; 39
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    2df0:	61 15       	cp	r22, r1
    2df2:	71 05       	cpc	r23, r1
    2df4:	81 05       	cpc	r24, r1
    2df6:	91 05       	cpc	r25, r1
    2df8:	a1 f5       	brne	.+104    	; 0x2e62 <_ZN20FridgeTempController11UpdateTimerEv+0xd2>
//		Serial.println("Updating Fridge Slow Temps");
		updateSlowFilteredTemperatures();
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>
		Serial.print(TempFast[3]);
    2e00:	4e 89       	ldd	r20, Y+22	; 0x16
    2e02:	5f 89       	ldd	r21, Y+23	; 0x17
    2e04:	68 8d       	ldd	r22, Y+24	; 0x18
    2e06:	79 8d       	ldd	r23, Y+25	; 0x19
    2e08:	82 e4       	ldi	r24, 0x42	; 66
    2e0a:	93 e0       	ldi	r25, 0x03	; 3
    2e0c:	22 e0       	ldi	r18, 0x02	; 2
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    2e14:	82 e4       	ldi	r24, 0x42	; 66
    2e16:	93 e0       	ldi	r25, 0x03	; 3
    2e18:	6c e2       	ldi	r22, 0x2C	; 44
    2e1a:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
		Serial.print(TempFiltFast[3]);
    2e1e:	4e a1       	ldd	r20, Y+38	; 0x26
    2e20:	5f a1       	ldd	r21, Y+39	; 0x27
    2e22:	68 a5       	ldd	r22, Y+40	; 0x28
    2e24:	79 a5       	ldd	r23, Y+41	; 0x29
    2e26:	82 e4       	ldi	r24, 0x42	; 66
    2e28:	93 e0       	ldi	r25, 0x03	; 3
    2e2a:	22 e0       	ldi	r18, 0x02	; 2
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    2e32:	82 e4       	ldi	r24, 0x42	; 66
    2e34:	93 e0       	ldi	r25, 0x03	; 3
    2e36:	6c e2       	ldi	r22, 0x2C	; 44
    2e38:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
		Serial.print(TempFiltSlow[3]);
    2e3c:	ca 5b       	subi	r28, 0xBA	; 186
    2e3e:	df 4f       	sbci	r29, 0xFF	; 255
    2e40:	48 81       	ld	r20, Y
    2e42:	59 81       	ldd	r21, Y+1	; 0x01
    2e44:	6a 81       	ldd	r22, Y+2	; 0x02
    2e46:	7b 81       	ldd	r23, Y+3	; 0x03
    2e48:	c6 54       	subi	r28, 0x46	; 70
    2e4a:	d0 40       	sbci	r29, 0x00	; 0
    2e4c:	82 e4       	ldi	r24, 0x42	; 66
    2e4e:	93 e0       	ldi	r25, 0x03	; 3
    2e50:	22 e0       	ldi	r18, 0x02	; 2
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(',');
    2e58:	82 e4       	ldi	r24, 0x42	; 66
    2e5a:	93 e0       	ldi	r25, 0x03	; 3
    2e5c:	6c e2       	ldi	r22, 0x2C	; 44
    2e5e:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>
	}
	if((_timer % 60000) == 0){
    2e62:	8e 01       	movw	r16, r28
    2e64:	04 5b       	subi	r16, 0xB4	; 180
    2e66:	1f 4f       	sbci	r17, 0xFF	; 255
    2e68:	f8 01       	movw	r30, r16
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e6       	ldi	r18, 0x60	; 96
    2e74:	3a ee       	ldi	r19, 0xEA	; 234
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    2e7e:	61 15       	cp	r22, r1
    2e80:	71 05       	cpc	r23, r1
    2e82:	81 05       	cpc	r24, r1
    2e84:	91 05       	cpc	r25, r1
    2e86:	41 f4       	brne	.+16     	; 0x2e98 <_ZN20FridgeTempController11UpdateTimerEv+0x108>
//		Serial.println("Updating Fridge Slope");
		updateSlope();
    2e88:	ce 01       	movw	r24, r28
    2e8a:	0e 94 a6 14 	call	0x294c	; 0x294c <_ZN20FridgeTempController11updateSlopeEv>
		_timer = 0;
    2e8e:	f8 01       	movw	r30, r16
    2e90:	10 82       	st	Z, r1
    2e92:	11 82       	std	Z+1, r1	; 0x01
    2e94:	12 82       	std	Z+2, r1	; 0x02
    2e96:	13 82       	std	Z+3, r1	; 0x03
	}
//	Serial.print("Fridge After ");
//	Serial.println(_timer);
}
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	08 95       	ret

00002ea2 <_ZN20FridgeTempControllerD0Ev>:
	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
	}
}

FridgeTempController::~FridgeTempController() {
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	80 e2       	ldi	r24, 0x20	; 32
    2ea6:	92 e0       	ldi	r25, 0x02	; 2
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    2eac:	cf 01       	movw	r24, r30
    2eae:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZdlPv>
    2eb2:	08 95       	ret

00002eb4 <_ZN20FridgeTempControllerC1Ev>:
 */

#include "FridgeTempController.h"
#include "TCLExample.h"

FridgeTempController::FridgeTempController() {
    2eb4:	0f 93       	push	r16
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	ec 01       	movw	r28, r24
    2ebe:	80 e2       	ldi	r24, 0x20	; 32
    2ec0:	92 e0       	ldi	r25, 0x02	; 2
    2ec2:	99 83       	std	Y+1, r25	; 0x01
    2ec4:	88 83       	st	Y, r24
	_timer = 0;
    2ec6:	c4 5b       	subi	r28, 0xB4	; 180
    2ec8:	df 4f       	sbci	r29, 0xFF	; 255
    2eca:	18 82       	st	Y, r1
    2ecc:	19 82       	std	Y+1, r1	; 0x01
    2ece:	1a 82       	std	Y+2, r1	; 0x02
    2ed0:	1b 82       	std	Y+3, r1	; 0x03
    2ed2:	cc 54       	subi	r28, 0x4C	; 76
    2ed4:	d0 40       	sbci	r29, 0x00	; 0
	_Temp = new TempSensors("Fridge",0);
    2ed6:	86 e2       	ldi	r24, 0x26	; 38
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    2ede:	18 2f       	mov	r17, r24
    2ee0:	09 2f       	mov	r16, r25
    2ee2:	6f e3       	ldi	r22, 0x3F	; 63
    2ee4:	71 e0       	ldi	r23, 0x01	; 1
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 1e 23 	call	0x463c	; 0x463c <_ZN11TempSensorsC1EPKch>
    2eec:	fe 01       	movw	r30, r28
    2eee:	e6 5b       	subi	r30, 0xB6	; 182
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	10 83       	st	Z, r17
    2ef4:	01 83       	std	Z+1, r16	; 0x01

	_Temp->_lastTempRequest = 0;
    2ef6:	10 92 b9 02 	sts	0x02B9, r1
    2efa:	10 92 b8 02 	sts	0x02B8, r1

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	aa e7       	ldi	r26, 0x7A	; 122
    2f04:	b3 e4       	ldi	r27, 0x43	; 67
    2f06:	8e 83       	std	Y+6, r24	; 0x06
    2f08:	9f 83       	std	Y+7, r25	; 0x07
    2f0a:	a8 87       	std	Y+8, r26	; 0x08
    2f0c:	b9 87       	std	Y+9, r27	; 0x09
	TemperatureActual = _Temp->GetTemperature();
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	0e 94 03 23 	call	0x4606	; 0x4606 <_ZN11TempSensors14GetTemperatureEv>
    2f16:	6a 83       	std	Y+2, r22	; 0x02
    2f18:	7b 83       	std	Y+3, r23	; 0x03
    2f1a:	8c 83       	std	Y+4, r24	; 0x04
    2f1c:	9d 83       	std	Y+5, r25	; 0x05
    2f1e:	fe 01       	movw	r30, r28
	for (int i = 0; i < 4; i++) {
    2f20:	9e 01       	movw	r18, r28
    2f22:	20 5f       	subi	r18, 0xF0	; 240
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
		TempFast[i] = TemperatureActual;
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2a:	ac 81       	ldd	r26, Y+4	; 0x04
    2f2c:	bd 81       	ldd	r27, Y+5	; 0x05
    2f2e:	82 87       	std	Z+10, r24	; 0x0a
    2f30:	93 87       	std	Z+11, r25	; 0x0b
    2f32:	a4 87       	std	Z+12, r26	; 0x0c
    2f34:	b5 87       	std	Z+13, r27	; 0x0d
		TempFiltFast[i] = TemperatureActual;
    2f36:	82 8f       	std	Z+26, r24	; 0x1a
    2f38:	93 8f       	std	Z+27, r25	; 0x1b
    2f3a:	a4 8f       	std	Z+28, r26	; 0x1c
    2f3c:	b5 8f       	std	Z+29, r27	; 0x1d
    2f3e:	34 96       	adiw	r30, 0x04	; 4

	_Temp->_lastTempRequest = 0;

	TemperatureSetting = STARTUP_TEMP_DEFAULT;
	TemperatureActual = _Temp->GetTemperature();
	for (int i = 0; i < 4; i++) {
    2f40:	e2 17       	cp	r30, r18
    2f42:	f3 07       	cpc	r31, r19
    2f44:	81 f7       	brne	.-32     	; 0x2f26 <_ZN20FridgeTempControllerC1Ev+0x72>
    2f46:	fe 01       	movw	r30, r28
    2f48:	ba 96       	adiw	r30, 0x2a	; 42
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2f4a:	9e 01       	movw	r18, r28
    2f4c:	26 5c       	subi	r18, 0xC6	; 198
    2f4e:	3f 4f       	sbci	r19, 0xFF	; 255
		TempSlow[i] = TempFiltFast[3];
    2f50:	8e a1       	ldd	r24, Y+38	; 0x26
    2f52:	9f a1       	ldd	r25, Y+39	; 0x27
    2f54:	a8 a5       	ldd	r26, Y+40	; 0x28
    2f56:	b9 a5       	ldd	r27, Y+41	; 0x29
    2f58:	80 83       	st	Z, r24
    2f5a:	91 83       	std	Z+1, r25	; 0x01
    2f5c:	a2 83       	std	Z+2, r26	; 0x02
    2f5e:	b3 83       	std	Z+3, r27	; 0x03
		TempFiltSlow[i] = TempFiltFast[3];
    2f60:	80 8b       	std	Z+16, r24	; 0x10
    2f62:	91 8b       	std	Z+17, r25	; 0x11
    2f64:	a2 8b       	std	Z+18, r26	; 0x12
    2f66:	b3 8b       	std	Z+19, r27	; 0x13
    2f68:	34 96       	adiw	r30, 0x04	; 4
	for (int i = 0; i < 4; i++) {
		TempFast[i] = TemperatureActual;
		TempFiltFast[i] = TemperatureActual;
	}
//		updateTemperatures();
	for (int i = 0; i < 4; i++) {
    2f6a:	e2 17       	cp	r30, r18
    2f6c:	f3 07       	cpc	r31, r19
    2f6e:	81 f7       	brne	.-32     	; 0x2f50 <_ZN20FridgeTempControllerC1Ev+0x9c>
		TempSlow[i] = TempFiltFast[3];
		TempFiltSlow[i] = TempFiltFast[3];
	}
		updateSlowFilteredTemperatures();
    2f70:	ce 01       	movw	r24, r28
    2f72:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <_ZN20FridgeTempController30updateSlowFilteredTemperaturesEv>

	Slope = 0;
    2f76:	c0 5b       	subi	r28, 0xB0	; 176
    2f78:	df 4f       	sbci	r29, 0xFF	; 255
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	88 83       	st	Y, r24
    2f84:	99 83       	std	Y+1, r25	; 0x01
    2f86:	aa 83       	std	Y+2, r26	; 0x02
    2f88:	bb 83       	std	Y+3, r27	; 0x03
    2f8a:	c0 55       	subi	r28, 0x50	; 80
    2f8c:	d0 40       	sbci	r29, 0x00	; 0
	TempHistoryIndex = 0;
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e4 53       	subi	r30, 0x34	; 52
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	10 82       	st	Z, r1
    2f96:	9e 01       	movw	r18, r28
    2f98:	2c 5a       	subi	r18, 0xAC	; 172
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255

	for (int i = 0; i < 30; i++) {
		TempHistory[i] = TempFiltSlow[3];
    2f9c:	ca 5b       	subi	r28, 0xBA	; 186
    2f9e:	df 4f       	sbci	r29, 0xFF	; 255
		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    2fa0:	af 01       	movw	r20, r30
		TempHistory[i] = TempFiltSlow[3];
    2fa2:	88 81       	ld	r24, Y
    2fa4:	99 81       	ldd	r25, Y+1	; 0x01
    2fa6:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa8:	bb 81       	ldd	r27, Y+3	; 0x03
    2faa:	f9 01       	movw	r30, r18
    2fac:	81 93       	st	Z+, r24
    2fae:	91 93       	st	Z+, r25
    2fb0:	a1 93       	st	Z+, r26
    2fb2:	b1 93       	st	Z+, r27
    2fb4:	9f 01       	movw	r18, r30
		updateSlowFilteredTemperatures();

	Slope = 0;
	TempHistoryIndex = 0;

	for (int i = 0; i < 30; i++) {
    2fb6:	e4 17       	cp	r30, r20
    2fb8:	f5 07       	cpc	r31, r21
    2fba:	99 f7       	brne	.-26     	; 0x2fa2 <_ZN20FridgeTempControllerC1Ev+0xee>
		TempHistory[i] = TempFiltSlow[3];
	}
}
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <_ZN5Relay8SetStateEb>:
Relay::~Relay() {
	// TODO Auto-generated destructor stub
}

//Returns false if it does NOT perform a state change
bool Relay::SetState(bool newState){
    2fc6:	fc 01       	movw	r30, r24
	if(_state == newState)
    2fc8:	81 81       	ldd	r24, Z+1	; 0x01
    2fca:	86 17       	cp	r24, r22
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <_ZN5Relay8SetStateEb+0xc>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	08 95       	ret
		return false;
	else if(newState){
    2fd2:	66 23       	and	r22, r22
    2fd4:	41 f0       	breq	.+16     	; 0x2fe6 <_ZN5Relay8SetStateEb+0x20>
		_state = true;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	81 83       	std	Z+1, r24	; 0x01
		digitalWrite(_pin, LOW);
    2fda:	80 81       	ld	r24, Z
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	08 95       	ret
		return true;
	}
	else if(!newState){
		_state = false;
    2fe6:	11 82       	std	Z+1, r1	; 0x01
		digitalWrite(_pin, HIGH);
    2fe8:	80 81       	ld	r24, Z
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
	return false;
}
    2ff2:	08 95       	ret

00002ff4 <_ZN5RelayC1Ehb>:
 *      Author: sfeltner
 */

#include "Relay.h"

Relay::Relay(uint8_t pin, bool startState) {
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	ec 01       	movw	r28, r24
    2ffc:	86 2f       	mov	r24, r22
    2ffe:	14 2f       	mov	r17, r20

	_pin = pin;
    3000:	68 83       	st	Y, r22
	_state = startState;
    3002:	49 83       	std	Y+1, r20	; 0x01

	pinMode(_pin, OUTPUT);
    3004:	61 e0       	ldi	r22, 0x01	; 1
    3006:	0e 94 ac 28 	call	0x5158	; 0x5158 <pinMode>
	if(startState)
    300a:	11 23       	and	r17, r17
    300c:	19 f0       	breq	.+6      	; 0x3014 <_ZN5RelayC1Ehb+0x20>
		digitalWrite(_pin, LOW);
    300e:	88 81       	ld	r24, Y
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <_ZN5RelayC1Ehb+0x24>
	else
		digitalWrite(_pin, HIGH);
    3014:	88 81       	ld	r24, Y
    3016:	61 e0       	ldi	r22, 0x01	; 1
    3018:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <digitalWrite>

}
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	1f 91       	pop	r17
    3022:	08 95       	ret

00003024 <_ZN8SettingsC1Ev>:


#include <EEPROM.h>
#include "Settings.h"

Settings::Settings() {
    3024:	fc 01       	movw	r30, r24
    3026:	88 e2       	ldi	r24, 0x28	; 40
    3028:	92 e0       	ldi	r25, 0x02	; 2
    302a:	91 83       	std	Z+1, r25	; 0x01
    302c:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub

}
    302e:	08 95       	ret

00003030 <_ZN8SettingsD1Ev>:

Settings::~Settings() {
    3030:	fc 01       	movw	r30, r24
    3032:	88 e2       	ldi	r24, 0x28	; 40
    3034:	92 e0       	ldi	r25, 0x02	; 2
    3036:	91 83       	std	Z+1, r25	; 0x01
    3038:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    303a:	08 95       	ret

0000303c <_ZN8Settings4SaveEv>:
//     _writeFloat(EEPROM_HEAT_ESTIMATOR, heatOvershootEstimator);
//  }
//  if(coolOvershootEstimator != _readFloat(EEPROM_COOL_ESTIMATOR)){
//     _writeFloat(EEPROM_COOL_ESTIMATOR, coolOvershootEstimator);
//  }
}
    303c:	08 95       	ret

0000303e <_ZN8SettingsD0Ev>:
Settings::Settings() {
	// TODO Auto-generated constructor stub

}

Settings::~Settings() {
    303e:	fc 01       	movw	r30, r24
    3040:	88 e2       	ldi	r24, 0x28	; 40
    3042:	92 e0       	ldi	r25, 0x02	; 2
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    3048:	cf 01       	movw	r24, r30
    304a:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZdlPv>
    304e:	08 95       	ret

00003050 <timerISR>:
	MsTimer2::start();
}

void timerISR(){
//	Serial.print('.');
	Services |= CLK_SERVICE;			// service Clock once a second
    3050:	80 91 7e 02 	lds	r24, 0x027E
    3054:	88 60       	ori	r24, 0x08	; 8
    3056:	80 93 7e 02 	sts	0x027E, r24
//	Serial.print('`');
}
    305a:	08 95       	ret

0000305c <_Z41__static_initialization_and_destruction_0ii>:
	if(Serial.available()){
		processSyncMessage();
	}


}
    305c:	af 92       	push	r10
    305e:	cf 92       	push	r12
    3060:	ef 92       	push	r14
    3062:	0f 93       	push	r16
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	91 05       	cpc	r25, r1
    3068:	09 f5       	brne	.+66     	; 0x30ac <_Z41__static_initialization_and_destruction_0ii+0x50>
    306a:	6f 5f       	subi	r22, 0xFF	; 255
    306c:	7f 4f       	sbci	r23, 0xFF	; 255
    306e:	79 f5       	brne	.+94     	; 0x30ce <_Z41__static_initialization_and_destruction_0ii+0x72>

#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
    3070:	8c e6       	ldi	r24, 0x6C	; 108
    3072:	92 e0       	ldi	r25, 0x02	; 2
    3074:	63 e1       	ldi	r22, 0x13	; 19
    3076:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN6ButtonC1Eh>
Button buttonUp(BUTTONUP_PIN);
    307a:	82 e7       	ldi	r24, 0x72	; 114
    307c:	92 e0       	ldi	r25, 0x02	; 2
    307e:	65 e1       	ldi	r22, 0x15	; 21
    3080:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN6ButtonC1Eh>
Button buttonDown(BUTTONDOWN_PIN);
    3084:	88 e7       	ldi	r24, 0x78	; 120
    3086:	92 e0       	ldi	r25, 0x02	; 2
    3088:	64 e1       	ldi	r22, 0x14	; 20
    308a:	0e 94 03 12 	call	0x2406	; 0x2406 <_ZN6ButtonC1Eh>
byte updateTemperatures_Interval = 0;
byte updateSlowFilteredTemperatures_Interval = 0;
byte updateSlope_Interval = 0;

// init the OLED
OLEDFourBit lcd(3, 4, 5, 6, 7, 8, 9);
    308e:	8f e7       	ldi	r24, 0x7F	; 127
    3090:	92 e0       	ldi	r25, 0x02	; 2
    3092:	63 e0       	ldi	r22, 0x03	; 3
    3094:	44 e0       	ldi	r20, 0x04	; 4
    3096:	25 e0       	ldi	r18, 0x05	; 5
    3098:	06 e0       	ldi	r16, 0x06	; 6
    309a:	77 e0       	ldi	r23, 0x07	; 7
    309c:	e7 2e       	mov	r14, r23
    309e:	58 e0       	ldi	r21, 0x08	; 8
    30a0:	c5 2e       	mov	r12, r21
    30a2:	39 e0       	ldi	r19, 0x09	; 9
    30a4:	a3 2e       	mov	r10, r19
    30a6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <_ZN11OLEDFourBitC1Ehhhhhhh>
    30aa:	11 c0       	rjmp	.+34     	; 0x30ce <_Z41__static_initialization_and_destruction_0ii+0x72>
    30ac:	89 2b       	or	r24, r25
    30ae:	79 f4       	brne	.+30     	; 0x30ce <_Z41__static_initialization_and_destruction_0ii+0x72>
    30b0:	6f 5f       	subi	r22, 0xFF	; 255
    30b2:	7f 4f       	sbci	r23, 0xFF	; 255
    30b4:	61 f4       	brne	.+24     	; 0x30ce <_Z41__static_initialization_and_destruction_0ii+0x72>
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
Button buttonUp(BUTTONUP_PIN);
Button buttonDown(BUTTONDOWN_PIN);
    30b6:	88 e7       	ldi	r24, 0x78	; 120
    30b8:	92 e0       	ldi	r25, 0x02	; 2
    30ba:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN6ButtonD1Ev>
#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
Button buttonUp(BUTTONUP_PIN);
    30be:	82 e7       	ldi	r24, 0x72	; 114
    30c0:	92 e0       	ldi	r25, 0x02	; 2
    30c2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN6ButtonD1Ev>

#define BUTTONMENU_PIN A5
#define BUTTONDOWN_PIN A6  // 13
#define BUTTONUP_PIN   A7  // 10

Button buttonMenu(BUTTONMENU_PIN);
    30c6:	8c e6       	ldi	r24, 0x6C	; 108
    30c8:	92 e0       	ldi	r25, 0x02	; 2
    30ca:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <_ZN6ButtonD1Ev>
	if(Serial.available()){
		processSyncMessage();
	}


}
    30ce:	0f 91       	pop	r16
    30d0:	ef 90       	pop	r14
    30d2:	cf 90       	pop	r12
    30d4:	af 90       	pop	r10
    30d6:	08 95       	ret

000030d8 <_GLOBAL__D_DHT>:
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	6f ef       	ldi	r22, 0xFF	; 255
    30de:	7f ef       	ldi	r23, 0xFF	; 255
    30e0:	0e 94 2e 18 	call	0x305c	; 0x305c <_Z41__static_initialization_and_destruction_0ii>
    30e4:	08 95       	ret

000030e6 <_GLOBAL__I_DHT>:
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	6f ef       	ldi	r22, 0xFF	; 255
    30ec:	7f ef       	ldi	r23, 0xFF	; 255
    30ee:	0e 94 2e 18 	call	0x305c	; 0x305c <_Z41__static_initialization_and_destruction_0ii>
    30f2:	08 95       	ret

000030f4 <loop>:
//	Serial.print('.');
	Services |= CLK_SERVICE;			// service Clock once a second
//	Serial.print('`');
}

void loop(void)
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17

//	if (Services & CLK_SERVICE){
//		CLKControl();
//	}

	if (buttonUp.IsPressed()){
    30f8:	82 e7       	ldi	r24, 0x72	; 114
    30fa:	92 e0       	ldi	r25, 0x02	; 2
    30fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN6Button9IsPressedEv>
    3100:	88 23       	and	r24, r24
    3102:	69 f0       	breq	.+26     	; 0x311e <loop+0x2a>
		Serial.println("UP Button Pressed ");
    3104:	82 e4       	ldi	r24, 0x42	; 66
    3106:	93 e0       	ldi	r25, 0x03	; 3
    3108:	66 e4       	ldi	r22, 0x46	; 70
    310a:	71 e0       	ldi	r23, 0x01	; 1
    310c:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN5Print7printlnEPKc>
//		if (menuFlag){
			tempControl->SetCurrentTempSetting(1);
    3110:	80 91 91 02 	lds	r24, 0x0291
    3114:	90 91 92 02 	lds	r25, 0x0292
    3118:	61 e0       	ldi	r22, 0x01	; 1
    311a:	0e 94 e5 21 	call	0x43ca	; 0x43ca <_ZN11TempControl21SetCurrentTempSettingEc>
//		}
	}

	if (buttonDown.IsPressed()){
    311e:	88 e7       	ldi	r24, 0x78	; 120
    3120:	92 e0       	ldi	r25, 0x02	; 2
    3122:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN6Button9IsPressedEv>
    3126:	88 23       	and	r24, r24
    3128:	69 f0       	breq	.+26     	; 0x3144 <loop+0x50>
		Serial.println("DOWN Button Pressed ");
    312a:	82 e4       	ldi	r24, 0x42	; 66
    312c:	93 e0       	ldi	r25, 0x03	; 3
    312e:	69 e5       	ldi	r22, 0x59	; 89
    3130:	71 e0       	ldi	r23, 0x01	; 1
    3132:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN5Print7printlnEPKc>
//		if (menuFlag){
			tempControl->SetCurrentTempSetting(-1);
    3136:	80 91 91 02 	lds	r24, 0x0291
    313a:	90 91 92 02 	lds	r25, 0x0292
    313e:	6f ef       	ldi	r22, 0xFF	; 255
    3140:	0e 94 e5 21 	call	0x43ca	; 0x43ca <_ZN11TempControl21SetCurrentTempSettingEc>
//		}
	}

	if (buttonMenu.IsPressed()){
    3144:	8c e6       	ldi	r24, 0x6C	; 108
    3146:	92 e0       	ldi	r25, 0x02	; 2
    3148:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <_ZN6Button9IsPressedEv>
    314c:	88 23       	and	r24, r24
    314e:	89 f0       	breq	.+34     	; 0x3172 <loop+0x7e>
		menuTemp = (byte)menuFlag + 1;
    3150:	60 91 95 02 	lds	r22, 0x0295
    3154:	6f 5f       	subi	r22, 0xFF	; 255
		if (menuTemp > TempControl::modes_LAST){
    3156:	63 30       	cpi	r22, 0x03	; 3
    3158:	08 f0       	brcs	.+2      	; 0x315c <loop+0x68>
    315a:	60 e0       	ldi	r22, 0x00	; 0
			menuTemp = TempControl::modes_FIRST;
		}
		menuFlag = (TempControl::modes_t)menuTemp;
    315c:	60 93 95 02 	sts	0x0295, r22
    3160:	10 92 96 02 	sts	0x0296, r1
		tempControl->SetMode(menuFlag);
    3164:	80 91 91 02 	lds	r24, 0x0291
    3168:	90 91 92 02 	lds	r25, 0x0292
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	0e 94 7f 19 	call	0x32fe	; 0x32fe <_ZN11TempControl7SetModeENS_7modes_tE>
////			lcd.setCursor(10,1);
////			lcd.print(modeStrDest);
//		}
	}

	tempControl->UpdateTimers();
    3172:	80 91 91 02 	lds	r24, 0x0291
    3176:	90 91 92 02 	lds	r25, 0x0292
    317a:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN11TempControl12UpdateTimersEv>
	Services &= ~CLK_SERVICE;
    317e:	80 91 7e 02 	lds	r24, 0x027E
    3182:	87 7f       	andi	r24, 0xF7	; 247
    3184:	80 93 7e 02 	sts	0x027E, r24

	//redraw the LCD display
	display->LiquidTemp = tempControl->GetBeerTemp();
    3188:	00 91 93 02 	lds	r16, 0x0293
    318c:	10 91 94 02 	lds	r17, 0x0294
    3190:	80 91 91 02 	lds	r24, 0x0291
    3194:	90 91 92 02 	lds	r25, 0x0292
    3198:	0e 94 76 1d 	call	0x3aec	; 0x3aec <_ZN11TempControl11GetBeerTempEv>
    319c:	f8 01       	movw	r30, r16
    319e:	66 83       	std	Z+6, r22	; 0x06
    31a0:	77 83       	std	Z+7, r23	; 0x07
    31a2:	80 87       	std	Z+8, r24	; 0x08
    31a4:	91 87       	std	Z+9, r25	; 0x09
	display->AtmosphereTemp = tempControl->GetFridgeTemp();
    31a6:	00 91 93 02 	lds	r16, 0x0293
    31aa:	10 91 94 02 	lds	r17, 0x0294
    31ae:	80 91 91 02 	lds	r24, 0x0291
    31b2:	90 91 92 02 	lds	r25, 0x0292
    31b6:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <_ZN11TempControl13GetFridgeTempEv>
    31ba:	f8 01       	movw	r30, r16
    31bc:	62 83       	std	Z+2, r22	; 0x02
    31be:	73 83       	std	Z+3, r23	; 0x03
    31c0:	84 83       	std	Z+4, r24	; 0x04
    31c2:	95 83       	std	Z+5, r25	; 0x05
	display->TargetTemp = tempControl->GetCurrentTempSetting();
    31c4:	00 91 93 02 	lds	r16, 0x0293
    31c8:	10 91 94 02 	lds	r17, 0x0294
    31cc:	80 91 91 02 	lds	r24, 0x0291
    31d0:	90 91 92 02 	lds	r25, 0x0292
    31d4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <_ZN11TempControl21GetCurrentTempSettingEv>
    31d8:	f8 01       	movw	r30, r16
    31da:	66 87       	std	Z+14, r22	; 0x0e
    31dc:	77 87       	std	Z+15, r23	; 0x0f
    31de:	80 8b       	std	Z+16, r24	; 0x10
    31e0:	91 8b       	std	Z+17, r25	; 0x11
	display->SetMode(tempControl->GetModeStr());
    31e2:	00 91 93 02 	lds	r16, 0x0293
    31e6:	10 91 94 02 	lds	r17, 0x0294
    31ea:	80 91 91 02 	lds	r24, 0x0291
    31ee:	90 91 92 02 	lds	r25, 0x0292
    31f2:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN11TempControl10GetModeStrEv>
    31f6:	bc 01       	movw	r22, r24
    31f8:	c8 01       	movw	r24, r16
    31fa:	0e 94 26 13 	call	0x264c	; 0x264c <_ZN7Display7SetModeEPKc>
	display->SetState(tempControl->GetStateStr());
    31fe:	00 91 93 02 	lds	r16, 0x0293
    3202:	10 91 94 02 	lds	r17, 0x0294
    3206:	80 91 91 02 	lds	r24, 0x0291
    320a:	90 91 92 02 	lds	r25, 0x0292
    320e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN11TempControl11GetStateStrEv>
    3212:	bc 01       	movw	r22, r24
    3214:	c8 01       	movw	r24, r16
    3216:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <_ZN7Display8SetStateEPKc>
	display->Draw();
    321a:	80 91 93 02 	lds	r24, 0x0293
    321e:	90 91 94 02 	lds	r25, 0x0294
    3222:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZN7Display4DrawEv>

	if(Serial.available()){
    3226:	82 e4       	ldi	r24, 0x42	; 66
    3228:	93 e0       	ldi	r25, 0x03	; 3
    322a:	0e 94 7e 24 	call	0x48fc	; 0x48fc <_ZN14HardwareSerial9availableEv>
    322e:	89 2b       	or	r24, r25
    3230:	11 f0       	breq	.+4      	; 0x3236 <loop+0x142>
		processSyncMessage();
    3232:	0e 94 0f 12 	call	0x241e	; 0x241e <_Z18processSyncMessagev>
	}


}
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <setup>:
OLEDFourBit lcd(3, 4, 5, 6, 7, 8, 9);

TempControl *tempControl;
Display *display;

void setup(void)
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
{
	// start serial port
	Serial.begin(9600);
    3240:	02 e4       	ldi	r16, 0x42	; 66
    3242:	13 e0       	ldi	r17, 0x03	; 3
    3244:	c8 01       	movw	r24, r16
    3246:	40 e8       	ldi	r20, 0x80	; 128
    3248:	55 e2       	ldi	r21, 0x25	; 37
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <_ZN14HardwareSerial5beginEm>

	// analog pins are input by default - for the buttons - move to class?
	analogReference(2); //set analog reference to internal 1.1V
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	0e 94 87 28 	call	0x510e	; 0x510e <analogReference>
	delay(100);
    3258:	64 e6       	ldi	r22, 0x64	; 100
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <delay>

	Serial.println("BEER TEST PROGRAM ");
    3264:	c8 01       	movw	r24, r16
    3266:	6e e6       	ldi	r22, 0x6E	; 110
    3268:	71 e0       	ldi	r23, 0x01	; 1
    326a:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <_ZN5Print7printlnEPKc>
	Serial.println();
    326e:	c8 01       	movw	r24, r16
    3270:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN5Print7printlnEv>

	tempControl = new TempControl();
    3274:	80 e6       	ldi	r24, 0x60	; 96
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    327c:	18 2f       	mov	r17, r24
    327e:	09 2f       	mov	r16, r25
    3280:	0e 94 3b 22 	call	0x4476	; 0x4476 <_ZN11TempControlC1Ev>
    3284:	10 93 91 02 	sts	0x0291, r17
    3288:	00 93 92 02 	sts	0x0292, r16

	lcd.begin(20, 4);
    328c:	0f e7       	ldi	r16, 0x7F	; 127
    328e:	12 e0       	ldi	r17, 0x02	; 2
    3290:	c8 01       	movw	r24, r16
    3292:	64 e1       	ldi	r22, 0x14	; 20
    3294:	44 e0       	ldi	r20, 0x04	; 4
    3296:	0e 94 cc 0c 	call	0x1998	; 0x1998 <_ZN11OLEDFourBit5beginEhh>
	lcd.clear();
    329a:	c8 01       	movw	r24, r16
    329c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN11OLEDFourBit5clearEv>
	lcd.home();
    32a0:	c8 01       	movw	r24, r16
    32a2:	0e 94 c4 0c 	call	0x1988	; 0x1988 <_ZN11OLEDFourBit4homeEv>

	lcd.setCursor(0,0);
    32a6:	c8 01       	movw	r24, r16
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	0e 94 a0 0c 	call	0x1940	; 0x1940 <_ZN11OLEDFourBit9setCursorEhh>
	lcd.print("DHT-DS TEST PROGRAM ");
    32b0:	c8 01       	movw	r24, r16
    32b2:	61 e8       	ldi	r22, 0x81	; 129
    32b4:	71 e0       	ldi	r23, 0x01	; 1
    32b6:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>

	lcd.display();		// Make sure the display is turned on!
    32ba:	c8 01       	movw	r24, r16
    32bc:	0e 94 96 0c 	call	0x192c	; 0x192c <_ZN11OLEDFourBit7displayEv>

	display = new Display();
    32c0:	8a e2       	ldi	r24, 0x2A	; 42
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    32c8:	18 2f       	mov	r17, r24
    32ca:	09 2f       	mov	r16, r25
    32cc:	0e 94 4e 14 	call	0x289c	; 0x289c <_ZN7DisplayC1Ev>
    32d0:	10 93 93 02 	sts	0x0293, r17
    32d4:	00 93 94 02 	sts	0x0294, r16

	// fire up the timer interrupt!
	MsTimer2::set(CLOCK_RESOLUTION_MS, timerISR);
    32d8:	68 ec       	ldi	r22, 0xC8	; 200
    32da:	70 e0       	ldi	r23, 0x00	; 0
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	48 e2       	ldi	r20, 0x28	; 40
    32e2:	58 e1       	ldi	r21, 0x18	; 24
    32e4:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <_ZN8MsTimer23setEmPFvvE>
	MsTimer2::start();
    32e8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN8MsTimer25startEv>
}
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	08 95       	ret

000032f2 <_ZN11TempControlD1Ev>:
	_coolOvershootEstimator = 5;

	_timer        = 0;
}

TempControl::~TempControl() {
    32f2:	fc 01       	movw	r30, r24
    32f4:	80 e3       	ldi	r24, 0x30	; 48
    32f6:	92 e0       	ldi	r25, 0x02	; 2
    32f8:	91 83       	std	Z+1, r25	; 0x01
    32fa:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    32fc:	08 95       	ret

000032fe <_ZN11TempControl7SetModeENS_7modes_tE>:
	_currentStateString[len] = '\0';
	return _currentStateString;
}

void TempControl::SetMode(modes_t newMode){
	_mode = newMode;
    32fe:	fc 01       	movw	r30, r24
    3300:	75 8b       	std	Z+21, r23	; 0x15
    3302:	64 8b       	std	Z+20, r22	; 0x14
}
    3304:	08 95       	ret

00003306 <_ZN11TempControl20InitializePIDControlEv>:
		timeSinceLastOn = (currentTime + 1440000) - (_lastIdleTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}

void TempControl::InitializePIDControl(void){
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	ec 01       	movw	r28, r24
	if(_beerTemp->GetTempSetting() < _beerTemp->TempFiltSlow[3]){
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    3314:	ea 81       	ldd	r30, Y+2	; 0x02
    3316:	fb 81       	ldd	r31, Y+3	; 0x03
    3318:	fe 96       	adiw	r30, 0x3e	; 62
    331a:	20 81       	ld	r18, Z
    331c:	31 81       	ldd	r19, Z+1	; 0x01
    331e:	42 81       	ldd	r20, Z+2	; 0x02
    3320:	53 81       	ldd	r21, Z+3	; 0x03
    3322:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3326:	88 23       	and	r24, r24
    3328:	6c f4       	brge	.+26     	; 0x3344 <_ZN11TempControl20InitializePIDControlEv+0x3e>
		_Kp=KpCool;
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 ea       	ldi	r26, 0xA0	; 160
    3330:	b0 e4       	ldi	r27, 0x40	; 64
    3332:	8e 8b       	std	Y+22, r24	; 0x16
    3334:	9f 8b       	std	Y+23, r25	; 0x17
    3336:	a8 8f       	std	Y+24, r26	; 0x18
    3338:	b9 8f       	std	Y+25, r27	; 0x19
		_Kd=KdCool;
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	a0 ea       	ldi	r26, 0xA0	; 160
    3340:	b0 ec       	ldi	r27, 0xC0	; 192
    3342:	0c c0       	rjmp	.+24     	; 0x335c <_ZN11TempControl20InitializePIDControlEv+0x56>
	}
	else{
		_Kp=KpHeat;
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	a0 e2       	ldi	r26, 0x20	; 32
    334a:	b1 e4       	ldi	r27, 0x41	; 65
    334c:	8e 8b       	std	Y+22, r24	; 0x16
    334e:	9f 8b       	std	Y+23, r25	; 0x17
    3350:	a8 8f       	std	Y+24, r26	; 0x18
    3352:	b9 8f       	std	Y+25, r27	; 0x19
		_Kd=KdHeat;
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	a0 e2       	ldi	r26, 0x20	; 32
    335a:	b1 ec       	ldi	r27, 0xC1	; 193
    335c:	8a 8f       	std	Y+26, r24	; 0x1a
    335e:	9b 8f       	std	Y+27, r25	; 0x1b
    3360:	ac 8f       	std	Y+28, r26	; 0x1c
    3362:	bd 8f       	std	Y+29, r27	; 0x1d
	}
}
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <_ZN11TempControl13timeSinceIdleEv>:
	}
	return timeSinceLastOn;
}


unsigned long TempControl::timeSinceIdle(void){
    336a:	0f 93       	push	r16
    336c:	1f 93       	push	r17
    336e:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    3370:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    3374:	9b 01       	movw	r18, r22
    3376:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastIdleTime){
    3378:	f8 01       	movw	r30, r16
    337a:	82 a5       	ldd	r24, Z+42	; 0x2a
    337c:	93 a5       	ldd	r25, Z+43	; 0x2b
    337e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3380:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3382:	28 1b       	sub	r18, r24
    3384:	39 0b       	sbc	r19, r25
    3386:	4a 0b       	sbc	r20, r26
    3388:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastIdleTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    338a:	b9 01       	movw	r22, r18
    338c:	ca 01       	movw	r24, r20
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	08 95       	ret

00003394 <_ZN11TempControl16timeSinceHeatingEv>:
	}
	return timeSinceLastOn;
}


unsigned long TempControl::timeSinceHeating(void){
    3394:	0f 93       	push	r16
    3396:	1f 93       	push	r17
    3398:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    339a:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    339e:	9b 01       	movw	r18, r22
    33a0:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastHeatTime){
    33a2:	f8 01       	movw	r30, r16
    33a4:	86 a1       	ldd	r24, Z+38	; 0x26
    33a6:	97 a1       	ldd	r25, Z+39	; 0x27
    33a8:	a0 a5       	ldd	r26, Z+40	; 0x28
    33aa:	b1 a5       	ldd	r27, Z+41	; 0x29
    33ac:	28 1b       	sub	r18, r24
    33ae:	39 0b       	sbc	r19, r25
    33b0:	4a 0b       	sbc	r20, r26
    33b2:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastHeatTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    33b4:	b9 01       	movw	r22, r18
    33b6:	ca 01       	movw	r24, r20
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	08 95       	ret

000033be <_ZN11TempControl16timeSinceCoolingEv>:


}


unsigned long TempControl::timeSinceCooling(void){
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	8c 01       	movw	r16, r24
	unsigned long currentTime = millis();
    33c4:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    33c8:	9b 01       	movw	r18, r22
    33ca:	ac 01       	movw	r20, r24
	unsigned long timeSinceLastOn;
	if(currentTime>=_lastCoolTime){
    33cc:	f8 01       	movw	r30, r16
    33ce:	82 a1       	ldd	r24, Z+34	; 0x22
    33d0:	93 a1       	ldd	r25, Z+35	; 0x23
    33d2:	a4 a1       	ldd	r26, Z+36	; 0x24
    33d4:	b5 a1       	ldd	r27, Z+37	; 0x25
    33d6:	28 1b       	sub	r18, r24
    33d8:	39 0b       	sbc	r19, r25
    33da:	4a 0b       	sbc	r20, r26
    33dc:	5b 0b       	sbc	r21, r27
	else{
		// millis() overflow has occured
		timeSinceLastOn = (currentTime + 1440000) - (_lastCoolTime +1440000); // add a day to both for calculation
	}
	return timeSinceLastOn;
}
    33de:	b9 01       	movw	r22, r18
    33e0:	ca 01       	movw	r24, r20
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <_ZN11TempControl11detectPeaksEv>:
float TempControl::_GetSettingForNegPeakEstimate()
{
	return _SettingForNegPeakEstimate;
}

void TempControl::detectPeaks(void){
    33e8:	4f 92       	push	r4
    33ea:	5f 92       	push	r5
    33ec:	6f 92       	push	r6
    33ee:	7f 92       	push	r7
    33f0:	8f 92       	push	r8
    33f2:	9f 92       	push	r9
    33f4:	af 92       	push	r10
    33f6:	bf 92       	push	r11
    33f8:	cf 92       	push	r12
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	8c 01       	movw	r16, r24
//	Serial.print(_fridgeTemp->TempFiltSlow[2]);
//	Serial.print("\tfridge->TempFiltSlow[3]");
//	Serial.println(_fridgeTemp->TempFiltSlow[3]);

	//detect peaks in fridge temperature to tune overshoot estimators
	if(_doPosPeakDetect &&_state!=HEATING){
    340a:	dc 01       	movw	r26, r24
    340c:	d3 96       	adiw	r26, 0x33	; 51
    340e:	8c 91       	ld	r24, X
    3410:	d3 97       	sbiw	r26, 0x33	; 51
    3412:	88 23       	and	r24, r24
    3414:	09 f4       	brne	.+2      	; 0x3418 <_ZN11TempControl11detectPeaksEv+0x30>
    3416:	33 c1       	rjmp	.+614    	; 0x367e <_ZN11TempControl11detectPeaksEv+0x296>
    3418:	52 96       	adiw	r26, 0x12	; 18
    341a:	8d 91       	ld	r24, X+
    341c:	9c 91       	ld	r25, X
    341e:	53 97       	sbiw	r26, 0x13	; 19
    3420:	02 97       	sbiw	r24, 0x02	; 2
    3422:	09 f4       	brne	.+2      	; 0x3426 <_ZN11TempControl11detectPeaksEv+0x3e>
    3424:	2c c1       	rjmp	.+600    	; 0x367e <_ZN11TempControl11detectPeaksEv+0x296>
		if(_fridgeTemp->TempFiltSlow[3] <=_fridgeTemp->TempFiltSlow[2] &&_fridgeTemp->TempFiltSlow[2] >=_fridgeTemp->TempFiltSlow[1]){ // maximum
    3426:	14 96       	adiw	r26, 0x04	; 4
    3428:	cd 91       	ld	r28, X+
    342a:	dc 91       	ld	r29, X
    342c:	15 97       	sbiw	r26, 0x05	; 5
    342e:	ce 5b       	subi	r28, 0xBE	; 190
    3430:	df 4f       	sbci	r29, 0xFF	; 255
    3432:	c8 80       	ld	r12, Y
    3434:	d9 80       	ldd	r13, Y+1	; 0x01
    3436:	ea 80       	ldd	r14, Y+2	; 0x02
    3438:	fb 80       	ldd	r15, Y+3	; 0x03
    343a:	c2 54       	subi	r28, 0x42	; 66
    343c:	d0 40       	sbci	r29, 0x00	; 0
    343e:	fe 01       	movw	r30, r28
    3440:	ea 5b       	subi	r30, 0xBA	; 186
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	60 81       	ld	r22, Z
    3446:	71 81       	ldd	r23, Z+1	; 0x01
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	93 81       	ldd	r25, Z+3	; 0x03
    344c:	a7 01       	movw	r20, r14
    344e:	96 01       	movw	r18, r12
    3450:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3454:	18 16       	cp	r1, r24
    3456:	0c f4       	brge	.+2      	; 0x345a <_ZN11TempControl11detectPeaksEv+0x72>
    3458:	94 c0       	rjmp	.+296    	; 0x3582 <_ZN11TempControl11detectPeaksEv+0x19a>
    345a:	ee 96       	adiw	r28, 0x3e	; 62
    345c:	c7 01       	movw	r24, r14
    345e:	b6 01       	movw	r22, r12
    3460:	28 81       	ld	r18, Y
    3462:	39 81       	ldd	r19, Y+1	; 0x01
    3464:	4a 81       	ldd	r20, Y+2	; 0x02
    3466:	5b 81       	ldd	r21, Y+3	; 0x03
    3468:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    346c:	88 23       	and	r24, r24
    346e:	0c f4       	brge	.+2      	; 0x3472 <_ZN11TempControl11detectPeaksEv+0x8a>
    3470:	88 c0       	rjmp	.+272    	; 0x3582 <_ZN11TempControl11detectPeaksEv+0x19a>
			_posPeak = _fridgeTemp->TempFiltSlow[2];
    3472:	f8 01       	movw	r30, r16
    3474:	c4 aa       	std	Z+52, r12	; 0x34
    3476:	d5 aa       	std	Z+53, r13	; 0x35
    3478:	e6 aa       	std	Z+54, r14	; 0x36
    347a:	f7 aa       	std	Z+55, r15	; 0x37
			if(_posPeak > _GetSettingForPosPeakEstimate() + HEATING_TARGET_UPPER){
    347c:	e0 5c       	subi	r30, 0xC0	; 192
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	60 81       	ld	r22, Z
    3482:	71 81       	ldd	r23, Z+1	; 0x01
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	93 81       	ldd	r25, Z+3	; 0x03
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	50 e4       	ldi	r21, 0x40	; 64
    3490:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3494:	4b 01       	movw	r8, r22
    3496:	5c 01       	movw	r10, r24
    3498:	c7 01       	movw	r24, r14
    349a:	b6 01       	movw	r22, r12
    349c:	a5 01       	movw	r20, r10
    349e:	94 01       	movw	r18, r8
    34a0:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    34a4:	18 16       	cp	r1, r24
    34a6:	0c f0       	brlt	.+2      	; 0x34aa <_ZN11TempControl11detectPeaksEv+0xc2>
    34a8:	42 c0       	rjmp	.+132    	; 0x352e <_ZN11TempControl11detectPeaksEv+0x146>
				//should not happen, estimated overshoot was too low, so adjust overshoot estimator
				_heatOvershootEstimator=_heatOvershootEstimator*(1.2+min((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_UPPER))*.03,0.3));
    34aa:	0c 5b       	subi	r16, 0xBC	; 188
    34ac:	1f 4f       	sbci	r17, 0xFF	; 255
    34ae:	d8 01       	movw	r26, r16
    34b0:	4d 90       	ld	r4, X+
    34b2:	5d 90       	ld	r5, X+
    34b4:	6d 90       	ld	r6, X+
    34b6:	7c 90       	ld	r7, X
    34b8:	04 54       	subi	r16, 0x44	; 68
    34ba:	10 40       	sbci	r17, 0x00	; 0
    34bc:	c7 01       	movw	r24, r14
    34be:	b6 01       	movw	r22, r12
    34c0:	a5 01       	movw	r20, r10
    34c2:	94 01       	movw	r18, r8
    34c4:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    34c8:	2f e8       	ldi	r18, 0x8F	; 143
    34ca:	32 ec       	ldi	r19, 0xC2	; 194
    34cc:	45 ef       	ldi	r20, 0xF5	; 245
    34ce:	5c e3       	ldi	r21, 0x3C	; 60
    34d0:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    34d4:	6b 01       	movw	r12, r22
    34d6:	7c 01       	movw	r14, r24
    34d8:	2a e9       	ldi	r18, 0x9A	; 154
    34da:	39 e9       	ldi	r19, 0x99	; 153
    34dc:	49 e9       	ldi	r20, 0x99	; 153
    34de:	5e e3       	ldi	r21, 0x3E	; 62
    34e0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    34e4:	87 fd       	sbrc	r24, 7
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <_ZN11TempControl11detectPeaksEv+0x10a>
    34e8:	20 e0       	ldi	r18, 0x00	; 0
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	40 ec       	ldi	r20, 0xC0	; 192
    34ee:	5f e3       	ldi	r21, 0x3F	; 63
    34f0:	0a c0       	rjmp	.+20     	; 0x3506 <_ZN11TempControl11detectPeaksEv+0x11e>
    34f2:	c7 01       	movw	r24, r14
    34f4:	b6 01       	movw	r22, r12
    34f6:	2a e9       	ldi	r18, 0x9A	; 154
    34f8:	39 e9       	ldi	r19, 0x99	; 153
    34fa:	49 e9       	ldi	r20, 0x99	; 153
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3502:	9b 01       	movw	r18, r22
    3504:	ac 01       	movw	r20, r24
    3506:	0c 5b       	subi	r16, 0xBC	; 188
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	c3 01       	movw	r24, r6
    350c:	b2 01       	movw	r22, r4
    350e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3512:	f8 01       	movw	r30, r16
    3514:	60 83       	st	Z, r22
    3516:	71 83       	std	Z+1, r23	; 0x01
    3518:	82 83       	std	Z+2, r24	; 0x02
    351a:	93 83       	std	Z+3, r25	; 0x03
    351c:	04 54       	subi	r16, 0x44	; 68
    351e:	10 40       	sbci	r17, 0x00	; 0
				_settings->Save();
    3520:	d8 01       	movw	r26, r16
    3522:	1a 96       	adiw	r26, 0x0a	; 10
    3524:	8d 91       	ld	r24, X+
    3526:	9c 91       	ld	r25, X
    3528:	1b 97       	sbiw	r26, 0x0b	; 11
    352a:	0e 94 1e 18 	call	0x303c	; 0x303c <_ZN8Settings4SaveEv>
			}
			if(_posPeak < _GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER){
    352e:	f8 01       	movw	r30, r16
    3530:	84 a8       	ldd	r8, Z+52	; 0x34
    3532:	95 a8       	ldd	r9, Z+53	; 0x35
    3534:	a6 a8       	ldd	r10, Z+54	; 0x36
    3536:	b7 a8       	ldd	r11, Z+55	; 0x37
    3538:	e0 5c       	subi	r30, 0xC0	; 192
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e8       	ldi	r20, 0x80	; 128
    354a:	5f e3       	ldi	r21, 0x3F	; 63
    354c:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3550:	6b 01       	movw	r12, r22
    3552:	7c 01       	movw	r14, r24
    3554:	c5 01       	movw	r24, r10
    3556:	b4 01       	movw	r22, r8
    3558:	a7 01       	movw	r20, r14
    355a:	96 01       	movw	r18, r12
    355c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3560:	88 23       	and	r24, r24
    3562:	0c f0       	brlt	.+2      	; 0x3566 <_ZN11TempControl11detectPeaksEv+0x17e>
    3564:	8a c0       	rjmp	.+276    	; 0x367a <_ZN11TempControl11detectPeaksEv+0x292>
				//should not happen, estimated overshoot was too high, so adjust overshoot estimator
				_heatOvershootEstimator=_heatOvershootEstimator*(0.8+max((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER))*.03,-0.3));
    3566:	0c 5b       	subi	r16, 0xBC	; 188
    3568:	1f 4f       	sbci	r17, 0xFF	; 255
    356a:	d8 01       	movw	r26, r16
    356c:	4d 90       	ld	r4, X+
    356e:	5d 90       	ld	r5, X+
    3570:	6d 90       	ld	r6, X+
    3572:	7c 90       	ld	r7, X
    3574:	04 54       	subi	r16, 0x44	; 68
    3576:	10 40       	sbci	r17, 0x00	; 0
    3578:	c5 01       	movw	r24, r10
    357a:	b4 01       	movw	r22, r8
    357c:	a7 01       	movw	r20, r14
    357e:	96 01       	movw	r18, r12
    3580:	47 c0       	rjmp	.+142    	; 0x3610 <_ZN11TempControl11detectPeaksEv+0x228>
				_settings->Save();
			}
			_doPosPeakDetect = false;
			// serialFridgeMessage(POSPEAK);
		}
		else if(timeSinceHeating() > 580000UL && timeSinceCooling() > 900000UL &&_fridgeTemp->TempFiltSlow[3] < _GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER){
    3582:	c8 01       	movw	r24, r16
    3584:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN11TempControl16timeSinceHeatingEv>
    3588:	61 5a       	subi	r22, 0xA1	; 161
    358a:	79 4d       	sbci	r23, 0xD9	; 217
    358c:	88 40       	sbci	r24, 0x08	; 8
    358e:	90 40       	sbci	r25, 0x00	; 0
    3590:	08 f4       	brcc	.+2      	; 0x3594 <_ZN11TempControl11detectPeaksEv+0x1ac>
    3592:	75 c0       	rjmp	.+234    	; 0x367e <_ZN11TempControl11detectPeaksEv+0x296>
    3594:	c8 01       	movw	r24, r16
    3596:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN11TempControl16timeSinceCoolingEv>
    359a:	61 5a       	subi	r22, 0xA1	; 161
    359c:	7b 4b       	sbci	r23, 0xBB	; 187
    359e:	8d 40       	sbci	r24, 0x0D	; 13
    35a0:	90 40       	sbci	r25, 0x00	; 0
    35a2:	08 f4       	brcc	.+2      	; 0x35a6 <_ZN11TempControl11detectPeaksEv+0x1be>
    35a4:	6c c0       	rjmp	.+216    	; 0x367e <_ZN11TempControl11detectPeaksEv+0x296>
    35a6:	d8 01       	movw	r26, r16
    35a8:	14 96       	adiw	r26, 0x04	; 4
    35aa:	ed 91       	ld	r30, X+
    35ac:	fc 91       	ld	r31, X
    35ae:	15 97       	sbiw	r26, 0x05	; 5
    35b0:	ea 5b       	subi	r30, 0xBA	; 186
    35b2:	ff 4f       	sbci	r31, 0xFF	; 255
    35b4:	c0 80       	ld	r12, Z
    35b6:	d1 80       	ldd	r13, Z+1	; 0x01
    35b8:	e2 80       	ldd	r14, Z+2	; 0x02
    35ba:	f3 80       	ldd	r15, Z+3	; 0x03
    35bc:	f8 01       	movw	r30, r16
    35be:	e0 5c       	subi	r30, 0xC0	; 192
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e8       	ldi	r20, 0x80	; 128
    35d0:	5f e3       	ldi	r21, 0x3F	; 63
    35d2:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    35d6:	4b 01       	movw	r8, r22
    35d8:	5c 01       	movw	r10, r24
    35da:	c7 01       	movw	r24, r14
    35dc:	b6 01       	movw	r22, r12
    35de:	a5 01       	movw	r20, r10
    35e0:	94 01       	movw	r18, r8
    35e2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    35e6:	88 23       	and	r24, r24
    35e8:	0c f0       	brlt	.+2      	; 0x35ec <_ZN11TempControl11detectPeaksEv+0x204>
    35ea:	49 c0       	rjmp	.+146    	; 0x367e <_ZN11TempControl11detectPeaksEv+0x296>
			//there was no peak, but the estimator is too low. This is the heat, then drift up situation.
			_posPeak = _fridgeTemp->TempFiltSlow[3];
    35ec:	f8 01       	movw	r30, r16
    35ee:	c4 aa       	std	Z+52, r12	; 0x34
    35f0:	d5 aa       	std	Z+53, r13	; 0x35
    35f2:	e6 aa       	std	Z+54, r14	; 0x36
    35f4:	f7 aa       	std	Z+55, r15	; 0x37
			_heatOvershootEstimator=_heatOvershootEstimator*(0.8+max((_posPeak-(_GetSettingForPosPeakEstimate() + HEATING_TARGET_LOWER))*.03,-0.3));
    35f6:	0c 5b       	subi	r16, 0xBC	; 188
    35f8:	1f 4f       	sbci	r17, 0xFF	; 255
    35fa:	d8 01       	movw	r26, r16
    35fc:	4d 90       	ld	r4, X+
    35fe:	5d 90       	ld	r5, X+
    3600:	6d 90       	ld	r6, X+
    3602:	7c 90       	ld	r7, X
    3604:	04 54       	subi	r16, 0x44	; 68
    3606:	10 40       	sbci	r17, 0x00	; 0
    3608:	c7 01       	movw	r24, r14
    360a:	b6 01       	movw	r22, r12
    360c:	a5 01       	movw	r20, r10
    360e:	94 01       	movw	r18, r8
    3610:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3614:	2f e8       	ldi	r18, 0x8F	; 143
    3616:	32 ec       	ldi	r19, 0xC2	; 194
    3618:	45 ef       	ldi	r20, 0xF5	; 245
    361a:	5c e3       	ldi	r21, 0x3C	; 60
    361c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3620:	6b 01       	movw	r12, r22
    3622:	7c 01       	movw	r14, r24
    3624:	2a e9       	ldi	r18, 0x9A	; 154
    3626:	39 e9       	ldi	r19, 0x99	; 153
    3628:	49 e9       	ldi	r20, 0x99	; 153
    362a:	5e eb       	ldi	r21, 0xBE	; 190
    362c:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3630:	18 16       	cp	r1, r24
    3632:	2c f0       	brlt	.+10     	; 0x363e <_ZN11TempControl11detectPeaksEv+0x256>
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0a c0       	rjmp	.+20     	; 0x3652 <_ZN11TempControl11detectPeaksEv+0x26a>
    363e:	c7 01       	movw	r24, r14
    3640:	b6 01       	movw	r22, r12
    3642:	2d ec       	ldi	r18, 0xCD	; 205
    3644:	3c ec       	ldi	r19, 0xCC	; 204
    3646:	4c e4       	ldi	r20, 0x4C	; 76
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    364e:	9b 01       	movw	r18, r22
    3650:	ac 01       	movw	r20, r24
    3652:	0c 5b       	subi	r16, 0xBC	; 188
    3654:	1f 4f       	sbci	r17, 0xFF	; 255
    3656:	c3 01       	movw	r24, r6
    3658:	b2 01       	movw	r22, r4
    365a:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    365e:	f8 01       	movw	r30, r16
    3660:	60 83       	st	Z, r22
    3662:	71 83       	std	Z+1, r23	; 0x01
    3664:	82 83       	std	Z+2, r24	; 0x02
    3666:	93 83       	std	Z+3, r25	; 0x03
    3668:	04 54       	subi	r16, 0x44	; 68
    366a:	10 40       	sbci	r17, 0x00	; 0
			_settings->Save();
    366c:	d8 01       	movw	r26, r16
    366e:	1a 96       	adiw	r26, 0x0a	; 10
    3670:	8d 91       	ld	r24, X+
    3672:	9c 91       	ld	r25, X
    3674:	1b 97       	sbiw	r26, 0x0b	; 11
    3676:	0e 94 1e 18 	call	0x303c	; 0x303c <_ZN8Settings4SaveEv>
			_doPosPeakDetect = false;
    367a:	f8 01       	movw	r30, r16
    367c:	13 aa       	std	Z+51, r1	; 0x33
			// serialFridgeMessage(POSDRIFT);
		}
	}
	if(_doNegPeakDetect &&_state!=COOLING){
    367e:	d8 01       	movw	r26, r16
    3680:	d2 96       	adiw	r26, 0x32	; 50
    3682:	8c 91       	ld	r24, X
    3684:	d2 97       	sbiw	r26, 0x32	; 50
    3686:	88 23       	and	r24, r24
    3688:	09 f4       	brne	.+2      	; 0x368c <_ZN11TempControl11detectPeaksEv+0x2a4>
    368a:	21 c1       	rjmp	.+578    	; 0x38ce <_ZN11TempControl11detectPeaksEv+0x4e6>
    368c:	52 96       	adiw	r26, 0x12	; 18
    368e:	8d 91       	ld	r24, X+
    3690:	9c 91       	ld	r25, X
    3692:	53 97       	sbiw	r26, 0x13	; 19
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	09 f4       	brne	.+2      	; 0x369a <_ZN11TempControl11detectPeaksEv+0x2b2>
    3698:	1a c1       	rjmp	.+564    	; 0x38ce <_ZN11TempControl11detectPeaksEv+0x4e6>
		if(_fridgeTemp->TempFiltSlow[3] >= _fridgeTemp->TempFiltSlow[2] &&_fridgeTemp->TempFiltSlow[2] <=_fridgeTemp->TempFiltSlow[1]){ // minimum
    369a:	14 96       	adiw	r26, 0x04	; 4
    369c:	cd 91       	ld	r28, X+
    369e:	dc 91       	ld	r29, X
    36a0:	15 97       	sbiw	r26, 0x05	; 5
    36a2:	ce 5b       	subi	r28, 0xBE	; 190
    36a4:	df 4f       	sbci	r29, 0xFF	; 255
    36a6:	c8 80       	ld	r12, Y
    36a8:	d9 80       	ldd	r13, Y+1	; 0x01
    36aa:	ea 80       	ldd	r14, Y+2	; 0x02
    36ac:	fb 80       	ldd	r15, Y+3	; 0x03
    36ae:	c2 54       	subi	r28, 0x42	; 66
    36b0:	d0 40       	sbci	r29, 0x00	; 0
    36b2:	fe 01       	movw	r30, r28
    36b4:	ea 5b       	subi	r30, 0xBA	; 186
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	60 81       	ld	r22, Z
    36ba:	71 81       	ldd	r23, Z+1	; 0x01
    36bc:	82 81       	ldd	r24, Z+2	; 0x02
    36be:	93 81       	ldd	r25, Z+3	; 0x03
    36c0:	a7 01       	movw	r20, r14
    36c2:	96 01       	movw	r18, r12
    36c4:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    36c8:	88 23       	and	r24, r24
    36ca:	0c f4       	brge	.+2      	; 0x36ce <_ZN11TempControl11detectPeaksEv+0x2e6>
    36cc:	83 c0       	rjmp	.+262    	; 0x37d4 <_ZN11TempControl11detectPeaksEv+0x3ec>
    36ce:	ee 96       	adiw	r28, 0x3e	; 62
    36d0:	c7 01       	movw	r24, r14
    36d2:	b6 01       	movw	r22, r12
    36d4:	28 81       	ld	r18, Y
    36d6:	39 81       	ldd	r19, Y+1	; 0x01
    36d8:	4a 81       	ldd	r20, Y+2	; 0x02
    36da:	5b 81       	ldd	r21, Y+3	; 0x03
    36dc:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    36e0:	18 16       	cp	r1, r24
    36e2:	0c f4       	brge	.+2      	; 0x36e6 <_ZN11TempControl11detectPeaksEv+0x2fe>
    36e4:	77 c0       	rjmp	.+238    	; 0x37d4 <_ZN11TempControl11detectPeaksEv+0x3ec>
			_negPeak = _fridgeTemp->TempFiltSlow[2];
    36e6:	f8 01       	movw	r30, r16
    36e8:	c0 ae       	std	Z+56, r12	; 0x38
    36ea:	d1 ae       	std	Z+57, r13	; 0x39
    36ec:	e2 ae       	std	Z+58, r14	; 0x3a
    36ee:	f3 ae       	std	Z+59, r15	; 0x3b
			if(_negPeak < _GetSettingForNegPeakEstimate() + COOLING_TARGET_LOWER){
    36f0:	64 ad       	ldd	r22, Z+60	; 0x3c
    36f2:	75 ad       	ldd	r23, Z+61	; 0x3d
    36f4:	86 ad       	ldd	r24, Z+62	; 0x3e
    36f6:	97 ad       	ldd	r25, Z+63	; 0x3f
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	50 e4       	ldi	r21, 0x40	; 64
    3700:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3704:	4b 01       	movw	r8, r22
    3706:	5c 01       	movw	r10, r24
    3708:	c7 01       	movw	r24, r14
    370a:	b6 01       	movw	r22, r12
    370c:	a5 01       	movw	r20, r10
    370e:	94 01       	movw	r18, r8
    3710:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3714:	88 23       	and	r24, r24
    3716:	0c f0       	brlt	.+2      	; 0x371a <_ZN11TempControl11detectPeaksEv+0x332>
    3718:	42 c0       	rjmp	.+132    	; 0x379e <_ZN11TempControl11detectPeaksEv+0x3b6>
				//should not happen, estimated overshoot was too low, so adjust overshoot estimator
				_coolOvershootEstimator=_coolOvershootEstimator*(1.2+min(((_GetSettingForNegPeakEstimate() + COOLING_TARGET_LOWER)-_negPeak)*.03,0.3));
    371a:	08 5b       	subi	r16, 0xB8	; 184
    371c:	1f 4f       	sbci	r17, 0xFF	; 255
    371e:	d8 01       	movw	r26, r16
    3720:	4d 90       	ld	r4, X+
    3722:	5d 90       	ld	r5, X+
    3724:	6d 90       	ld	r6, X+
    3726:	7c 90       	ld	r7, X
    3728:	08 54       	subi	r16, 0x48	; 72
    372a:	10 40       	sbci	r17, 0x00	; 0
    372c:	c5 01       	movw	r24, r10
    372e:	b4 01       	movw	r22, r8
    3730:	a7 01       	movw	r20, r14
    3732:	96 01       	movw	r18, r12
    3734:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3738:	2f e8       	ldi	r18, 0x8F	; 143
    373a:	32 ec       	ldi	r19, 0xC2	; 194
    373c:	45 ef       	ldi	r20, 0xF5	; 245
    373e:	5c e3       	ldi	r21, 0x3C	; 60
    3740:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3744:	6b 01       	movw	r12, r22
    3746:	7c 01       	movw	r14, r24
    3748:	2a e9       	ldi	r18, 0x9A	; 154
    374a:	39 e9       	ldi	r19, 0x99	; 153
    374c:	49 e9       	ldi	r20, 0x99	; 153
    374e:	5e e3       	ldi	r21, 0x3E	; 62
    3750:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3754:	87 fd       	sbrc	r24, 7
    3756:	05 c0       	rjmp	.+10     	; 0x3762 <_ZN11TempControl11detectPeaksEv+0x37a>
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 ec       	ldi	r20, 0xC0	; 192
    375e:	5f e3       	ldi	r21, 0x3F	; 63
    3760:	0a c0       	rjmp	.+20     	; 0x3776 <_ZN11TempControl11detectPeaksEv+0x38e>
    3762:	c7 01       	movw	r24, r14
    3764:	b6 01       	movw	r22, r12
    3766:	2a e9       	ldi	r18, 0x9A	; 154
    3768:	39 e9       	ldi	r19, 0x99	; 153
    376a:	49 e9       	ldi	r20, 0x99	; 153
    376c:	5f e3       	ldi	r21, 0x3F	; 63
    376e:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3772:	9b 01       	movw	r18, r22
    3774:	ac 01       	movw	r20, r24
    3776:	08 5b       	subi	r16, 0xB8	; 184
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	c3 01       	movw	r24, r6
    377c:	b2 01       	movw	r22, r4
    377e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3782:	f8 01       	movw	r30, r16
    3784:	60 83       	st	Z, r22
    3786:	71 83       	std	Z+1, r23	; 0x01
    3788:	82 83       	std	Z+2, r24	; 0x02
    378a:	93 83       	std	Z+3, r25	; 0x03
    378c:	08 54       	subi	r16, 0x48	; 72
    378e:	10 40       	sbci	r17, 0x00	; 0
				_settings->Save();
    3790:	d8 01       	movw	r26, r16
    3792:	1a 96       	adiw	r26, 0x0a	; 10
    3794:	8d 91       	ld	r24, X+
    3796:	9c 91       	ld	r25, X
    3798:	1b 97       	sbiw	r26, 0x0b	; 11
    379a:	0e 94 1e 18 	call	0x303c	; 0x303c <_ZN8Settings4SaveEv>
			}
			if(_negPeak > _GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER){
    379e:	f8 01       	movw	r30, r16
    37a0:	80 ac       	ldd	r8, Z+56	; 0x38
    37a2:	91 ac       	ldd	r9, Z+57	; 0x39
    37a4:	a2 ac       	ldd	r10, Z+58	; 0x3a
    37a6:	b3 ac       	ldd	r11, Z+59	; 0x3b
    37a8:	64 ad       	ldd	r22, Z+60	; 0x3c
    37aa:	75 ad       	ldd	r23, Z+61	; 0x3d
    37ac:	86 ad       	ldd	r24, Z+62	; 0x3e
    37ae:	97 ad       	ldd	r25, Z+63	; 0x3f
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    37bc:	6b 01       	movw	r12, r22
    37be:	7c 01       	movw	r14, r24
    37c0:	c5 01       	movw	r24, r10
    37c2:	b4 01       	movw	r22, r8
    37c4:	a7 01       	movw	r20, r14
    37c6:	96 01       	movw	r18, r12
    37c8:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    37cc:	18 16       	cp	r1, r24
    37ce:	0c f4       	brge	.+2      	; 0x37d2 <_ZN11TempControl11detectPeaksEv+0x3ea>
    37d0:	3a c0       	rjmp	.+116    	; 0x3846 <_ZN11TempControl11detectPeaksEv+0x45e>
    37d2:	7b c0       	rjmp	.+246    	; 0x38ca <_ZN11TempControl11detectPeaksEv+0x4e2>
				_settings->Save();
			}
			_doNegPeakDetect = false;
			// serialFridgeMessage(NEGPEAK);
		}
		else if(timeSinceCooling() > 1780000UL && timeSinceHeating() > 1800000UL &&_fridgeTemp->TempFiltSlow[3] > _GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER){
    37d4:	c8 01       	movw	r24, r16
    37d6:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN11TempControl16timeSinceCoolingEv>
    37da:	61 52       	subi	r22, 0x21	; 33
    37dc:	79 42       	sbci	r23, 0x29	; 41
    37de:	8b 41       	sbci	r24, 0x1B	; 27
    37e0:	90 40       	sbci	r25, 0x00	; 0
    37e2:	08 f4       	brcc	.+2      	; 0x37e6 <_ZN11TempControl11detectPeaksEv+0x3fe>
    37e4:	74 c0       	rjmp	.+232    	; 0x38ce <_ZN11TempControl11detectPeaksEv+0x4e6>
    37e6:	c8 01       	movw	r24, r16
    37e8:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN11TempControl16timeSinceHeatingEv>
    37ec:	61 54       	subi	r22, 0x41	; 65
    37ee:	77 47       	sbci	r23, 0x77	; 119
    37f0:	8b 41       	sbci	r24, 0x1B	; 27
    37f2:	90 40       	sbci	r25, 0x00	; 0
    37f4:	08 f4       	brcc	.+2      	; 0x37f8 <_ZN11TempControl11detectPeaksEv+0x410>
    37f6:	6b c0       	rjmp	.+214    	; 0x38ce <_ZN11TempControl11detectPeaksEv+0x4e6>
    37f8:	d8 01       	movw	r26, r16
    37fa:	14 96       	adiw	r26, 0x04	; 4
    37fc:	ed 91       	ld	r30, X+
    37fe:	fc 91       	ld	r31, X
    3800:	15 97       	sbiw	r26, 0x05	; 5
    3802:	ea 5b       	subi	r30, 0xBA	; 186
    3804:	ff 4f       	sbci	r31, 0xFF	; 255
    3806:	c0 80       	ld	r12, Z
    3808:	d1 80       	ldd	r13, Z+1	; 0x01
    380a:	e2 80       	ldd	r14, Z+2	; 0x02
    380c:	f3 80       	ldd	r15, Z+3	; 0x03
    380e:	dc 96       	adiw	r26, 0x3c	; 60
    3810:	6d 91       	ld	r22, X+
    3812:	7d 91       	ld	r23, X+
    3814:	8d 91       	ld	r24, X+
    3816:	9c 91       	ld	r25, X
    3818:	df 97       	sbiw	r26, 0x3f	; 63
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e8       	ldi	r20, 0x80	; 128
    3820:	5f e3       	ldi	r21, 0x3F	; 63
    3822:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3826:	4b 01       	movw	r8, r22
    3828:	5c 01       	movw	r10, r24
    382a:	c7 01       	movw	r24, r14
    382c:	b6 01       	movw	r22, r12
    382e:	a5 01       	movw	r20, r10
    3830:	94 01       	movw	r18, r8
    3832:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3836:	18 16       	cp	r1, r24
    3838:	0c f0       	brlt	.+2      	; 0x383c <_ZN11TempControl11detectPeaksEv+0x454>
    383a:	49 c0       	rjmp	.+146    	; 0x38ce <_ZN11TempControl11detectPeaksEv+0x4e6>
			//there was no peak, but the estimator is too low. This is the cool, then drift down situation.
			_negPeak = _fridgeTemp->TempFiltSlow[3];
    383c:	f8 01       	movw	r30, r16
    383e:	c0 ae       	std	Z+56, r12	; 0x38
    3840:	d1 ae       	std	Z+57, r13	; 0x39
    3842:	e2 ae       	std	Z+58, r14	; 0x3a
    3844:	f3 ae       	std	Z+59, r15	; 0x3b
			_coolOvershootEstimator=_coolOvershootEstimator*(0.8+max((_negPeak-(_GetSettingForNegPeakEstimate() + COOLING_TARGET_UPPER))*.03,-0.3));
    3846:	08 5b       	subi	r16, 0xB8	; 184
    3848:	1f 4f       	sbci	r17, 0xFF	; 255
    384a:	d8 01       	movw	r26, r16
    384c:	4d 90       	ld	r4, X+
    384e:	5d 90       	ld	r5, X+
    3850:	6d 90       	ld	r6, X+
    3852:	7c 90       	ld	r7, X
    3854:	08 54       	subi	r16, 0x48	; 72
    3856:	10 40       	sbci	r17, 0x00	; 0
    3858:	c7 01       	movw	r24, r14
    385a:	b6 01       	movw	r22, r12
    385c:	a5 01       	movw	r20, r10
    385e:	94 01       	movw	r18, r8
    3860:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3864:	2f e8       	ldi	r18, 0x8F	; 143
    3866:	32 ec       	ldi	r19, 0xC2	; 194
    3868:	45 ef       	ldi	r20, 0xF5	; 245
    386a:	5c e3       	ldi	r21, 0x3C	; 60
    386c:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3870:	6b 01       	movw	r12, r22
    3872:	7c 01       	movw	r14, r24
    3874:	2a e9       	ldi	r18, 0x9A	; 154
    3876:	39 e9       	ldi	r19, 0x99	; 153
    3878:	49 e9       	ldi	r20, 0x99	; 153
    387a:	5e eb       	ldi	r21, 0xBE	; 190
    387c:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3880:	18 16       	cp	r1, r24
    3882:	2c f0       	brlt	.+10     	; 0x388e <_ZN11TempControl11detectPeaksEv+0x4a6>
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	5f e3       	ldi	r21, 0x3F	; 63
    388c:	0a c0       	rjmp	.+20     	; 0x38a2 <_ZN11TempControl11detectPeaksEv+0x4ba>
    388e:	c7 01       	movw	r24, r14
    3890:	b6 01       	movw	r22, r12
    3892:	2d ec       	ldi	r18, 0xCD	; 205
    3894:	3c ec       	ldi	r19, 0xCC	; 204
    3896:	4c e4       	ldi	r20, 0x4C	; 76
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    389e:	9b 01       	movw	r18, r22
    38a0:	ac 01       	movw	r20, r24
    38a2:	08 5b       	subi	r16, 0xB8	; 184
    38a4:	1f 4f       	sbci	r17, 0xFF	; 255
    38a6:	c3 01       	movw	r24, r6
    38a8:	b2 01       	movw	r22, r4
    38aa:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    38ae:	f8 01       	movw	r30, r16
    38b0:	60 83       	st	Z, r22
    38b2:	71 83       	std	Z+1, r23	; 0x01
    38b4:	82 83       	std	Z+2, r24	; 0x02
    38b6:	93 83       	std	Z+3, r25	; 0x03
    38b8:	08 54       	subi	r16, 0x48	; 72
    38ba:	10 40       	sbci	r17, 0x00	; 0
			_settings->Save();
    38bc:	d8 01       	movw	r26, r16
    38be:	1a 96       	adiw	r26, 0x0a	; 10
    38c0:	8d 91       	ld	r24, X+
    38c2:	9c 91       	ld	r25, X
    38c4:	1b 97       	sbiw	r26, 0x0b	; 11
    38c6:	0e 94 1e 18 	call	0x303c	; 0x303c <_ZN8Settings4SaveEv>
			_doNegPeakDetect = false;
    38ca:	f8 01       	movw	r30, r16
    38cc:	12 aa       	std	Z+50, r1	; 0x32
//	Serial.print(_heatOvershootEstimator);
//	Serial.print("\t_coolOvershootEstimator:");
//	Serial.println(_coolOvershootEstimator);


}
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	bf 90       	pop	r11
    38e0:	af 90       	pop	r10
    38e2:	9f 90       	pop	r9
    38e4:	8f 90       	pop	r8
    38e6:	7f 90       	pop	r7
    38e8:	6f 90       	pop	r6
    38ea:	5f 90       	pop	r5
    38ec:	4f 90       	pop	r4
    38ee:	08 95       	ret

000038f0 <_ZN11TempControl19_SetPosPeakEstimateEv>:
void TempControl::_SetNegPeakEstimate()
{
  _SettingForNegPeakEstimate = _fridgeTemp->GetTempSetting();
}

void TempControl::_SetPosPeakEstimate()
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	8c 01       	movw	r16, r24
{
  _SettingForPosPeakEstimate = _fridgeTemp->GetTempSetting();
    38f6:	fc 01       	movw	r30, r24
    38f8:	84 81       	ldd	r24, Z+4	; 0x04
    38fa:	95 81       	ldd	r25, Z+5	; 0x05
    38fc:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3900:	00 5c       	subi	r16, 0xC0	; 192
    3902:	1f 4f       	sbci	r17, 0xFF	; 255
    3904:	f8 01       	movw	r30, r16
    3906:	60 83       	st	Z, r22
    3908:	71 83       	std	Z+1, r23	; 0x01
    390a:	82 83       	std	Z+2, r24	; 0x02
    390c:	93 83       	std	Z+3, r25	; 0x03
}
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <_ZN11TempControl19_SetNegPeakEstimateEv>:
		_Heater->SetState(false);
		break;
	}
}

void TempControl::_SetNegPeakEstimate()
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	8c 01       	movw	r16, r24
{
  _SettingForNegPeakEstimate = _fridgeTemp->GetTempSetting();
    391a:	fc 01       	movw	r30, r24
    391c:	84 81       	ldd	r24, Z+4	; 0x04
    391e:	95 81       	ldd	r25, Z+5	; 0x05
    3920:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3924:	f8 01       	movw	r30, r16
    3926:	64 af       	std	Z+60, r22	; 0x3c
    3928:	75 af       	std	Z+61, r23	; 0x3d
    392a:	86 af       	std	Z+62, r24	; 0x3e
    392c:	97 af       	std	Z+63, r25	; 0x3f
}
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
    3932:	08 95       	ret

00003934 <_ZN11TempControl21GetCurrentTempSettingEv>:
	else{
		// something is horribly wrong
	}
}

float TempControl::GetCurrentTempSetting()
    3934:	fc 01       	movw	r30, r24
{
	if(_mode == BEER_CONSTANT || _mode == BEER_PROFILE){
    3936:	84 89       	ldd	r24, Z+20	; 0x14
    3938:	95 89       	ldd	r25, Z+21	; 0x15
    393a:	01 97       	sbiw	r24, 0x01	; 1
    393c:	02 97       	sbiw	r24, 0x02	; 2
    393e:	28 f4       	brcc	.+10     	; 0x394a <_ZN11TempControl21GetCurrentTempSettingEv+0x16>
		return _beerTemp->GetTempSetting()/10;
    3940:	82 81       	ldd	r24, Z+2	; 0x02
    3942:	93 81       	ldd	r25, Z+3	; 0x03
    3944:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <_ZN11TempControl21GetCurrentTempSettingEv+0x1e>
	}
	else {
		return _fridgeTemp->GetTempSetting()/10;
    394a:	84 81       	ldd	r24, Z+4	; 0x04
    394c:	95 81       	ldd	r25, Z+5	; 0x05
    394e:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e2       	ldi	r20, 0x20	; 32
    3958:	51 e4       	ldi	r21, 0x41	; 65
    395a:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    395e:	e6 2f       	mov	r30, r22
	}
}
    3960:	2e 2f       	mov	r18, r30
    3962:	37 2f       	mov	r19, r23
    3964:	48 2f       	mov	r20, r24
    3966:	59 2f       	mov	r21, r25
    3968:	b9 01       	movw	r22, r18
    396a:	ca 01       	movw	r24, r20
    396c:	08 95       	ret

0000396e <_ZN11TempControl13UpdateOutputsEv>:
void TempControl::LcdPrintBeerTemp(OLEDFourBit *lcd)
{
	return _beerTemp->LcdPrintActualTemp(lcd);
}

void TempControl::UpdateOutputs(void){
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	ec 01       	movw	r28, r24
	switch (_state){
    3974:	8a 89       	ldd	r24, Y+18	; 0x12
    3976:	9b 89       	ldd	r25, Y+19	; 0x13
    3978:	82 30       	cpi	r24, 0x02	; 2
    397a:	91 05       	cpc	r25, r1
    397c:	49 f0       	breq	.+18     	; 0x3990 <_ZN11TempControl13UpdateOutputsEv+0x22>
    397e:	83 30       	cpi	r24, 0x03	; 3
    3980:	91 05       	cpc	r25, r1
    3982:	7c f4       	brge	.+30     	; 0x39a2 <_ZN11TempControl13UpdateOutputsEv+0x34>
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	69 f4       	brne	.+26     	; 0x39a2 <_ZN11TempControl13UpdateOutputsEv+0x34>
	case STARTUP:
		_Compressor->SetState(false);
		_Heater->SetState(false);
		break;
	case COOLING:
		_Compressor->SetState(true);
    3988:	8e 81       	ldd	r24, Y+6	; 0x06
    398a:	9f 81       	ldd	r25, Y+7	; 0x07
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	0c c0       	rjmp	.+24     	; 0x39a8 <_ZN11TempControl13UpdateOutputsEv+0x3a>
		_Heater->SetState(false);
		break;
	case HEATING:
		//  case DOOR_OPEN:
		_Compressor->SetState(false);
    3990:	8e 81       	ldd	r24, Y+6	; 0x06
    3992:	9f 81       	ldd	r25, Y+7	; 0x07
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN5Relay8SetStateEb>
		_Heater->SetState(true);
    399a:	88 85       	ldd	r24, Y+8	; 0x08
    399c:	99 85       	ldd	r25, Y+9	; 0x09
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	08 c0       	rjmp	.+16     	; 0x39b2 <_ZN11TempControl13UpdateOutputsEv+0x44>
		break;
	default:
		_Compressor->SetState(false);
    39a2:	8e 81       	ldd	r24, Y+6	; 0x06
    39a4:	9f 81       	ldd	r25, Y+7	; 0x07
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN5Relay8SetStateEb>
		_Heater->SetState(false);
    39ac:	88 85       	ldd	r24, Y+8	; 0x08
    39ae:	99 85       	ldd	r25, Y+9	; 0x09
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <_ZN5Relay8SetStateEb>
		break;
	}
}
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	08 95       	ret

000039bc <_ZN11TempControl11GetStateStrEv>:
		return "UNKNOWN";
	}
	return _currentModeString;
}

const char* TempControl::GetStateStr(){
    39bc:	ef 92       	push	r14
    39be:	ff 92       	push	r15
    39c0:	0f 93       	push	r16
    39c2:	1f 93       	push	r17
    39c4:	cf 93       	push	r28
    39c6:	df 93       	push	r29
    39c8:	ec 01       	movw	r28, r24

	char *src;

	switch(_state){
    39ca:	8a 89       	ldd	r24, Y+18	; 0x12
    39cc:	9b 89       	ldd	r25, Y+19	; 0x13
    39ce:	82 30       	cpi	r24, 0x02	; 2
    39d0:	91 05       	cpc	r25, r1
    39d2:	c9 f0       	breq	.+50     	; 0x3a06 <_ZN11TempControl11GetStateStrEv+0x4a>
    39d4:	83 30       	cpi	r24, 0x03	; 3
    39d6:	91 05       	cpc	r25, r1
    39d8:	2c f4       	brge	.+10     	; 0x39e4 <_ZN11TempControl11GetStateStrEv+0x28>
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	71 f0       	breq	.+28     	; 0x39fa <_ZN11TempControl11GetStateStrEv+0x3e>
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	49 f4       	brne	.+18     	; 0x39f4 <_ZN11TempControl11GetStateStrEv+0x38>
    39e2:	0e c0       	rjmp	.+28     	; 0x3a00 <_ZN11TempControl11GetStateStrEv+0x44>
    39e4:	84 30       	cpi	r24, 0x04	; 4
    39e6:	91 05       	cpc	r25, r1
    39e8:	a1 f0       	breq	.+40     	; 0x3a12 <_ZN11TempControl11GetStateStrEv+0x56>
    39ea:	84 30       	cpi	r24, 0x04	; 4
    39ec:	91 05       	cpc	r25, r1
    39ee:	74 f0       	brlt	.+28     	; 0x3a0c <_ZN11TempControl11GetStateStrEv+0x50>
    39f0:	05 97       	sbiw	r24, 0x05	; 5
    39f2:	91 f0       	breq	.+36     	; 0x3a18 <_ZN11TempControl11GetStateStrEv+0x5c>
    39f4:	26 e9       	ldi	r18, 0x96	; 150
    39f6:	31 e0       	ldi	r19, 0x01	; 1
    39f8:	29 c0       	rjmp	.+82     	; 0x3a4c <_ZN11TempControl11GetStateStrEv+0x90>
	case UNKNOWN:
		src = "UNKNOWN";
    39fa:	66 e9       	ldi	r22, 0x96	; 150
    39fc:	71 e0       	ldi	r23, 0x01	; 1
    39fe:	0e c0       	rjmp	.+28     	; 0x3a1c <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case COOLING:
		src = "COOLING";
    3a00:	6e e9       	ldi	r22, 0x9E	; 158
    3a02:	71 e0       	ldi	r23, 0x01	; 1
    3a04:	0b c0       	rjmp	.+22     	; 0x3a1c <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case HEATING:
		src = "HEATING";
    3a06:	66 ea       	ldi	r22, 0xA6	; 166
    3a08:	71 e0       	ldi	r23, 0x01	; 1
    3a0a:	08 c0       	rjmp	.+16     	; 0x3a1c <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case IDLE:
		src = "IDLE";
    3a0c:	6e ea       	ldi	r22, 0xAE	; 174
    3a0e:	71 e0       	ldi	r23, 0x01	; 1
    3a10:	05 c0       	rjmp	.+10     	; 0x3a1c <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case STARTUP:
		src = "STARTUP";
    3a12:	63 eb       	ldi	r22, 0xB3	; 179
    3a14:	71 e0       	ldi	r23, 0x01	; 1
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <_ZN11TempControl11GetStateStrEv+0x60>
		break;
	case DOOR_OPEN:
		src = "DOOR_OPEN";
    3a18:	6b eb       	ldi	r22, 0xBB	; 187
    3a1a:	71 e0       	ldi	r23, 0x01	; 1
		break;
	default:
		return "UNKNOWN";
	}
	int len = strlen(src);
    3a1c:	db 01       	movw	r26, r22
    3a1e:	0d 90       	ld	r0, X+
    3a20:	00 20       	and	r0, r0
    3a22:	e9 f7       	brne	.-6      	; 0x3a1e <_ZN11TempControl11GetStateStrEv+0x62>
    3a24:	8d 01       	movw	r16, r26
    3a26:	01 50       	subi	r16, 0x01	; 1
    3a28:	10 40       	sbci	r17, 0x00	; 0
    3a2a:	06 1b       	sub	r16, r22
    3a2c:	17 0b       	sbc	r17, r23
	strncpy(_currentStateString, src,len );
    3a2e:	86 e5       	ldi	r24, 0x56	; 86
    3a30:	e8 2e       	mov	r14, r24
    3a32:	f1 2c       	mov	r15, r1
    3a34:	ec 0e       	add	r14, r28
    3a36:	fd 1e       	adc	r15, r29
    3a38:	c7 01       	movw	r24, r14
    3a3a:	a8 01       	movw	r20, r16
    3a3c:	0e 94 43 02 	call	0x486	; 0x486 <strncpy>
	_currentStateString[len] = '\0';
    3a40:	c0 0f       	add	r28, r16
    3a42:	d1 1f       	adc	r29, r17
    3a44:	ca 5a       	subi	r28, 0xAA	; 170
    3a46:	df 4f       	sbci	r29, 0xFF	; 255
    3a48:	18 82       	st	Y, r1
    3a4a:	97 01       	movw	r18, r14
	return _currentStateString;
}
    3a4c:	c9 01       	movw	r24, r18
    3a4e:	df 91       	pop	r29
    3a50:	cf 91       	pop	r28
    3a52:	1f 91       	pop	r17
    3a54:	0f 91       	pop	r16
    3a56:	ff 90       	pop	r15
    3a58:	ef 90       	pop	r14
    3a5a:	08 95       	ret

00003a5c <_ZN11TempControl10GetModeStrEv>:

TempControl::modes_t TempControl::GetMode(){
	return _mode;
}

const char* TempControl::GetModeStr(){
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	fc 01       	movw	r30, r24

	switch(_mode){
    3a62:	84 89       	ldd	r24, Z+20	; 0x14
    3a64:	95 89       	ldd	r25, Z+21	; 0x15
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	91 05       	cpc	r25, r1
    3a6a:	99 f0       	breq	.+38     	; 0x3a92 <_ZN11TempControl10GetModeStrEv+0x36>
    3a6c:	82 30       	cpi	r24, 0x02	; 2
    3a6e:	91 05       	cpc	r25, r1
    3a70:	d9 f0       	breq	.+54     	; 0x3aa8 <_ZN11TempControl10GetModeStrEv+0x4c>
    3a72:	89 2b       	or	r24, r25
    3a74:	19 f0       	breq	.+6      	; 0x3a7c <_ZN11TempControl10GetModeStrEv+0x20>
    3a76:	26 e9       	ldi	r18, 0x96	; 150
    3a78:	31 e0       	ldi	r19, 0x01	; 1
    3a7a:	28 c0       	rjmp	.+80     	; 0x3acc <_ZN11TempControl10GetModeStrEv+0x70>
	case FRIDGE_CONSTANT:
		strncpy(_currentModeString, "FRDG_CONST", 10);
    3a7c:	ef 01       	movw	r28, r30
    3a7e:	c4 5b       	subi	r28, 0xB4	; 180
    3a80:	df 4f       	sbci	r29, 0xFF	; 255
    3a82:	a5 ec       	ldi	r26, 0xC5	; 197
    3a84:	b1 e0       	ldi	r27, 0x01	; 1
    3a86:	8a e0       	ldi	r24, 0x0A	; 10
    3a88:	0d 90       	ld	r0, X+
    3a8a:	09 92       	st	Y+, r0
    3a8c:	81 50       	subi	r24, 0x01	; 1
    3a8e:	e1 f7       	brne	.-8      	; 0x3a88 <_ZN11TempControl10GetModeStrEv+0x2c>
    3a90:	15 c0       	rjmp	.+42     	; 0x3abc <_ZN11TempControl10GetModeStrEv+0x60>
		_currentModeString[10] = '\0';
		break;
	case BEER_CONSTANT:
		strncpy(_currentModeString, "BEER_CONST", 10);
    3a92:	ef 01       	movw	r28, r30
    3a94:	c4 5b       	subi	r28, 0xB4	; 180
    3a96:	df 4f       	sbci	r29, 0xFF	; 255
    3a98:	a0 ed       	ldi	r26, 0xD0	; 208
    3a9a:	b1 e0       	ldi	r27, 0x01	; 1
    3a9c:	8a e0       	ldi	r24, 0x0A	; 10
    3a9e:	0d 90       	ld	r0, X+
    3aa0:	09 92       	st	Y+, r0
    3aa2:	81 50       	subi	r24, 0x01	; 1
    3aa4:	e1 f7       	brne	.-8      	; 0x3a9e <_ZN11TempControl10GetModeStrEv+0x42>
    3aa6:	0a c0       	rjmp	.+20     	; 0x3abc <_ZN11TempControl10GetModeStrEv+0x60>
		_currentModeString[10] = '\0';
		break;
	case BEER_PROFILE:
		strncpy(_currentModeString, "BEER_PROFL", 10);
    3aa8:	ef 01       	movw	r28, r30
    3aaa:	c4 5b       	subi	r28, 0xB4	; 180
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	ab ed       	ldi	r26, 0xDB	; 219
    3ab0:	b1 e0       	ldi	r27, 0x01	; 1
    3ab2:	8a e0       	ldi	r24, 0x0A	; 10
    3ab4:	0d 90       	ld	r0, X+
    3ab6:	09 92       	st	Y+, r0
    3ab8:	81 50       	subi	r24, 0x01	; 1
    3aba:	e1 f7       	brne	.-8      	; 0x3ab4 <_ZN11TempControl10GetModeStrEv+0x58>
		_currentModeString[10] = '\0';
    3abc:	ea 5a       	subi	r30, 0xAA	; 170
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	10 82       	st	Z, r1
    3ac2:	e6 55       	subi	r30, 0x56	; 86
    3ac4:	f0 40       	sbci	r31, 0x00	; 0
		break;
	default:
		return "UNKNOWN";
	}
	return _currentModeString;
    3ac6:	9f 01       	movw	r18, r30
    3ac8:	24 5b       	subi	r18, 0xB4	; 180
    3aca:	3f 4f       	sbci	r19, 0xFF	; 255
}
    3acc:	c9 01       	movw	r24, r18
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	08 95       	ret

00003ad4 <_ZN11TempControl13GetFridgeTempEv>:
	return _beerTemp->GetTempActual()/10;
}

float TempControl::GetFridgeTemp()
{
	return _fridgeTemp->GetTempActual()/10;
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	84 81       	ldd	r24, Z+4	; 0x04
    3ad8:	95 81       	ldd	r25, Z+5	; 0x05
    3ada:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    3ade:	20 e0       	ldi	r18, 0x00	; 0
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	40 e2       	ldi	r20, 0x20	; 32
    3ae4:	51 e4       	ldi	r21, 0x41	; 65
    3ae6:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
}
    3aea:	08 95       	ret

00003aec <_ZN11TempControl11GetBeerTempEv>:

}

float TempControl::GetBeerTemp()
{
	return _beerTemp->GetTempActual()/10;
    3aec:	fc 01       	movw	r30, r24
    3aee:	82 81       	ldd	r24, Z+2	; 0x02
    3af0:	93 81       	ldd	r25, Z+3	; 0x03
    3af2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN18BeerTempController13GetTempActualEv>
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e2       	ldi	r20, 0x20	; 32
    3afc:	51 e4       	ldi	r21, 0x41	; 65
    3afe:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
}
    3b02:	08 95       	ret

00003b04 <_ZN11TempControl11UpdateStateEv>:
	else if(_mode == FRIDGE_CONSTANT){
		_fridgeTemp->SetTempSetting(_fridgeTemp->GetTempSetting() + (float)adj);
	}
}

void TempControl::UpdateState()
    3b04:	2f 92       	push	r2
    3b06:	3f 92       	push	r3
    3b08:	4f 92       	push	r4
    3b0a:	5f 92       	push	r5
    3b0c:	6f 92       	push	r6
    3b0e:	7f 92       	push	r7
    3b10:	8f 92       	push	r8
    3b12:	9f 92       	push	r9
    3b14:	af 92       	push	r10
    3b16:	bf 92       	push	r11
    3b18:	cf 92       	push	r12
    3b1a:	df 92       	push	r13
    3b1c:	ef 92       	push	r14
    3b1e:	ff 92       	push	r15
    3b20:	0f 93       	push	r16
    3b22:	1f 93       	push	r17
    3b24:	cf 93       	push	r28
    3b26:	df 93       	push	r29
    3b28:	ec 01       	movw	r28, r24
	//			serialFridgeMessage(FRIDGE_DOOR_OPEN);
	//		}
	//		state=DOOR_OPEN;
	//		return;
	//	}
	switch(_state){
    3b2a:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2c:	9b 89       	ldd	r25, Y+19	; 0x13
    3b2e:	85 30       	cpi	r24, 0x05	; 5
    3b30:	91 05       	cpc	r25, r1
    3b32:	5c f4       	brge	.+22     	; 0x3b4a <_ZN11TempControl11UpdateStateEv+0x46>
    3b34:	83 30       	cpi	r24, 0x03	; 3
    3b36:	91 05       	cpc	r25, r1
    3b38:	64 f4       	brge	.+24     	; 0x3b52 <_ZN11TempControl11UpdateStateEv+0x4e>
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	91 05       	cpc	r25, r1
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <_ZN11TempControl11UpdateStateEv+0x3e>
    3b40:	ae c0       	rjmp	.+348    	; 0x3c9e <_ZN11TempControl11UpdateStateEv+0x19a>
    3b42:	02 97       	sbiw	r24, 0x02	; 2
    3b44:	09 f0       	breq	.+2      	; 0x3b48 <_ZN11TempControl11UpdateStateEv+0x44>
    3b46:	89 c1       	rjmp	.+786    	; 0x3e5a <_ZN11TempControl11UpdateStateEv+0x356>
    3b48:	1a c1       	rjmp	.+564    	; 0x3d7e <_ZN11TempControl11UpdateStateEv+0x27a>
    3b4a:	05 97       	sbiw	r24, 0x05	; 5
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <_ZN11TempControl11UpdateStateEv+0x4c>
    3b4e:	85 c1       	rjmp	.+778    	; 0x3e5a <_ZN11TempControl11UpdateStateEv+0x356>
    3b50:	88 c1       	rjmp	.+784    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
	case STARTUP:
	case IDLE:
		_lastIdleTime=millis();
    3b52:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    3b56:	6a a7       	std	Y+42, r22	; 0x2a
    3b58:	7b a7       	std	Y+43, r23	; 0x2b
    3b5a:	8c a7       	std	Y+44, r24	; 0x2c
    3b5c:	9d a7       	std	Y+45, r25	; 0x2d
		if(((timeSinceCooling() > 900000UL || _doNegPeakDetect == false) &&
    3b5e:	ce 01       	movw	r24, r28
    3b60:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN11TempControl16timeSinceCoolingEv>
    3b64:	61 5a       	subi	r22, 0xA1	; 161
    3b66:	7b 4b       	sbci	r23, 0xBB	; 187
    3b68:	8d 40       	sbci	r24, 0x0D	; 13
    3b6a:	90 40       	sbci	r25, 0x00	; 0
    3b6c:	18 f4       	brcc	.+6      	; 0x3b74 <_ZN11TempControl11UpdateStateEv+0x70>
    3b6e:	8a a9       	ldd	r24, Y+50	; 0x32
    3b70:	88 23       	and	r24, r24
    3b72:	59 f4       	brne	.+22     	; 0x3b8a <_ZN11TempControl11UpdateStateEv+0x86>
    3b74:	ce 01       	movw	r24, r28
    3b76:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN11TempControl16timeSinceHeatingEv>
    3b7a:	61 5c       	subi	r22, 0xC1	; 193
    3b7c:	77 42       	sbci	r23, 0x27	; 39
    3b7e:	89 40       	sbci	r24, 0x09	; 9
    3b80:	90 40       	sbci	r25, 0x00	; 0
    3b82:	40 f4       	brcc	.+16     	; 0x3b94 <_ZN11TempControl11UpdateStateEv+0x90>
    3b84:	8b a9       	ldd	r24, Y+51	; 0x33
    3b86:	88 23       	and	r24, r24
    3b88:	29 f0       	breq	.+10     	; 0x3b94 <_ZN11TempControl11UpdateStateEv+0x90>
    3b8a:	8a 89       	ldd	r24, Y+18	; 0x12
    3b8c:	9b 89       	ldd	r25, Y+19	; 0x13
    3b8e:	04 97       	sbiw	r24, 0x04	; 4
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <_ZN11TempControl11UpdateStateEv+0x90>
    3b92:	71 c0       	rjmp	.+226    	; 0x3c76 <_ZN11TempControl11UpdateStateEv+0x172>
				(timeSinceHeating() > 600000UL || _doPosPeakDetect == false)) ||
				_state==STARTUP){ //if cooling is 15 min ago and heating 10
			if(_fridgeTemp->GetTempActual() > _fridgeTemp->GetTempSetting() + IDLE_RANGE_HIGH){
    3b94:	8c 81       	ldd	r24, Y+4	; 0x04
    3b96:	9d 81       	ldd	r25, Y+5	; 0x05
    3b98:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    3b9c:	7b 01       	movw	r14, r22
    3b9e:	8c 01       	movw	r16, r24
    3ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ba4:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	40 e4       	ldi	r20, 0x40	; 64
    3bae:	50 e4       	ldi	r21, 0x40	; 64
    3bb0:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3bb4:	9b 01       	movw	r18, r22
    3bb6:	ac 01       	movw	r20, r24
    3bb8:	c8 01       	movw	r24, r16
    3bba:	b7 01       	movw	r22, r14
    3bbc:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3bc0:	18 16       	cp	r1, r24
    3bc2:	0c f5       	brge	.+66     	; 0x3c06 <_ZN11TempControl11UpdateStateEv+0x102>
				if (_mode!=FRIDGE_CONSTANT){
    3bc4:	8c 89       	ldd	r24, Y+20	; 0x14
    3bc6:	9d 89       	ldd	r25, Y+21	; 0x15
    3bc8:	89 2b       	or	r24, r25
    3bca:	d1 f0       	breq	.+52     	; 0x3c00 <_ZN11TempControl11UpdateStateEv+0xfc>
					if(_beerTemp->TempFiltSlow[3] > _beerTemp->GetTempSetting() + 0.5){
    3bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    3bce:	fb 81       	ldd	r31, Y+3	; 0x03
    3bd0:	fe 96       	adiw	r30, 0x3e	; 62
    3bd2:	e0 80       	ld	r14, Z
    3bd4:	f1 80       	ldd	r15, Z+1	; 0x01
    3bd6:	02 81       	ldd	r16, Z+2	; 0x02
    3bd8:	13 81       	ldd	r17, Z+3	; 0x03
    3bda:	fe 97       	sbiw	r30, 0x3e	; 62
    3bdc:	cf 01       	movw	r24, r30
    3bde:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3bee:	9b 01       	movw	r18, r22
    3bf0:	ac 01       	movw	r20, r24
    3bf2:	c8 01       	movw	r24, r16
    3bf4:	b7 01       	movw	r22, r14
    3bf6:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3bfa:	18 16       	cp	r1, r24
    3bfc:	0c f0       	brlt	.+2      	; 0x3c00 <_ZN11TempControl11UpdateStateEv+0xfc>
    3bfe:	31 c1       	rjmp	.+610    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
						_state=COOLING;   // only start cooling when beer is too warm (0.05 degree idle space)
					}
				}
				else{
					_state=COOLING;
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	2c c1       	rjmp	.+600    	; 0x3e5e <_ZN11TempControl11UpdateStateEv+0x35a>
				}
				return;
			}
			if (_fridgeTemp->GetTempActual() < _fridgeTemp->GetTempSetting() + IDLE_RANGE_LOW){
    3c06:	8c 81       	ldd	r24, Y+4	; 0x04
    3c08:	9d 81       	ldd	r25, Y+5	; 0x05
    3c0a:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    3c0e:	7b 01       	movw	r14, r22
    3c10:	8c 01       	movw	r16, r24
    3c12:	8c 81       	ldd	r24, Y+4	; 0x04
    3c14:	9d 81       	ldd	r25, Y+5	; 0x05
    3c16:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e4       	ldi	r20, 0x40	; 64
    3c20:	50 e4       	ldi	r21, 0x40	; 64
    3c22:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3c26:	9b 01       	movw	r18, r22
    3c28:	ac 01       	movw	r20, r24
    3c2a:	c8 01       	movw	r24, r16
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3c32:	88 23       	and	r24, r24
    3c34:	04 f5       	brge	.+64     	; 0x3c76 <_ZN11TempControl11UpdateStateEv+0x172>
				if (_mode != FRIDGE_CONSTANT){
    3c36:	8c 89       	ldd	r24, Y+20	; 0x14
    3c38:	9d 89       	ldd	r25, Y+21	; 0x15
    3c3a:	89 2b       	or	r24, r25
    3c3c:	c9 f0       	breq	.+50     	; 0x3c70 <_ZN11TempControl11UpdateStateEv+0x16c>
					if(_beerTemp->GetTempActual() < _beerTemp->GetTempSetting() - 0.5){
    3c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c40:	9b 81       	ldd	r25, Y+3	; 0x03
    3c42:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN18BeerTempController13GetTempActualEv>
    3c46:	7b 01       	movw	r14, r22
    3c48:	8c 01       	movw	r16, r24
    3c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e0       	ldi	r20, 0x00	; 0
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3c5e:	9b 01       	movw	r18, r22
    3c60:	ac 01       	movw	r20, r24
    3c62:	c8 01       	movw	r24, r16
    3c64:	b7 01       	movw	r22, r14
    3c66:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3c6a:	88 23       	and	r24, r24
    3c6c:	0c f0       	brlt	.+2      	; 0x3c70 <_ZN11TempControl11UpdateStateEv+0x16c>
    3c6e:	f9 c0       	rjmp	.+498    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
						_state=HEATING;   // only start heating when beer is too cold (0.05 degree idle space)
					}
				}
				else{
					_state=HEATING;
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	f4 c0       	rjmp	.+488    	; 0x3e5e <_ZN11TempControl11UpdateStateEv+0x35a>
				}
				return;
			}
		}
		if(timeSinceCooling()>1800000UL){ // 30 minutes since the last time the cooler was on
    3c76:	ce 01       	movw	r24, r28
    3c78:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN11TempControl16timeSinceCoolingEv>
    3c7c:	61 54       	subi	r22, 0x41	; 65
    3c7e:	77 47       	sbci	r23, 0x77	; 119
    3c80:	8b 41       	sbci	r24, 0x1B	; 27
    3c82:	90 40       	sbci	r25, 0x00	; 0
    3c84:	08 f0       	brcs	.+2      	; 0x3c88 <_ZN11TempControl11UpdateStateEv+0x184>
			_doNegPeakDetect = false;     // peak would be from drifting in idle, not from cooling
    3c86:	1a aa       	std	Y+50, r1	; 0x32
		}
		if(timeSinceHeating()>900000UL){  // 20 minutes since the last time the cooler was on
    3c88:	ce 01       	movw	r24, r28
    3c8a:	0e 94 ca 19 	call	0x3394	; 0x3394 <_ZN11TempControl16timeSinceHeatingEv>
    3c8e:	61 5a       	subi	r22, 0xA1	; 161
    3c90:	7b 4b       	sbci	r23, 0xBB	; 187
    3c92:	8d 40       	sbci	r24, 0x0D	; 13
    3c94:	90 40       	sbci	r25, 0x00	; 0
    3c96:	08 f4       	brcc	.+2      	; 0x3c9a <_ZN11TempControl11UpdateStateEv+0x196>
    3c98:	e4 c0       	rjmp	.+456    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
			_doPosPeakDetect = false;     // peak would be from drifting in idle, not from heating
    3c9a:	1b aa       	std	Y+51, r1	; 0x33
    3c9c:	e2 c0       	rjmp	.+452    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
		}
		break;
	case COOLING:
		_doNegPeakDetect = true;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	8a ab       	std	Y+50, r24	; 0x32
		_lastCoolTime = millis();
    3ca2:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    3ca6:	6a a3       	std	Y+34, r22	; 0x22
    3ca8:	7b a3       	std	Y+35, r23	; 0x23
    3caa:	8c a3       	std	Y+36, r24	; 0x24
    3cac:	9d a3       	std	Y+37, r25	; 0x25
		estimatedOvershoot = _coolOvershootEstimator  * min(MAX_COOL_TIME_FOR_ESTIMATE, (float) timeSinceIdle()/(1000))/60;
    3cae:	c8 5b       	subi	r28, 0xB8	; 184
    3cb0:	df 4f       	sbci	r29, 0xFF	; 255
    3cb2:	28 80       	ld	r2, Y
    3cb4:	39 80       	ldd	r3, Y+1	; 0x01
    3cb6:	4a 80       	ldd	r4, Y+2	; 0x02
    3cb8:	5b 80       	ldd	r5, Y+3	; 0x03
    3cba:	c8 54       	subi	r28, 0x48	; 72
    3cbc:	d0 40       	sbci	r29, 0x00	; 0
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN11TempControl13timeSinceIdleEv>
    3cc4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a e7       	ldi	r20, 0x7A	; 122
    3cce:	54 e4       	ldi	r21, 0x44	; 68
    3cd0:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	46 e9       	ldi	r20, 0x96	; 150
    3cda:	54 e4       	ldi	r21, 0x44	; 68
    3cdc:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3ce0:	18 16       	cp	r1, r24
    3ce2:	5c f4       	brge	.+22     	; 0x3cfa <_ZN11TempControl11UpdateStateEv+0x1f6>
    3ce4:	0f 2e       	mov	r0, r31
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	6f 2e       	mov	r6, r31
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	7f 2e       	mov	r7, r31
    3cee:	f6 e9       	ldi	r31, 0x96	; 150
    3cf0:	8f 2e       	mov	r8, r31
    3cf2:	f4 e4       	ldi	r31, 0x44	; 68
    3cf4:	9f 2e       	mov	r9, r31
    3cf6:	f0 2d       	mov	r31, r0
    3cf8:	0d c0       	rjmp	.+26     	; 0x3d14 <_ZN11TempControl11UpdateStateEv+0x210>
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN11TempControl13timeSinceIdleEv>
    3d00:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	4a e7       	ldi	r20, 0x7A	; 122
    3d0a:	54 e4       	ldi	r21, 0x44	; 68
    3d0c:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3d10:	3b 01       	movw	r6, r22
    3d12:	4c 01       	movw	r8, r24
		estimatedPeakTemperature = _fridgeTemp->GetTempActual() - estimatedOvershoot;
    3d14:	8c 81       	ldd	r24, Y+4	; 0x04
    3d16:	9d 81       	ldd	r25, Y+5	; 0x05
    3d18:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    3d1c:	7b 01       	movw	r14, r22
    3d1e:	8c 01       	movw	r16, r24
//		Serial.print(estimatedOvershoot);
//		Serial.print("\testimatedPeakTemperature:");
//		Serial.print(estimatedPeakTemperature);
//		Serial.print("\t_fridgeTemp->GetTempSetting() + COOLING_TARGET:");
//		Serial.println(_fridgeTemp->GetTempSetting() + COOLING_TARGET);
		if(estimatedPeakTemperature <= _fridgeTemp->GetTempSetting() + COOLING_TARGET){
    3d20:	8c 81       	ldd	r24, Y+4	; 0x04
    3d22:	9d 81       	ldd	r25, Y+5	; 0x05
    3d24:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3d28:	5b 01       	movw	r10, r22
    3d2a:	6c 01       	movw	r12, r24
    3d2c:	c2 01       	movw	r24, r4
    3d2e:	b1 01       	movw	r22, r2
    3d30:	a4 01       	movw	r20, r8
    3d32:	93 01       	movw	r18, r6
    3d34:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e7       	ldi	r20, 0x70	; 112
    3d3e:	52 e4       	ldi	r21, 0x42	; 66
    3d40:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3d44:	9b 01       	movw	r18, r22
    3d46:	ac 01       	movw	r20, r24
    3d48:	c8 01       	movw	r24, r16
    3d4a:	b7 01       	movw	r22, r14
    3d4c:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3d50:	7b 01       	movw	r14, r22
    3d52:	8c 01       	movw	r16, r24
    3d54:	c6 01       	movw	r24, r12
    3d56:	b5 01       	movw	r22, r10
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e0       	ldi	r20, 0x00	; 0
    3d5e:	50 e0       	ldi	r21, 0x00	; 0
    3d60:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3d64:	9b 01       	movw	r18, r22
    3d66:	ac 01       	movw	r20, r24
    3d68:	c8 01       	movw	r24, r16
    3d6a:	b7 01       	movw	r22, r14
    3d6c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3d70:	18 16       	cp	r1, r24
    3d72:	0c f4       	brge	.+2      	; 0x3d76 <_ZN11TempControl11UpdateStateEv+0x272>
    3d74:	76 c0       	rjmp	.+236    	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
			_SetNegPeakEstimate();
    3d76:	ce 01       	movw	r24, r28
    3d78:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN11TempControl19_SetNegPeakEstimateEv>
    3d7c:	6e c0       	rjmp	.+220    	; 0x3e5a <_ZN11TempControl11UpdateStateEv+0x356>
			_state=IDLE;
			return;
		}
		break;
	case HEATING:
		_lastHeatTime=millis();
    3d7e:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    3d82:	6e a3       	std	Y+38, r22	; 0x26
    3d84:	7f a3       	std	Y+39, r23	; 0x27
    3d86:	88 a7       	std	Y+40, r24	; 0x28
    3d88:	99 a7       	std	Y+41, r25	; 0x29
		_doPosPeakDetect = true;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	8b ab       	std	Y+51, r24	; 0x33
		estimatedOvershoot = _heatOvershootEstimator * min(MAX_HEAT_TIME_FOR_ESTIMATE, (float) timeSinceIdle()/(1000))/60;
    3d8e:	cc 5b       	subi	r28, 0xBC	; 188
    3d90:	df 4f       	sbci	r29, 0xFF	; 255
    3d92:	28 80       	ld	r2, Y
    3d94:	39 80       	ldd	r3, Y+1	; 0x01
    3d96:	4a 80       	ldd	r4, Y+2	; 0x02
    3d98:	5b 80       	ldd	r5, Y+3	; 0x03
    3d9a:	c4 54       	subi	r28, 0x44	; 68
    3d9c:	d0 40       	sbci	r29, 0x00	; 0
    3d9e:	ce 01       	movw	r24, r28
    3da0:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN11TempControl13timeSinceIdleEv>
    3da4:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	4a e7       	ldi	r20, 0x7A	; 122
    3dae:	54 e4       	ldi	r21, 0x44	; 68
    3db0:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	46 e1       	ldi	r20, 0x16	; 22
    3dba:	54 e4       	ldi	r21, 0x44	; 68
    3dbc:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3dc0:	18 16       	cp	r1, r24
    3dc2:	5c f4       	brge	.+22     	; 0x3dda <_ZN11TempControl11UpdateStateEv+0x2d6>
    3dc4:	0f 2e       	mov	r0, r31
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	6f 2e       	mov	r6, r31
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	7f 2e       	mov	r7, r31
    3dce:	f6 e1       	ldi	r31, 0x16	; 22
    3dd0:	8f 2e       	mov	r8, r31
    3dd2:	f4 e4       	ldi	r31, 0x44	; 68
    3dd4:	9f 2e       	mov	r9, r31
    3dd6:	f0 2d       	mov	r31, r0
    3dd8:	0d c0       	rjmp	.+26     	; 0x3df4 <_ZN11TempControl11UpdateStateEv+0x2f0>
    3dda:	ce 01       	movw	r24, r28
    3ddc:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN11TempControl13timeSinceIdleEv>
    3de0:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a e7       	ldi	r20, 0x7A	; 122
    3dea:	54 e4       	ldi	r21, 0x44	; 68
    3dec:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3df0:	3b 01       	movw	r6, r22
    3df2:	4c 01       	movw	r8, r24
		estimatedPeakTemperature = _fridgeTemp->GetTempActual() + estimatedOvershoot;
    3df4:	8c 81       	ldd	r24, Y+4	; 0x04
    3df6:	9d 81       	ldd	r25, Y+5	; 0x05
    3df8:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    3dfc:	7b 01       	movw	r14, r22
    3dfe:	8c 01       	movw	r16, r24
		if(estimatedPeakTemperature >= _fridgeTemp->GetTempSetting() + HEATING_TARGET){
    3e00:	8c 81       	ldd	r24, Y+4	; 0x04
    3e02:	9d 81       	ldd	r25, Y+5	; 0x05
    3e04:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    3e08:	5b 01       	movw	r10, r22
    3e0a:	6c 01       	movw	r12, r24
    3e0c:	c2 01       	movw	r24, r4
    3e0e:	b1 01       	movw	r22, r2
    3e10:	a4 01       	movw	r20, r8
    3e12:	93 01       	movw	r18, r6
    3e14:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	40 e7       	ldi	r20, 0x70	; 112
    3e1e:	52 e4       	ldi	r21, 0x42	; 66
    3e20:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    3e24:	9b 01       	movw	r18, r22
    3e26:	ac 01       	movw	r20, r24
    3e28:	c8 01       	movw	r24, r16
    3e2a:	b7 01       	movw	r22, r14
    3e2c:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3e30:	7b 01       	movw	r14, r22
    3e32:	8c 01       	movw	r16, r24
    3e34:	c6 01       	movw	r24, r12
    3e36:	b5 01       	movw	r22, r10
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	40 e0       	ldi	r20, 0x00	; 0
    3e3e:	50 e0       	ldi	r21, 0x00	; 0
    3e40:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3e44:	9b 01       	movw	r18, r22
    3e46:	ac 01       	movw	r20, r24
    3e48:	c8 01       	movw	r24, r16
    3e4a:	b7 01       	movw	r22, r14
    3e4c:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3e50:	88 23       	and	r24, r24
    3e52:	3c f0       	brlt	.+14     	; 0x3e62 <_ZN11TempControl11UpdateStateEv+0x35e>
			_SetPosPeakEstimate();
    3e54:	ce 01       	movw	r24, r28
    3e56:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN11TempControl19_SetPosPeakEstimateEv>
		//			serialFridgeMessage(FRIDGE_DOOR_CLOSED);
		//			_state=IDLE;
		return;
	case UNKNOWN:
	default:
		_state = IDLE; //go to unknown state, should never happen
    3e5a:	83 e0       	ldi	r24, 0x03	; 3
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	9b 8b       	std	Y+19, r25	; 0x13
    3e60:	8a 8b       	std	Y+18, r24	; 0x12
		break;
	}
}
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	ff 90       	pop	r15
    3e6c:	ef 90       	pop	r14
    3e6e:	df 90       	pop	r13
    3e70:	cf 90       	pop	r12
    3e72:	bf 90       	pop	r11
    3e74:	af 90       	pop	r10
    3e76:	9f 90       	pop	r9
    3e78:	8f 90       	pop	r8
    3e7a:	7f 90       	pop	r7
    3e7c:	6f 90       	pop	r6
    3e7e:	5f 90       	pop	r5
    3e80:	4f 90       	pop	r4
    3e82:	3f 90       	pop	r3
    3e84:	2f 90       	pop	r2
    3e86:	08 95       	ret

00003e88 <_ZN11TempControl17UpdatePIDSettingsEv>:
	//Run through the updates

}

// update fridge temperature setting, difference with beer setting is PID actuator
void TempControl::UpdatePIDSettings(void){
    3e88:	8f 92       	push	r8
    3e8a:	9f 92       	push	r9
    3e8c:	af 92       	push	r10
    3e8e:	bf 92       	push	r11
    3e90:	cf 92       	push	r12
    3e92:	df 92       	push	r13
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	ec 01       	movw	r28, r24
	if(_mode == BEER_CONSTANT || _mode == BEER_PROFILE){
    3ea2:	8c 89       	ldd	r24, Y+20	; 0x14
    3ea4:	9d 89       	ldd	r25, Y+21	; 0x15
    3ea6:	01 97       	sbiw	r24, 0x01	; 1
    3ea8:	02 97       	sbiw	r24, 0x02	; 2
    3eaa:	08 f0       	brcs	.+2      	; 0x3eae <_ZN11TempControl17UpdatePIDSettingsEv+0x26>
    3eac:	e5 c1       	rjmp	.+970    	; 0x4278 <_ZN11TempControl17UpdatePIDSettingsEv+0x3f0>
		float beerTemperatureDifference =  _beerTemp->GetTempSetting() - _beerTemp->TempFiltSlow[3];
    3eae:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3eb2:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    3eb6:	0a 81       	ldd	r16, Y+2	; 0x02
    3eb8:	1b 81       	ldd	r17, Y+3	; 0x03
    3eba:	f8 01       	movw	r30, r16
    3ebc:	fe 96       	adiw	r30, 0x3e	; 62
    3ebe:	20 81       	ld	r18, Z
    3ec0:	31 81       	ldd	r19, Z+1	; 0x01
    3ec2:	42 81       	ldd	r20, Z+2	; 0x02
    3ec4:	53 81       	ldd	r21, Z+3	; 0x03
    3ec6:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    3eca:	5b 01       	movw	r10, r22
    3ecc:	6c 01       	movw	r12, r24
		if((abs(beerTemperatureDifference) < 5)
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e0       	ldi	r20, 0x00	; 0
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3eda:	18 16       	cp	r1, r24
    3edc:	5c f4       	brge	.+22     	; 0x3ef4 <_ZN11TempControl17UpdatePIDSettingsEv+0x6c>
    3ede:	c6 01       	movw	r24, r12
    3ee0:	b5 01       	movw	r22, r10
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	40 ea       	ldi	r20, 0xA0	; 160
    3ee8:	50 e4       	ldi	r21, 0x40	; 64
    3eea:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3eee:	87 fd       	sbrc	r24, 7
    3ef0:	0c c0       	rjmp	.+24     	; 0x3f0a <_ZN11TempControl17UpdatePIDSettingsEv+0x82>
    3ef2:	62 c0       	rjmp	.+196    	; 0x3fb8 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3ef4:	c6 01       	movw	r24, r12
    3ef6:	b5 01       	movw	r22, r10
    3ef8:	20 e0       	ldi	r18, 0x00	; 0
    3efa:	30 e0       	ldi	r19, 0x00	; 0
    3efc:	40 ea       	ldi	r20, 0xA0	; 160
    3efe:	50 ec       	ldi	r21, 0xC0	; 192
    3f00:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3f04:	18 16       	cp	r1, r24
    3f06:	0c f0       	brlt	.+2      	; 0x3f0a <_ZN11TempControl17UpdatePIDSettingsEv+0x82>
    3f08:	57 c0       	rjmp	.+174    	; 0x3fb8 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3f0a:	0e 5b       	subi	r16, 0xBE	; 190
    3f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0e:	f8 01       	movw	r30, r16
    3f10:	e0 80       	ld	r14, Z
    3f12:	f1 80       	ldd	r15, Z+1	; 0x01
    3f14:	02 81       	ldd	r16, Z+2	; 0x02
    3f16:	13 81       	ldd	r17, Z+3	; 0x03
    3f18:	c8 01       	movw	r24, r16
    3f1a:	b7 01       	movw	r22, r14
    3f1c:	23 e3       	ldi	r18, 0x33	; 51
    3f1e:	33 e3       	ldi	r19, 0x33	; 51
    3f20:	43 e3       	ldi	r20, 0x33	; 51
    3f22:	5f e3       	ldi	r21, 0x3F	; 63
    3f24:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3f28:	18 16       	cp	r1, r24
    3f2a:	54 f0       	brlt	.+20     	; 0x3f40 <_ZN11TempControl17UpdatePIDSettingsEv+0xb8>
    3f2c:	c8 01       	movw	r24, r16
    3f2e:	b7 01       	movw	r22, r14
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3f3c:	87 ff       	sbrs	r24, 7
    3f3e:	14 c0       	rjmp	.+40     	; 0x3f68 <_ZN11TempControl17UpdatePIDSettingsEv+0xe0>
    3f40:	c8 01       	movw	r24, r16
    3f42:	b7 01       	movw	r22, r14
    3f44:	23 e3       	ldi	r18, 0x33	; 51
    3f46:	33 e3       	ldi	r19, 0x33	; 51
    3f48:	43 eb       	ldi	r20, 0xB3	; 179
    3f4a:	5f eb       	ldi	r21, 0xBF	; 191
    3f4c:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3f50:	88 23       	and	r24, r24
    3f52:	94 f1       	brlt	.+100    	; 0x3fb8 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
    3f54:	c8 01       	movw	r24, r16
    3f56:	b7 01       	movw	r22, r14
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3f64:	18 16       	cp	r1, r24
    3f66:	44 f1       	brlt	.+80     	; 0x3fb8 <_ZN11TempControl17UpdatePIDSettingsEv+0x130>
				&& ((_beerTemp->Slope <= 0.7 && _beerTemp->Slope >= 0)
				|| (_beerTemp->Slope >= -1.4 && _beerTemp->Slope <= 0))){     //difference is smaller than .5 degree and slope is almost horizontal
			if(abs(beerTemperatureDifference)> 0.5){
    3f68:	c6 01       	movw	r24, r12
    3f6a:	b5 01       	movw	r22, r10
    3f6c:	20 e0       	ldi	r18, 0x00	; 0
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	40 e0       	ldi	r20, 0x00	; 0
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3f78:	18 16       	cp	r1, r24
    3f7a:	5c f4       	brge	.+22     	; 0x3f92 <_ZN11TempControl17UpdatePIDSettingsEv+0x10a>
    3f7c:	c6 01       	movw	r24, r12
    3f7e:	b5 01       	movw	r22, r10
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e0       	ldi	r20, 0x00	; 0
    3f86:	5f e3       	ldi	r21, 0x3F	; 63
    3f88:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    3f8c:	18 16       	cp	r1, r24
    3f8e:	5c f0       	brlt	.+22     	; 0x3fa6 <_ZN11TempControl17UpdatePIDSettingsEv+0x11e>
    3f90:	21 c0       	rjmp	.+66     	; 0x3fd4 <_ZN11TempControl17UpdatePIDSettingsEv+0x14c>
    3f92:	c6 01       	movw	r24, r12
    3f94:	b5 01       	movw	r22, r10
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	30 e0       	ldi	r19, 0x00	; 0
    3f9a:	40 e0       	ldi	r20, 0x00	; 0
    3f9c:	5f eb       	ldi	r21, 0xBF	; 191
    3f9e:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    3fa2:	88 23       	and	r24, r24
    3fa4:	bc f4       	brge	.+46     	; 0x3fd4 <_ZN11TempControl17UpdatePIDSettingsEv+0x14c>
				differenceIntegral = differenceIntegral + beerTemperatureDifference;
    3fa6:	6e a5       	ldd	r22, Y+46	; 0x2e
    3fa8:	7f a5       	ldd	r23, Y+47	; 0x2f
    3faa:	88 a9       	ldd	r24, Y+48	; 0x30
    3fac:	99 a9       	ldd	r25, Y+49	; 0x31
    3fae:	a6 01       	movw	r20, r12
    3fb0:	95 01       	movw	r18, r10
    3fb2:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3fb6:	0a c0       	rjmp	.+20     	; 0x3fcc <_ZN11TempControl17UpdatePIDSettingsEv+0x144>
			}
		}
		else{
			differenceIntegral = differenceIntegral*0.9;
    3fb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    3fba:	7f a5       	ldd	r23, Y+47	; 0x2f
    3fbc:	88 a9       	ldd	r24, Y+48	; 0x30
    3fbe:	99 a9       	ldd	r25, Y+49	; 0x31
    3fc0:	26 e6       	ldi	r18, 0x66	; 102
    3fc2:	36 e6       	ldi	r19, 0x66	; 102
    3fc4:	46 e6       	ldi	r20, 0x66	; 102
    3fc6:	5f e3       	ldi	r21, 0x3F	; 63
    3fc8:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    3fcc:	6e a7       	std	Y+46, r22	; 0x2e
    3fce:	7f a7       	std	Y+47, r23	; 0x2f
    3fd0:	88 ab       	std	Y+48, r24	; 0x30
    3fd2:	99 ab       	std	Y+49, r25	; 0x31
		}

		if(beerTemperatureDifference<0){ //linearly go to cool parameters in 3 hours
    3fd4:	c6 01       	movw	r24, r12
    3fd6:	b5 01       	movw	r22, r10
    3fd8:	20 e0       	ldi	r18, 0x00	; 0
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	40 e0       	ldi	r20, 0x00	; 0
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
			_Kp = constrain(_Kp + (KpCool-KpHeat)/(360*3), KpCool, KpHeat);
			_Kd = constrain(_Kd + (KdCool-KdHeat)/(360*3), KdHeat, KdCool);
		}
		else{ //linearly go to heat parameters in 3 hours
			_Kp = constrain(_Kp + (KpHeat-KpCool)/(360*3), KpCool, KpHeat);
    3fe4:	6e 89       	ldd	r22, Y+22	; 0x16
    3fe6:	7f 89       	ldd	r23, Y+23	; 0x17
    3fe8:	88 8d       	ldd	r24, Y+24	; 0x18
    3fea:	99 8d       	ldd	r25, Y+25	; 0x19
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	50 e0       	ldi	r21, 0x00	; 0
    3ff4:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    3ff8:	7b 01       	movw	r14, r22
    3ffa:	8c 01       	movw	r16, r24
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 ea       	ldi	r20, 0xA0	; 160
    4002:	50 e4       	ldi	r21, 0x40	; 64
    4004:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    4008:	88 23       	and	r24, r24
    400a:	5c f4       	brge	.+22     	; 0x4022 <_ZN11TempControl17UpdatePIDSettingsEv+0x19a>
    400c:	0f 2e       	mov	r0, r31
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	ef 2e       	mov	r14, r31
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	ff 2e       	mov	r15, r31
    4016:	f0 ea       	ldi	r31, 0xA0	; 160
    4018:	0f 2f       	mov	r16, r31
    401a:	f0 e4       	ldi	r31, 0x40	; 64
    401c:	1f 2f       	mov	r17, r31
    401e:	f0 2d       	mov	r31, r0
    4020:	14 c0       	rjmp	.+40     	; 0x404a <_ZN11TempControl17UpdatePIDSettingsEv+0x1c2>
    4022:	c8 01       	movw	r24, r16
    4024:	b7 01       	movw	r22, r14
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e2       	ldi	r20, 0x20	; 32
    402c:	51 e4       	ldi	r21, 0x41	; 65
    402e:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    4032:	18 16       	cp	r1, r24
    4034:	54 f4       	brge	.+20     	; 0x404a <_ZN11TempControl17UpdatePIDSettingsEv+0x1c2>
    4036:	0f 2e       	mov	r0, r31
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	ef 2e       	mov	r14, r31
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	ff 2e       	mov	r15, r31
    4040:	f0 e2       	ldi	r31, 0x20	; 32
    4042:	0f 2f       	mov	r16, r31
    4044:	f1 e4       	ldi	r31, 0x41	; 65
    4046:	1f 2f       	mov	r17, r31
    4048:	f0 2d       	mov	r31, r0
    404a:	ee 8a       	std	Y+22, r14	; 0x16
    404c:	ff 8a       	std	Y+23, r15	; 0x17
    404e:	08 8f       	std	Y+24, r16	; 0x18
    4050:	19 8f       	std	Y+25, r17	; 0x19
			_Kd = constrain(_Kd + (KdHeat-KdCool)/(360*3), KdHeat, KdCool);
    4052:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4054:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4056:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4058:	9d 8d       	ldd	r25, Y+29	; 0x1d
    405a:	20 e0       	ldi	r18, 0x00	; 0
    405c:	30 e0       	ldi	r19, 0x00	; 0
    405e:	40 e0       	ldi	r20, 0x00	; 0
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4066:	7b 01       	movw	r14, r22
    4068:	8c 01       	movw	r16, r24
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e2       	ldi	r20, 0x20	; 32
    4070:	51 ec       	ldi	r21, 0xC1	; 193
    4072:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    4076:	88 23       	and	r24, r24
    4078:	5c f4       	brge	.+22     	; 0x4090 <_ZN11TempControl17UpdatePIDSettingsEv+0x208>
    407a:	0f 2e       	mov	r0, r31
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	ef 2e       	mov	r14, r31
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	ff 2e       	mov	r15, r31
    4084:	f0 e2       	ldi	r31, 0x20	; 32
    4086:	0f 2f       	mov	r16, r31
    4088:	f1 ec       	ldi	r31, 0xC1	; 193
    408a:	1f 2f       	mov	r17, r31
    408c:	f0 2d       	mov	r31, r0
    408e:	14 c0       	rjmp	.+40     	; 0x40b8 <_ZN11TempControl17UpdatePIDSettingsEv+0x230>
    4090:	c8 01       	movw	r24, r16
    4092:	b7 01       	movw	r22, r14
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 ea       	ldi	r20, 0xA0	; 160
    409a:	50 ec       	ldi	r21, 0xC0	; 192
    409c:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    40a0:	18 16       	cp	r1, r24
    40a2:	54 f4       	brge	.+20     	; 0x40b8 <_ZN11TempControl17UpdatePIDSettingsEv+0x230>
    40a4:	0f 2e       	mov	r0, r31
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	ef 2e       	mov	r14, r31
    40aa:	f0 e0       	ldi	r31, 0x00	; 0
    40ac:	ff 2e       	mov	r15, r31
    40ae:	f0 ea       	ldi	r31, 0xA0	; 160
    40b0:	0f 2f       	mov	r16, r31
    40b2:	f0 ec       	ldi	r31, 0xC0	; 192
    40b4:	1f 2f       	mov	r17, r31
    40b6:	f0 2d       	mov	r31, r0
    40b8:	ea 8e       	std	Y+26, r14	; 0x1a
    40ba:	fb 8e       	std	Y+27, r15	; 0x1b
    40bc:	0c 8f       	std	Y+28, r16	; 0x1c
    40be:	1d 8f       	std	Y+29, r17	; 0x1d
		}
		_beerTemp->SetTempSetting(constrain(_beerTemp->GetTempSetting() + (_Kp * beerTemperatureDifference) + (_Ki * differenceIntegral) + (_Kd * _beerTemp->Slope), 40, 300));
    40c0:	8a 81       	ldd	r24, Y+2	; 0x02
    40c2:	9b 81       	ldd	r25, Y+3	; 0x03
    40c4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    40c8:	7b 01       	movw	r14, r22
    40ca:	8c 01       	movw	r16, r24
    40cc:	8a 80       	ldd	r8, Y+2	; 0x02
    40ce:	9b 80       	ldd	r9, Y+3	; 0x03
    40d0:	c6 01       	movw	r24, r12
    40d2:	b5 01       	movw	r22, r10
    40d4:	2e 89       	ldd	r18, Y+22	; 0x16
    40d6:	3f 89       	ldd	r19, Y+23	; 0x17
    40d8:	48 8d       	ldd	r20, Y+24	; 0x18
    40da:	59 8d       	ldd	r21, Y+25	; 0x19
    40dc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    40e0:	9b 01       	movw	r18, r22
    40e2:	ac 01       	movw	r20, r24
    40e4:	c8 01       	movw	r24, r16
    40e6:	b7 01       	movw	r22, r14
    40e8:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    40ec:	7b 01       	movw	r14, r22
    40ee:	8c 01       	movw	r16, r24
    40f0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    40f2:	7f 8d       	ldd	r23, Y+31	; 0x1f
    40f4:	88 a1       	ldd	r24, Y+32	; 0x20
    40f6:	99 a1       	ldd	r25, Y+33	; 0x21
    40f8:	2e a5       	ldd	r18, Y+46	; 0x2e
    40fa:	3f a5       	ldd	r19, Y+47	; 0x2f
    40fc:	48 a9       	ldd	r20, Y+48	; 0x30
    40fe:	59 a9       	ldd	r21, Y+49	; 0x31
    4100:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4104:	9b 01       	movw	r18, r22
    4106:	ac 01       	movw	r20, r24
    4108:	c8 01       	movw	r24, r16
    410a:	b7 01       	movw	r22, r14
    410c:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4110:	7b 01       	movw	r14, r22
    4112:	8c 01       	movw	r16, r24
    4114:	f4 01       	movw	r30, r8
    4116:	ee 5b       	subi	r30, 0xBE	; 190
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    411c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    411e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4120:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4122:	20 81       	ld	r18, Z
    4124:	31 81       	ldd	r19, Z+1	; 0x01
    4126:	42 81       	ldd	r20, Z+2	; 0x02
    4128:	53 81       	ldd	r21, Z+3	; 0x03
    412a:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    412e:	9b 01       	movw	r18, r22
    4130:	ac 01       	movw	r20, r24
    4132:	c8 01       	movw	r24, r16
    4134:	b7 01       	movw	r22, r14
    4136:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    413a:	20 e0       	ldi	r18, 0x00	; 0
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	40 e2       	ldi	r20, 0x20	; 32
    4140:	52 e4       	ldi	r21, 0x42	; 66
    4142:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    4146:	88 23       	and	r24, r24
    4148:	2c f4       	brge	.+10     	; 0x4154 <_ZN11TempControl17UpdatePIDSettingsEv+0x2cc>
    414a:	a0 e0       	ldi	r26, 0x00	; 0
    414c:	50 e0       	ldi	r21, 0x00	; 0
    414e:	40 e2       	ldi	r20, 0x20	; 32
    4150:	62 e4       	ldi	r22, 0x42	; 66
    4152:	89 c0       	rjmp	.+274    	; 0x4266 <_ZN11TempControl17UpdatePIDSettingsEv+0x3de>
    4154:	c4 01       	movw	r24, r8
    4156:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    415a:	7b 01       	movw	r14, r22
    415c:	8c 01       	movw	r16, r24
    415e:	8a 80       	ldd	r8, Y+2	; 0x02
    4160:	9b 80       	ldd	r9, Y+3	; 0x03
    4162:	c6 01       	movw	r24, r12
    4164:	b5 01       	movw	r22, r10
    4166:	2e 89       	ldd	r18, Y+22	; 0x16
    4168:	3f 89       	ldd	r19, Y+23	; 0x17
    416a:	48 8d       	ldd	r20, Y+24	; 0x18
    416c:	59 8d       	ldd	r21, Y+25	; 0x19
    416e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4172:	9b 01       	movw	r18, r22
    4174:	ac 01       	movw	r20, r24
    4176:	c8 01       	movw	r24, r16
    4178:	b7 01       	movw	r22, r14
    417a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    417e:	7b 01       	movw	r14, r22
    4180:	8c 01       	movw	r16, r24
    4182:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4184:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4186:	88 a1       	ldd	r24, Y+32	; 0x20
    4188:	99 a1       	ldd	r25, Y+33	; 0x21
    418a:	2e a5       	ldd	r18, Y+46	; 0x2e
    418c:	3f a5       	ldd	r19, Y+47	; 0x2f
    418e:	48 a9       	ldd	r20, Y+48	; 0x30
    4190:	59 a9       	ldd	r21, Y+49	; 0x31
    4192:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4196:	9b 01       	movw	r18, r22
    4198:	ac 01       	movw	r20, r24
    419a:	c8 01       	movw	r24, r16
    419c:	b7 01       	movw	r22, r14
    419e:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    41a2:	7b 01       	movw	r14, r22
    41a4:	8c 01       	movw	r16, r24
    41a6:	f4 01       	movw	r30, r8
    41a8:	ee 5b       	subi	r30, 0xBE	; 190
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    41ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    41b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41b4:	20 81       	ld	r18, Z
    41b6:	31 81       	ldd	r19, Z+1	; 0x01
    41b8:	42 81       	ldd	r20, Z+2	; 0x02
    41ba:	53 81       	ldd	r21, Z+3	; 0x03
    41bc:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    41c0:	9b 01       	movw	r18, r22
    41c2:	ac 01       	movw	r20, r24
    41c4:	c8 01       	movw	r24, r16
    41c6:	b7 01       	movw	r22, r14
    41c8:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	46 e9       	ldi	r20, 0x96	; 150
    41d2:	53 e4       	ldi	r21, 0x43	; 67
    41d4:	0e 94 46 2b 	call	0x568c	; 0x568c <__gesf2>
    41d8:	18 16       	cp	r1, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <_ZN11TempControl17UpdatePIDSettingsEv+0x35e>
    41dc:	a0 e0       	ldi	r26, 0x00	; 0
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	46 e9       	ldi	r20, 0x96	; 150
    41e2:	63 e4       	ldi	r22, 0x43	; 67
    41e4:	40 c0       	rjmp	.+128    	; 0x4266 <_ZN11TempControl17UpdatePIDSettingsEv+0x3de>
    41e6:	c4 01       	movw	r24, r8
    41e8:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    41ec:	7b 01       	movw	r14, r22
    41ee:	8c 01       	movw	r16, r24
    41f0:	8a 80       	ldd	r8, Y+2	; 0x02
    41f2:	9b 80       	ldd	r9, Y+3	; 0x03
    41f4:	c6 01       	movw	r24, r12
    41f6:	b5 01       	movw	r22, r10
    41f8:	2e 89       	ldd	r18, Y+22	; 0x16
    41fa:	3f 89       	ldd	r19, Y+23	; 0x17
    41fc:	48 8d       	ldd	r20, Y+24	; 0x18
    41fe:	59 8d       	ldd	r21, Y+25	; 0x19
    4200:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4204:	9b 01       	movw	r18, r22
    4206:	ac 01       	movw	r20, r24
    4208:	c8 01       	movw	r24, r16
    420a:	b7 01       	movw	r22, r14
    420c:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4210:	7b 01       	movw	r14, r22
    4212:	8c 01       	movw	r16, r24
    4214:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4216:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4218:	88 a1       	ldd	r24, Y+32	; 0x20
    421a:	99 a1       	ldd	r25, Y+33	; 0x21
    421c:	2e a5       	ldd	r18, Y+46	; 0x2e
    421e:	3f a5       	ldd	r19, Y+47	; 0x2f
    4220:	48 a9       	ldd	r20, Y+48	; 0x30
    4222:	59 a9       	ldd	r21, Y+49	; 0x31
    4224:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4228:	9b 01       	movw	r18, r22
    422a:	ac 01       	movw	r20, r24
    422c:	c8 01       	movw	r24, r16
    422e:	b7 01       	movw	r22, r14
    4230:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4234:	7b 01       	movw	r14, r22
    4236:	8c 01       	movw	r16, r24
    4238:	f4 01       	movw	r30, r8
    423a:	ee 5b       	subi	r30, 0xBE	; 190
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4240:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4242:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4244:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4246:	20 81       	ld	r18, Z
    4248:	31 81       	ldd	r19, Z+1	; 0x01
    424a:	42 81       	ldd	r20, Z+2	; 0x02
    424c:	53 81       	ldd	r21, Z+3	; 0x03
    424e:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4252:	9b 01       	movw	r18, r22
    4254:	ac 01       	movw	r20, r24
    4256:	c8 01       	movw	r24, r16
    4258:	b7 01       	movw	r22, r14
    425a:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    425e:	a6 2f       	mov	r26, r22
    4260:	57 2f       	mov	r21, r23
    4262:	48 2f       	mov	r20, r24
    4264:	69 2f       	mov	r22, r25
    4266:	c4 01       	movw	r24, r8
    4268:	2a 2f       	mov	r18, r26
    426a:	35 2f       	mov	r19, r21
    426c:	e4 2f       	mov	r30, r20
    426e:	f6 2f       	mov	r31, r22
    4270:	a9 01       	movw	r20, r18
    4272:	bf 01       	movw	r22, r30
    4274:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <_ZN18BeerTempController14SetTempSettingEf>
		// _beerTemp->SetTempSetting(0.0);
	}
	else{
		// something is horribly wrong
	}
}
    4278:	df 91       	pop	r29
    427a:	cf 91       	pop	r28
    427c:	1f 91       	pop	r17
    427e:	0f 91       	pop	r16
    4280:	ff 90       	pop	r15
    4282:	ef 90       	pop	r14
    4284:	df 90       	pop	r13
    4286:	cf 90       	pop	r12
    4288:	bf 90       	pop	r11
    428a:	af 90       	pop	r10
    428c:	9f 90       	pop	r9
    428e:	8f 90       	pop	r8
    4290:	08 95       	ret

00004292 <_ZN11TempControl11UpdateTimerEv>:
	//	Serial.println("tempControlUpdate");
	UpdateTimer();
	//	Serial.println("DoneUpdate");
}

void TempControl::UpdateTimer()
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	ec 01       	movw	r28, r24
{
	char stateStrDest[20];
	_timer+=200;
    4298:	6e 85       	ldd	r22, Y+14	; 0x0e
    429a:	7f 85       	ldd	r23, Y+15	; 0x0f
    429c:	88 89       	ldd	r24, Y+16	; 0x10
    429e:	99 89       	ldd	r25, Y+17	; 0x11
    42a0:	68 53       	subi	r22, 0x38	; 56
    42a2:	7f 4f       	sbci	r23, 0xFF	; 255
    42a4:	8f 4f       	sbci	r24, 0xFF	; 255
    42a6:	9f 4f       	sbci	r25, 0xFF	; 255
    42a8:	6e 87       	std	Y+14, r22	; 0x0e
    42aa:	7f 87       	std	Y+15, r23	; 0x0f
    42ac:	88 8b       	std	Y+16, r24	; 0x10
    42ae:	99 8b       	std	Y+17, r25	; 0x11
//	Serial.println();
//	Serial.print("_timer in UpdateTimer:");
//	Serial.println(_timer);
	//Check the timers
	if((_timer % 10000) == 0){		// Every 10 seconds
    42b0:	20 e1       	ldi	r18, 0x10	; 16
    42b2:	37 e2       	ldi	r19, 0x27	; 39
    42b4:	40 e0       	ldi	r20, 0x00	; 0
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    42bc:	61 15       	cp	r22, r1
    42be:	71 05       	cpc	r23, r1
    42c0:	81 05       	cpc	r24, r1
    42c2:	91 05       	cpc	r25, r1
    42c4:	09 f0       	breq	.+2      	; 0x42c8 <_ZN11TempControl11UpdateTimerEv+0x36>
    42c6:	43 c0       	rjmp	.+134    	; 0x434e <_ZN11TempControl11UpdateTimerEv+0xbc>
		detectPeaks();			// Detect Pos and Neg Temp Peaks
    42c8:	ce 01       	movw	r24, r28
    42ca:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_ZN11TempControl11detectPeaksEv>
		UpdatePIDSettings();	// Update Kp, Ki and Kd settings
    42ce:	ce 01       	movw	r24, r28
    42d0:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN11TempControl17UpdatePIDSettingsEv>

		Serial.print(_fridgeTemp->GetTempActual());
    42d4:	8c 81       	ldd	r24, Y+4	; 0x04
    42d6:	9d 81       	ldd	r25, Y+5	; 0x05
    42d8:	0e 94 87 14 	call	0x290e	; 0x290e <_ZN20FridgeTempController13GetTempActualEv>
    42dc:	ab 01       	movw	r20, r22
    42de:	bc 01       	movw	r22, r24
    42e0:	82 e4       	ldi	r24, 0x42	; 66
    42e2:	93 e0       	ldi	r25, 0x03	; 3
    42e4:	22 e0       	ldi	r18, 0x02	; 2
    42e6:	30 e0       	ldi	r19, 0x00	; 0
    42e8:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(_fridgeTemp->GetTempSetting());
    42ec:	8c 81       	ldd	r24, Y+4	; 0x04
    42ee:	9d 81       	ldd	r25, Y+5	; 0x05
    42f0:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    42f4:	ab 01       	movw	r20, r22
    42f6:	bc 01       	movw	r22, r24
    42f8:	82 e4       	ldi	r24, 0x42	; 66
    42fa:	93 e0       	ldi	r25, 0x03	; 3
    42fc:	22 e0       	ldi	r18, 0x02	; 2
    42fe:	30 e0       	ldi	r19, 0x00	; 0
    4300:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>
		Serial.print(_beerTemp->GetTempActual());
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
    4306:	9b 81       	ldd	r25, Y+3	; 0x03
    4308:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <_ZN18BeerTempController13GetTempActualEv>
    430c:	ab 01       	movw	r20, r22
    430e:	bc 01       	movw	r22, r24
    4310:	82 e4       	ldi	r24, 0x42	; 66
    4312:	93 e0       	ldi	r25, 0x03	; 3
    4314:	22 e0       	ldi	r18, 0x02	; 2
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <_ZN5Print5printEdi>

//		Serial.print("State set to [");
		Serial.print(GetStateStr());
    431c:	ce 01       	movw	r24, r28
    431e:	0e 94 de 1c 	call	0x39bc	; 0x39bc <_ZN11TempControl11GetStateStrEv>
    4322:	bc 01       	movw	r22, r24
    4324:	82 e4       	ldi	r24, 0x42	; 66
    4326:	93 e0       	ldi	r25, 0x03	; 3
    4328:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		Serial.print(',');
    432c:	82 e4       	ldi	r24, 0x42	; 66
    432e:	93 e0       	ldi	r25, 0x03	; 3
    4330:	6c e2       	ldi	r22, 0x2C	; 44
    4332:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <_ZN5Print5printEc>

//		Serial.print("\tMode set to [");
		Serial.print(GetModeStr());
    4336:	ce 01       	movw	r24, r28
    4338:	0e 94 2e 1d 	call	0x3a5c	; 0x3a5c <_ZN11TempControl10GetModeStrEv>
    433c:	bc 01       	movw	r22, r24
    433e:	82 e4       	ldi	r24, 0x42	; 66
    4340:	93 e0       	ldi	r25, 0x03	; 3
    4342:	0e 94 b7 26 	call	0x4d6e	; 0x4d6e <_ZN5Print5printEPKc>
		Serial.println();
    4346:	82 e4       	ldi	r24, 0x42	; 66
    4348:	93 e0       	ldi	r25, 0x03	; 3
    434a:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN5Print7printlnEv>

	}
	if((_timer % 1000) == 0){
    434e:	6e 85       	ldd	r22, Y+14	; 0x0e
    4350:	7f 85       	ldd	r23, Y+15	; 0x0f
    4352:	88 89       	ldd	r24, Y+16	; 0x10
    4354:	99 89       	ldd	r25, Y+17	; 0x11
    4356:	28 ee       	ldi	r18, 0xE8	; 232
    4358:	33 e0       	ldi	r19, 0x03	; 3
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    4362:	61 15       	cp	r22, r1
    4364:	71 05       	cpc	r23, r1
    4366:	81 05       	cpc	r24, r1
    4368:	91 05       	cpc	r25, r1
    436a:	31 f4       	brne	.+12     	; 0x4378 <_ZN11TempControl11UpdateTimerEv+0xe6>
//		GetModeStr(stateStrDest);
////		Serial.print("\tMode set to [");
//		Serial.print(stateStrDest);
//		Serial.print(',');

		UpdateState();			// Update State and Relay Outputs once a second
    436c:	ce 01       	movw	r24, r28
    436e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <_ZN11TempControl11UpdateStateEv>
		UpdateOutputs();
    4372:	ce 01       	movw	r24, r28
    4374:	0e 94 b7 1c 	call	0x396e	; 0x396e <_ZN11TempControl13UpdateOutputsEv>
//		GetModeStr(stateStrDest);
////		Serial.print("\tMode set to [");
//		Serial.print(stateStrDest);
//		Serial.println();
	}
	if((_timer % 60000)== 0)
    4378:	6e 85       	ldd	r22, Y+14	; 0x0e
    437a:	7f 85       	ldd	r23, Y+15	; 0x0f
    437c:	88 89       	ldd	r24, Y+16	; 0x10
    437e:	99 89       	ldd	r25, Y+17	; 0x11
    4380:	20 e6       	ldi	r18, 0x60	; 96
    4382:	3a ee       	ldi	r19, 0xEA	; 234
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	50 e0       	ldi	r21, 0x00	; 0
    4388:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    438c:	61 15       	cp	r22, r1
    438e:	71 05       	cpc	r23, r1
    4390:	81 05       	cpc	r24, r1
    4392:	91 05       	cpc	r25, r1
    4394:	21 f4       	brne	.+8      	; 0x439e <_ZN11TempControl11UpdateTimerEv+0x10c>
		_timer = 0;
    4396:	1e 86       	std	Y+14, r1	; 0x0e
    4398:	1f 86       	std	Y+15, r1	; 0x0f
    439a:	18 8a       	std	Y+16, r1	; 0x10
    439c:	19 8a       	std	Y+17, r1	; 0x11

}
    439e:	df 91       	pop	r29
    43a0:	cf 91       	pop	r28
    43a2:	08 95       	ret

000043a4 <_ZN11TempControl12UpdateTimersEv>:
		break;
	}
}

//Update the timers
void TempControl::UpdateTimers()
    43a4:	0f 93       	push	r16
    43a6:	1f 93       	push	r17
    43a8:	8c 01       	movw	r16, r24
{

	//	Serial.println("beerUpdate");
	_beerTemp->UpdateTimer();
    43aa:	fc 01       	movw	r30, r24
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	0e 94 b1 10 	call	0x2162	; 0x2162 <_ZN18BeerTempController11UpdateTimerEv>
	//	Serial.println("fridgeUpdate");
	_fridgeTemp->UpdateTimer();
    43b4:	f8 01       	movw	r30, r16
    43b6:	84 81       	ldd	r24, Z+4	; 0x04
    43b8:	95 81       	ldd	r25, Z+5	; 0x05
    43ba:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <_ZN20FridgeTempController11UpdateTimerEv>
	//	Serial.println("tempControlUpdate");
	UpdateTimer();
    43be:	c8 01       	movw	r24, r16
    43c0:	0e 94 49 21 	call	0x4292	; 0x4292 <_ZN11TempControl11UpdateTimerEv>
	//	Serial.println("DoneUpdate");
}
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	08 95       	ret

000043ca <_ZN11TempControl21SetCurrentTempSettingEc>:
	else {
		return _fridgeTemp->GetTempSetting()/10;
	}
}

void TempControl::SetCurrentTempSetting(char adj)
    43ca:	bf 92       	push	r11
    43cc:	cf 92       	push	r12
    43ce:	df 92       	push	r13
    43d0:	ef 92       	push	r14
    43d2:	ff 92       	push	r15
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	fc 01       	movw	r30, r24
    43da:	b6 2e       	mov	r11, r22
{
	if(_mode == BEER_CONSTANT){
    43dc:	84 89       	ldd	r24, Z+20	; 0x14
    43de:	95 89       	ldd	r25, Z+21	; 0x15
    43e0:	81 30       	cpi	r24, 0x01	; 1
    43e2:	91 05       	cpc	r25, r1
    43e4:	d9 f4       	brne	.+54     	; 0x441c <_ZN11TempControl21SetCurrentTempSettingEc+0x52>
		_beerTemp->SetTempSetting(_beerTemp->GetTempSetting() + (float)adj);
    43e6:	c2 80       	ldd	r12, Z+2	; 0x02
    43e8:	d3 80       	ldd	r13, Z+3	; 0x03
    43ea:	c6 01       	movw	r24, r12
    43ec:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN18BeerTempController14GetTempSettingEv>
    43f0:	7b 01       	movw	r14, r22
    43f2:	8c 01       	movw	r16, r24
    43f4:	6b 2d       	mov	r22, r11
    43f6:	77 27       	eor	r23, r23
    43f8:	67 fd       	sbrc	r22, 7
    43fa:	70 95       	com	r23
    43fc:	87 2f       	mov	r24, r23
    43fe:	97 2f       	mov	r25, r23
    4400:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
    4404:	9b 01       	movw	r18, r22
    4406:	ac 01       	movw	r20, r24
    4408:	c8 01       	movw	r24, r16
    440a:	b7 01       	movw	r22, r14
    440c:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4410:	ab 01       	movw	r20, r22
    4412:	bc 01       	movw	r22, r24
    4414:	c6 01       	movw	r24, r12
    4416:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <_ZN18BeerTempController14SetTempSettingEf>
    441a:	1c c0       	rjmp	.+56     	; 0x4454 <_ZN11TempControl21SetCurrentTempSettingEc+0x8a>
	}
	else if(_mode == FRIDGE_CONSTANT){
    441c:	89 2b       	or	r24, r25
    441e:	d1 f4       	brne	.+52     	; 0x4454 <_ZN11TempControl21SetCurrentTempSettingEc+0x8a>
		_fridgeTemp->SetTempSetting(_fridgeTemp->GetTempSetting() + (float)adj);
    4420:	c4 80       	ldd	r12, Z+4	; 0x04
    4422:	d5 80       	ldd	r13, Z+5	; 0x05
    4424:	c6 01       	movw	r24, r12
    4426:	0e 94 8f 14 	call	0x291e	; 0x291e <_ZN20FridgeTempController14GetTempSettingEv>
    442a:	7b 01       	movw	r14, r22
    442c:	8c 01       	movw	r16, r24
    442e:	6b 2d       	mov	r22, r11
    4430:	77 27       	eor	r23, r23
    4432:	67 fd       	sbrc	r22, 7
    4434:	70 95       	com	r23
    4436:	87 2f       	mov	r24, r23
    4438:	97 2f       	mov	r25, r23
    443a:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
    443e:	9b 01       	movw	r18, r22
    4440:	ac 01       	movw	r20, r24
    4442:	c8 01       	movw	r24, r16
    4444:	b7 01       	movw	r22, r14
    4446:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    444a:	ab 01       	movw	r20, r22
    444c:	bc 01       	movw	r22, r24
    444e:	c6 01       	movw	r24, r12
    4450:	0e 94 97 14 	call	0x292e	; 0x292e <_ZN20FridgeTempController14SetTempSettingEf>
	}
}
    4454:	1f 91       	pop	r17
    4456:	0f 91       	pop	r16
    4458:	ff 90       	pop	r15
    445a:	ef 90       	pop	r14
    445c:	df 90       	pop	r13
    445e:	cf 90       	pop	r12
    4460:	bf 90       	pop	r11
    4462:	08 95       	ret

00004464 <_ZN11TempControlD0Ev>:
	_coolOvershootEstimator = 5;

	_timer        = 0;
}

TempControl::~TempControl() {
    4464:	fc 01       	movw	r30, r24
    4466:	80 e3       	ldi	r24, 0x30	; 48
    4468:	92 e0       	ldi	r25, 0x02	; 2
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	80 83       	st	Z, r24
	// TODO Auto-generated destructor stub
}
    446e:	cf 01       	movw	r24, r30
    4470:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <_ZdlPv>
    4474:	08 95       	ret

00004476 <_ZN11TempControlC1Ev>:

#include "TempControl.h"
#include "OLEDFourBit.h"
#include "TCLExample.h"

TempControl::TempControl() {
    4476:	ef 92       	push	r14
    4478:	ff 92       	push	r15
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	8c 01       	movw	r16, r24
    4480:	80 e3       	ldi	r24, 0x30	; 48
    4482:	92 e0       	ldi	r25, 0x02	; 2
    4484:	f8 01       	movw	r30, r16
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	_Compressor = new Relay(2,true);
    448a:	82 e0       	ldi	r24, 0x02	; 2
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    4492:	f8 2e       	mov	r15, r24
    4494:	e9 2e       	mov	r14, r25
    4496:	62 e0       	ldi	r22, 0x02	; 2
    4498:	41 e0       	ldi	r20, 0x01	; 1
    449a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN5RelayC1Ehb>
    449e:	f8 01       	movw	r30, r16
    44a0:	f6 82       	std	Z+6, r15	; 0x06
    44a2:	e7 82       	std	Z+7, r14	; 0x07
	_Heater     = new Relay(10,true);
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    44ac:	f8 2e       	mov	r15, r24
    44ae:	e9 2e       	mov	r14, r25
    44b0:	6a e0       	ldi	r22, 0x0A	; 10
    44b2:	41 e0       	ldi	r20, 0x01	; 1
    44b4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <_ZN5RelayC1Ehb>
    44b8:	f8 01       	movw	r30, r16
    44ba:	f0 86       	std	Z+8, r15	; 0x08
    44bc:	e1 86       	std	Z+9, r14	; 0x09
	_beerTemp   = new BeerTempController("Beer", 1);
    44be:	8e ec       	ldi	r24, 0xCE	; 206
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    44c6:	f8 2e       	mov	r15, r24
    44c8:	e9 2e       	mov	r14, r25
    44ca:	66 ee       	ldi	r22, 0xE6	; 230
    44cc:	71 e0       	ldi	r23, 0x01	; 1
    44ce:	41 e0       	ldi	r20, 0x01	; 1
    44d0:	0e 94 41 11 	call	0x2282	; 0x2282 <_ZN18BeerTempControllerC1EPKch>
    44d4:	f8 01       	movw	r30, r16
    44d6:	f2 82       	std	Z+2, r15	; 0x02
    44d8:	e3 82       	std	Z+3, r14	; 0x03
	_fridgeTemp = new FridgeTempController();
    44da:	8d ec       	ldi	r24, 0xCD	; 205
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    44e2:	f8 2e       	mov	r15, r24
    44e4:	e9 2e       	mov	r14, r25
    44e6:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <_ZN20FridgeTempControllerC1Ev>
    44ea:	f8 01       	movw	r30, r16
    44ec:	f4 82       	std	Z+4, r15	; 0x04
    44ee:	e5 82       	std	Z+5, r14	; 0x05
	_settings   = new Settings();
    44f0:	82 e0       	ldi	r24, 0x02	; 2
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    44f8:	f8 2e       	mov	r15, r24
    44fa:	e9 2e       	mov	r14, r25
    44fc:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZN8SettingsC1Ev>
    4500:	f8 01       	movw	r30, r16
    4502:	f2 86       	std	Z+10, r15	; 0x0a
    4504:	e3 86       	std	Z+11, r14	; 0x0b

	_mode       = FRIDGE_CONSTANT;
    4506:	15 8a       	std	Z+21, r1	; 0x15
    4508:	14 8a       	std	Z+20, r1	; 0x14
	_state		= STARTUP;
    450a:	84 e0       	ldi	r24, 0x04	; 4
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	93 8b       	std	Z+19, r25	; 0x13
    4510:	82 8b       	std	Z+18, r24	; 0x12

	InitializePIDControl();
    4512:	c8 01       	movw	r24, r16
    4514:	0e 94 83 19 	call	0x3306	; 0x3306 <_ZN11TempControl20InitializePIDControlEv>
	UpdatePIDSettings();
    4518:	c8 01       	movw	r24, r16
    451a:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_ZN11TempControl17UpdatePIDSettingsEv>

	_lastCoolTime = 0;
    451e:	f8 01       	movw	r30, r16
    4520:	12 a2       	std	Z+34, r1	; 0x22
    4522:	13 a2       	std	Z+35, r1	; 0x23
    4524:	14 a2       	std	Z+36, r1	; 0x24
    4526:	15 a2       	std	Z+37, r1	; 0x25
	_lastHeatTime = 0;
    4528:	16 a2       	std	Z+38, r1	; 0x26
    452a:	17 a2       	std	Z+39, r1	; 0x27
    452c:	10 a6       	std	Z+40, r1	; 0x28
    452e:	11 a6       	std	Z+41, r1	; 0x29
	_lastIdleTime = 0;
    4530:	12 a6       	std	Z+42, r1	; 0x2a
    4532:	13 a6       	std	Z+43, r1	; 0x2b
    4534:	14 a6       	std	Z+44, r1	; 0x2c
    4536:	15 a6       	std	Z+45, r1	; 0x2d

	_doNegPeakDetect = false;
    4538:	12 aa       	std	Z+50, r1	; 0x32
	_doPosPeakDetect = false;
    453a:	13 aa       	std	Z+51, r1	; 0x33
	_negPeak         = STARTUP_TEMP_DEFAULT - 1;
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	a9 e7       	ldi	r26, 0x79	; 121
    4542:	b3 e4       	ldi	r27, 0x43	; 67
    4544:	80 af       	std	Z+56, r24	; 0x38
    4546:	91 af       	std	Z+57, r25	; 0x39
    4548:	a2 af       	std	Z+58, r26	; 0x3a
    454a:	b3 af       	std	Z+59, r27	; 0x3b
	_posPeak		 = STARTUP_TEMP_DEFAULT + 1;
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	ab e7       	ldi	r26, 0x7B	; 123
    4552:	b3 e4       	ldi	r27, 0x43	; 67
    4554:	84 ab       	std	Z+52, r24	; 0x34
    4556:	95 ab       	std	Z+53, r25	; 0x35
    4558:	a6 ab       	std	Z+54, r26	; 0x36
    455a:	b7 ab       	std	Z+55, r27	; 0x37

	_heatOvershootEstimator = 0.2;
    455c:	0c 5b       	subi	r16, 0xBC	; 188
    455e:	1f 4f       	sbci	r17, 0xFF	; 255
    4560:	8d ec       	ldi	r24, 0xCD	; 205
    4562:	9c ec       	ldi	r25, 0xCC	; 204
    4564:	ac e4       	ldi	r26, 0x4C	; 76
    4566:	be e3       	ldi	r27, 0x3E	; 62
    4568:	f8 01       	movw	r30, r16
    456a:	81 93       	st	Z+, r24
    456c:	91 93       	st	Z+, r25
    456e:	a1 93       	st	Z+, r26
    4570:	b1 93       	st	Z+, r27
    4572:	8f 01       	movw	r16, r30
	_coolOvershootEstimator = 5;
    4574:	80 e0       	ldi	r24, 0x00	; 0
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	a0 ea       	ldi	r26, 0xA0	; 160
    457a:	b0 e4       	ldi	r27, 0x40	; 64
    457c:	80 83       	st	Z, r24
    457e:	91 83       	std	Z+1, r25	; 0x01
    4580:	a2 83       	std	Z+2, r26	; 0x02
    4582:	b3 83       	std	Z+3, r27	; 0x03
    4584:	08 54       	subi	r16, 0x48	; 72
    4586:	10 40       	sbci	r17, 0x00	; 0

	_timer        = 0;
    4588:	f8 01       	movw	r30, r16
    458a:	16 86       	std	Z+14, r1	; 0x0e
    458c:	17 86       	std	Z+15, r1	; 0x0f
    458e:	10 8a       	std	Z+16, r1	; 0x10
    4590:	11 8a       	std	Z+17, r1	; 0x11
}
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	08 95       	ret

0000459c <_GLOBAL__I_oneWire>:
	int newMs = millis();
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
		return;
	_sensors->requestTemperatures();
	_lastTempRequest = newMs;
}
    459c:	0f 93       	push	r16
    459e:	1f 93       	push	r17

#define ONE_WIRE_BUS 12

// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
    45a0:	07 e9       	ldi	r16, 0x97	; 151
    45a2:	12 e0       	ldi	r17, 0x02	; 2
    45a4:	c8 01       	movw	r24, r16
    45a6:	6c e0       	ldi	r22, 0x0C	; 12
    45a8:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN7OneWireC1Eh>

// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
    45ac:	85 ea       	ldi	r24, 0xA5	; 165
    45ae:	92 e0       	ldi	r25, 0x02	; 2
    45b0:	b8 01       	movw	r22, r16
    45b2:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN17DallasTemperatureC1EP7OneWire>
	int newMs = millis();
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
		return;
	_sensors->requestTemperatures();
	_lastTempRequest = newMs;
}
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	08 95       	ret

000045bc <_ZN11TempSensors11requestTempEv>:
	  Serial.print(" = ");
	  Serial.print(CurrentTemp);
	  Serial.println((char)248);	// ASCII 248 = degree symbol
}

void TempSensors::requestTemp()
    45bc:	ef 92       	push	r14
    45be:	ff 92       	push	r15
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	ec 01       	movw	r28, r24
{
	int newMs = millis();
    45ca:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <millis>
    45ce:	7b 01       	movw	r14, r22
    45d0:	8c 01       	movw	r16, r24
	if((newMs - TempSensors::_lastTempRequest)<MAX_TEMP_REQUEST)
    45d2:	80 91 b8 02 	lds	r24, 0x02B8
    45d6:	90 91 b9 02 	lds	r25, 0x02B9
    45da:	97 01       	movw	r18, r14
    45dc:	28 1b       	sub	r18, r24
    45de:	39 0b       	sbc	r19, r25
    45e0:	c9 01       	movw	r24, r18
    45e2:	84 58       	subi	r24, 0x84	; 132
    45e4:	93 40       	sbci	r25, 0x03	; 3
    45e6:	44 f0       	brlt	.+16     	; 0x45f8 <_ZN11TempSensors11requestTempEv+0x3c>
		return;
	_sensors->requestTemperatures();
    45e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    45ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    45ec:	0e 94 de 05 	call	0xbbc	; 0xbbc <_ZN17DallasTemperature19requestTemperaturesEv>
	_lastTempRequest = newMs;
    45f0:	f0 92 b9 02 	sts	0x02B9, r15
    45f4:	e0 92 b8 02 	sts	0x02B8, r14
}
    45f8:	df 91       	pop	r29
    45fa:	cf 91       	pop	r28
    45fc:	1f 91       	pop	r17
    45fe:	0f 91       	pop	r16
    4600:	ff 90       	pop	r15
    4602:	ef 90       	pop	r14
    4604:	08 95       	ret

00004606 <_ZN11TempSensors14GetTemperatureEv>:
				_sensorAddr[5],
				_sensorAddr[6],
				_sensorAddr[7]);
}

float TempSensors::GetTemperature()
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	8c 01       	movw	r16, r24
{
//	Serial.print("Requesting Temp for: ");
//	Serial.print(Name);
//	Serial.print(" ");
	requestTemp();
    460c:	0e 94 de 22 	call	0x45bc	; 0x45bc <_ZN11TempSensors11requestTempEv>
	CurrentTemp = _sensors->getTempCByIndex(SensorIndex) * 10;
    4610:	f8 01       	movw	r30, r16
    4612:	84 8d       	ldd	r24, Z+28	; 0x1c
    4614:	95 8d       	ldd	r25, Z+29	; 0x1d
    4616:	60 8d       	ldd	r22, Z+24	; 0x18
    4618:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <_ZN17DallasTemperature15getTempCByIndexEh>
    461c:	20 e0       	ldi	r18, 0x00	; 0
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	40 e2       	ldi	r20, 0x20	; 32
    4622:	51 e4       	ldi	r21, 0x41	; 65
    4624:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4628:	9b 01       	movw	r18, r22
    462a:	ac 01       	movw	r20, r24
    462c:	f8 01       	movw	r30, r16
    462e:	20 83       	st	Z, r18
    4630:	31 83       	std	Z+1, r19	; 0x01
    4632:	42 83       	std	Z+2, r20	; 0x02
    4634:	53 83       	std	Z+3, r21	; 0x03
//	Serial.println(CurrentTemp);
	return CurrentTemp;
}
    4636:	1f 91       	pop	r17
    4638:	0f 91       	pop	r16
    463a:	08 95       	ret

0000463c <_ZN11TempSensorsC1EPKch>:

//Required to support the static member
int TempSensors::_lastTempRequest;

// TempSensors::TempSensors(const char *initName, uint8_t initIndex, DallasTemperature *sensors) {
TempSensors::TempSensors(const char *initName, uint8_t initIndex) {
    463c:	bf 92       	push	r11
    463e:	cf 92       	push	r12
    4640:	df 92       	push	r13
    4642:	ef 92       	push	r14
    4644:	ff 92       	push	r15
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	8c 01       	movw	r16, r24
    464c:	6b 01       	movw	r12, r22
    464e:	b4 2e       	mov	r11, r20
	// Setup a oneWire instance to communicate with any OneWire devices
	// (not just Maxim/Dallas temperature ICs)
	_onewire = new OneWire(ONE_WIRE_BUS);
    4650:	8e e0       	ldi	r24, 0x0E	; 14
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    4658:	f8 2e       	mov	r15, r24
    465a:	e9 2e       	mov	r14, r25
    465c:	6c e0       	ldi	r22, 0x0C	; 12
    465e:	0e 94 9d 0b 	call	0x173a	; 0x173a <_ZN7OneWireC1Eh>
    4662:	f8 01       	movw	r30, r16
    4664:	f2 8e       	std	Z+26, r15	; 0x1a
    4666:	e3 8e       	std	Z+27, r14	; 0x1b

	// Pass our oneWire reference to Dallas Temperature.
    _sensors = new DallasTemperature(_onewire);
    4668:	83 e1       	ldi	r24, 0x13	; 19
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	0e 94 90 27 	call	0x4f20	; 0x4f20 <_Znwj>
    4670:	f8 2e       	mov	r15, r24
    4672:	e9 2e       	mov	r14, r25
    4674:	f8 01       	movw	r30, r16
    4676:	62 8d       	ldd	r22, Z+26	; 0x1a
    4678:	73 8d       	ldd	r23, Z+27	; 0x1b
    467a:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN17DallasTemperatureC1EP7OneWire>
    467e:	f8 01       	movw	r30, r16
    4680:	f4 8e       	std	Z+28, r15	; 0x1c
    4682:	e5 8e       	std	Z+29, r14	; 0x1d

	// Start up the DS18B20 library
	_sensors->begin();
    4684:	8f 2d       	mov	r24, r15
    4686:	9e 2d       	mov	r25, r14
    4688:	0e 94 65 07 	call	0xeca	; 0xeca <_ZN17DallasTemperature5beginEv>
	// Set DS18B20 resolution to:
	//   9bit = 0.5C,    93.75ms time to convert (tCONV/8)
	//  10bit = 0.25C,  187.5ms  time to convert (tCONV/4)
	//  11bit = 0.125C  375ms    time to convert (tCONV/2)
	//  12bit = 0.0625C 750ms    time to convert
	_sensors->setResolution(10);
    468c:	f8 01       	movw	r30, r16
    468e:	84 8d       	ldd	r24, Z+28	; 0x1c
    4690:	95 8d       	ldd	r25, Z+29	; 0x1d
    4692:	6a e0       	ldi	r22, 0x0A	; 10
    4694:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN17DallasTemperature13setResolutionEh>



	CurrentTemp = 0;
    4698:	f8 01       	movw	r30, r16
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	a0 e0       	ldi	r26, 0x00	; 0
    46a0:	b0 e0       	ldi	r27, 0x00	; 0
    46a2:	81 93       	st	Z+, r24
    46a4:	91 93       	st	Z+, r25
    46a6:	a1 93       	st	Z+, r26
    46a8:	b1 93       	st	Z+, r27
	strncpy(Name, initName, 20);
    46aa:	cf 01       	movw	r24, r30
    46ac:	b6 01       	movw	r22, r12
    46ae:	44 e1       	ldi	r20, 0x14	; 20
    46b0:	50 e0       	ldi	r21, 0x00	; 0
    46b2:	0e 94 43 02 	call	0x486	; 0x486 <strncpy>
	SensorIndex = initIndex;
    46b6:	f8 01       	movw	r30, r16
    46b8:	b0 8e       	std	Z+24, r11	; 0x18
	_resolution = 9;
    46ba:	89 e0       	ldi	r24, 0x09	; 9
    46bc:	81 8f       	std	Z+25, r24	; 0x19
	_sensors->getAddress(_sensorAddr, SensorIndex);
    46be:	b8 01       	movw	r22, r16
    46c0:	62 5e       	subi	r22, 0xE2	; 226
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    46c6:	95 8d       	ldd	r25, Z+29	; 0x1d
    46c8:	4b 2d       	mov	r20, r11
    46ca:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN17DallasTemperature10getAddressEPhh>
	_sensors->setResolution(_resolution);
    46ce:	f8 01       	movw	r30, r16
    46d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    46d2:	95 8d       	ldd	r25, Z+29	; 0x1d
    46d4:	61 8d       	ldd	r22, Z+25	; 0x19
    46d6:	0e 94 22 07 	call	0xe44	; 0xe44 <_ZN17DallasTemperature13setResolutionEh>
}
    46da:	1f 91       	pop	r17
    46dc:	0f 91       	pop	r16
    46de:	ff 90       	pop	r15
    46e0:	ef 90       	pop	r14
    46e2:	df 90       	pop	r13
    46e4:	cf 90       	pop	r12
    46e6:	bf 90       	pop	r11
    46e8:	08 95       	ret

000046ea <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    46ea:	08 95       	ret

000046ec <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    46ec:	1f 92       	push	r1
    46ee:	0f 92       	push	r0
    46f0:	0f b6       	in	r0, 0x3f	; 63
    46f2:	0f 92       	push	r0
    46f4:	11 24       	eor	r1, r1
    46f6:	2f 93       	push	r18
    46f8:	3f 93       	push	r19
    46fa:	4f 93       	push	r20
    46fc:	8f 93       	push	r24
    46fe:	9f 93       	push	r25
    4700:	ef 93       	push	r30
    4702:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    4704:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4708:	20 91 fa 02 	lds	r18, 0x02FA
    470c:	30 91 fb 02 	lds	r19, 0x02FB

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4710:	2f 5f       	subi	r18, 0xFF	; 255
    4712:	3f 4f       	sbci	r19, 0xFF	; 255
    4714:	2f 73       	andi	r18, 0x3F	; 63
    4716:	30 70       	andi	r19, 0x00	; 0
    4718:	80 91 fc 02 	lds	r24, 0x02FC
    471c:	90 91 fd 02 	lds	r25, 0x02FD
    4720:	28 17       	cp	r18, r24
    4722:	39 07       	cpc	r19, r25
    4724:	59 f0       	breq	.+22     	; 0x473c <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    4726:	e0 91 fa 02 	lds	r30, 0x02FA
    472a:	f0 91 fb 02 	lds	r31, 0x02FB
    472e:	e6 54       	subi	r30, 0x46	; 70
    4730:	fd 4f       	sbci	r31, 0xFD	; 253
    4732:	40 83       	st	Z, r20
    buffer->head = i;
    4734:	30 93 fb 02 	sts	0x02FB, r19
    4738:	20 93 fa 02 	sts	0x02FA, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    473c:	ff 91       	pop	r31
    473e:	ef 91       	pop	r30
    4740:	9f 91       	pop	r25
    4742:	8f 91       	pop	r24
    4744:	4f 91       	pop	r20
    4746:	3f 91       	pop	r19
    4748:	2f 91       	pop	r18
    474a:	0f 90       	pop	r0
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	0f 90       	pop	r0
    4750:	1f 90       	pop	r1
    4752:	18 95       	reti

00004754 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4754:	e0 91 4e 03 	lds	r30, 0x034E
    4758:	f0 91 4f 03 	lds	r31, 0x034F
    475c:	e0 5c       	subi	r30, 0xC0	; 192
    475e:	ff 4f       	sbci	r31, 0xFF	; 255
    4760:	81 91       	ld	r24, Z+
    4762:	91 91       	ld	r25, Z+
    4764:	20 81       	ld	r18, Z
    4766:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4768:	82 1b       	sub	r24, r18
    476a:	93 0b       	sbc	r25, r19
    476c:	8f 73       	andi	r24, 0x3F	; 63
    476e:	90 70       	andi	r25, 0x00	; 0
    4770:	89 2b       	or	r24, r25
    4772:	11 f0       	breq	.+4      	; 0x4778 <_Z14serialEventRunv+0x24>
    4774:	0e 94 75 23 	call	0x46ea	; 0x46ea <_Z11serialEventv>
    4778:	08 95       	ret

0000477a <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    477a:	1f 92       	push	r1
    477c:	0f 92       	push	r0
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	0f 92       	push	r0
    4782:	11 24       	eor	r1, r1
    4784:	2f 93       	push	r18
    4786:	3f 93       	push	r19
    4788:	8f 93       	push	r24
    478a:	9f 93       	push	r25
    478c:	ef 93       	push	r30
    478e:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4790:	20 91 3e 03 	lds	r18, 0x033E
    4794:	30 91 3f 03 	lds	r19, 0x033F
    4798:	80 91 40 03 	lds	r24, 0x0340
    479c:	90 91 41 03 	lds	r25, 0x0341
    47a0:	28 17       	cp	r18, r24
    47a2:	39 07       	cpc	r19, r25
    47a4:	31 f4       	brne	.+12     	; 0x47b2 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    47a6:	80 91 c1 00 	lds	r24, 0x00C1
    47aa:	8f 7d       	andi	r24, 0xDF	; 223
    47ac:	80 93 c1 00 	sts	0x00C1, r24
    47b0:	14 c0       	rjmp	.+40     	; 0x47da <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    47b2:	e0 91 40 03 	lds	r30, 0x0340
    47b6:	f0 91 41 03 	lds	r31, 0x0341
    47ba:	e2 50       	subi	r30, 0x02	; 2
    47bc:	fd 4f       	sbci	r31, 0xFD	; 253
    47be:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    47c0:	80 91 40 03 	lds	r24, 0x0340
    47c4:	90 91 41 03 	lds	r25, 0x0341
    47c8:	01 96       	adiw	r24, 0x01	; 1
    47ca:	8f 73       	andi	r24, 0x3F	; 63
    47cc:	90 70       	andi	r25, 0x00	; 0
    47ce:	90 93 41 03 	sts	0x0341, r25
    47d2:	80 93 40 03 	sts	0x0340, r24
	
  #if defined(UDR0)
    UDR0 = c;
    47d6:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    47da:	ff 91       	pop	r31
    47dc:	ef 91       	pop	r30
    47de:	9f 91       	pop	r25
    47e0:	8f 91       	pop	r24
    47e2:	3f 91       	pop	r19
    47e4:	2f 91       	pop	r18
    47e6:	0f 90       	pop	r0
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	0f 90       	pop	r0
    47ec:	1f 90       	pop	r1
    47ee:	18 95       	reti

000047f0 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    47f0:	af 92       	push	r10
    47f2:	bf 92       	push	r11
    47f4:	df 92       	push	r13
    47f6:	ef 92       	push	r14
    47f8:	ff 92       	push	r15
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	ec 01       	movw	r28, r24
    4804:	7a 01       	movw	r14, r20
    4806:	8b 01       	movw	r16, r22
    4808:	dd 24       	eor	r13, r13
    480a:	40 30       	cpi	r20, 0x00	; 0
    480c:	81 ee       	ldi	r24, 0xE1	; 225
    480e:	58 07       	cpc	r21, r24
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	68 07       	cpc	r22, r24
    4814:	80 e0       	ldi	r24, 0x00	; 0
    4816:	78 07       	cpc	r23, r24
    4818:	11 f0       	breq	.+4      	; 0x481e <_ZN14HardwareSerial5beginEm+0x2e>
    481a:	dd 24       	eor	r13, r13
    481c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    481e:	91 e0       	ldi	r25, 0x01	; 1
    4820:	a9 2e       	mov	r10, r25
    4822:	b1 2c       	mov	r11, r1
    4824:	ec 89       	ldd	r30, Y+20	; 0x14
    4826:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    4828:	dd 20       	and	r13, r13
    482a:	69 f0       	breq	.+26     	; 0x4846 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    482c:	c5 01       	movw	r24, r10
    482e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4830:	02 c0       	rjmp	.+4      	; 0x4836 <_ZN14HardwareSerial5beginEm+0x46>
    4832:	88 0f       	add	r24, r24
    4834:	99 1f       	adc	r25, r25
    4836:	0a 94       	dec	r0
    4838:	e2 f7       	brpl	.-8      	; 0x4832 <_ZN14HardwareSerial5beginEm+0x42>
    483a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    483c:	60 e0       	ldi	r22, 0x00	; 0
    483e:	79 e0       	ldi	r23, 0x09	; 9
    4840:	8d e3       	ldi	r24, 0x3D	; 61
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	05 c0       	rjmp	.+10     	; 0x4850 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    4846:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4848:	60 e8       	ldi	r22, 0x80	; 128
    484a:	74 e8       	ldi	r23, 0x84	; 132
    484c:	8e e1       	ldi	r24, 0x1E	; 30
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	a8 01       	movw	r20, r16
    4852:	97 01       	movw	r18, r14
    4854:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    4858:	21 50       	subi	r18, 0x01	; 1
    485a:	30 40       	sbci	r19, 0x00	; 0
    485c:	40 40       	sbci	r20, 0x00	; 0
    485e:	50 40       	sbci	r21, 0x00	; 0
    4860:	56 95       	lsr	r21
    4862:	47 95       	ror	r20
    4864:	37 95       	ror	r19
    4866:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4868:	80 e1       	ldi	r24, 0x10	; 16
    486a:	20 30       	cpi	r18, 0x00	; 0
    486c:	38 07       	cpc	r19, r24
    486e:	20 f0       	brcs	.+8      	; 0x4878 <_ZN14HardwareSerial5beginEm+0x88>
    4870:	dd 20       	and	r13, r13
    4872:	11 f0       	breq	.+4      	; 0x4878 <_ZN14HardwareSerial5beginEm+0x88>
    4874:	dd 24       	eor	r13, r13
    4876:	d6 cf       	rjmp	.-84     	; 0x4824 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4878:	e8 89       	ldd	r30, Y+16	; 0x10
    487a:	f9 89       	ldd	r31, Y+17	; 0x11
    487c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    487e:	ea 89       	ldd	r30, Y+18	; 0x12
    4880:	fb 89       	ldd	r31, Y+19	; 0x13
    4882:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    4884:	ee 89       	ldd	r30, Y+22	; 0x16
    4886:	ff 89       	ldd	r31, Y+23	; 0x17
    4888:	40 81       	ld	r20, Z
    488a:	21 e0       	ldi	r18, 0x01	; 1
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	c9 01       	movw	r24, r18
    4890:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <_ZN14HardwareSerial5beginEm+0xa8>
    4894:	88 0f       	add	r24, r24
    4896:	99 1f       	adc	r25, r25
    4898:	0a 94       	dec	r0
    489a:	e2 f7       	brpl	.-8      	; 0x4894 <_ZN14HardwareSerial5beginEm+0xa4>
    489c:	48 2b       	or	r20, r24
    489e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    48a0:	ee 89       	ldd	r30, Y+22	; 0x16
    48a2:	ff 89       	ldd	r31, Y+23	; 0x17
    48a4:	40 81       	ld	r20, Z
    48a6:	c9 01       	movw	r24, r18
    48a8:	0b 8c       	ldd	r0, Y+27	; 0x1b
    48aa:	02 c0       	rjmp	.+4      	; 0x48b0 <_ZN14HardwareSerial5beginEm+0xc0>
    48ac:	88 0f       	add	r24, r24
    48ae:	99 1f       	adc	r25, r25
    48b0:	0a 94       	dec	r0
    48b2:	e2 f7       	brpl	.-8      	; 0x48ac <_ZN14HardwareSerial5beginEm+0xbc>
    48b4:	48 2b       	or	r20, r24
    48b6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    48b8:	ee 89       	ldd	r30, Y+22	; 0x16
    48ba:	ff 89       	ldd	r31, Y+23	; 0x17
    48bc:	40 81       	ld	r20, Z
    48be:	c9 01       	movw	r24, r18
    48c0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    48c2:	02 c0       	rjmp	.+4      	; 0x48c8 <_ZN14HardwareSerial5beginEm+0xd8>
    48c4:	88 0f       	add	r24, r24
    48c6:	99 1f       	adc	r25, r25
    48c8:	0a 94       	dec	r0
    48ca:	e2 f7       	brpl	.-8      	; 0x48c4 <_ZN14HardwareSerial5beginEm+0xd4>
    48cc:	48 2b       	or	r20, r24
    48ce:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    48d0:	ee 89       	ldd	r30, Y+22	; 0x16
    48d2:	ff 89       	ldd	r31, Y+23	; 0x17
    48d4:	80 81       	ld	r24, Z
    48d6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <_ZN14HardwareSerial5beginEm+0xee>
    48da:	22 0f       	add	r18, r18
    48dc:	33 1f       	adc	r19, r19
    48de:	0a 94       	dec	r0
    48e0:	e2 f7       	brpl	.-8      	; 0x48da <_ZN14HardwareSerial5beginEm+0xea>
    48e2:	20 95       	com	r18
    48e4:	28 23       	and	r18, r24
    48e6:	20 83       	st	Z, r18
}
    48e8:	df 91       	pop	r29
    48ea:	cf 91       	pop	r28
    48ec:	1f 91       	pop	r17
    48ee:	0f 91       	pop	r16
    48f0:	ff 90       	pop	r15
    48f2:	ef 90       	pop	r14
    48f4:	df 90       	pop	r13
    48f6:	bf 90       	pop	r11
    48f8:	af 90       	pop	r10
    48fa:	08 95       	ret

000048fc <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    48fc:	dc 01       	movw	r26, r24
    48fe:	1c 96       	adiw	r26, 0x0c	; 12
    4900:	ed 91       	ld	r30, X+
    4902:	fc 91       	ld	r31, X
    4904:	1d 97       	sbiw	r26, 0x0d	; 13
    4906:	e0 5c       	subi	r30, 0xC0	; 192
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	21 91       	ld	r18, Z+
    490c:	31 91       	ld	r19, Z+
    490e:	80 81       	ld	r24, Z
    4910:	91 81       	ldd	r25, Z+1	; 0x01
    4912:	28 1b       	sub	r18, r24
    4914:	39 0b       	sbc	r19, r25
    4916:	2f 73       	andi	r18, 0x3F	; 63
    4918:	30 70       	andi	r19, 0x00	; 0
}
    491a:	c9 01       	movw	r24, r18
    491c:	08 95       	ret

0000491e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    491e:	dc 01       	movw	r26, r24
    4920:	1c 96       	adiw	r26, 0x0c	; 12
    4922:	ed 91       	ld	r30, X+
    4924:	fc 91       	ld	r31, X
    4926:	1d 97       	sbiw	r26, 0x0d	; 13
    4928:	e0 5c       	subi	r30, 0xC0	; 192
    492a:	ff 4f       	sbci	r31, 0xFF	; 255
    492c:	20 81       	ld	r18, Z
    492e:	31 81       	ldd	r19, Z+1	; 0x01
    4930:	e0 54       	subi	r30, 0x40	; 64
    4932:	f0 40       	sbci	r31, 0x00	; 0
    4934:	df 01       	movw	r26, r30
    4936:	ae 5b       	subi	r26, 0xBE	; 190
    4938:	bf 4f       	sbci	r27, 0xFF	; 255
    493a:	8d 91       	ld	r24, X+
    493c:	9c 91       	ld	r25, X
    493e:	11 97       	sbiw	r26, 0x01	; 1
    4940:	28 17       	cp	r18, r24
    4942:	39 07       	cpc	r19, r25
    4944:	19 f4       	brne	.+6      	; 0x494c <_ZN14HardwareSerial4peekEv+0x2e>
    4946:	2f ef       	ldi	r18, 0xFF	; 255
    4948:	3f ef       	ldi	r19, 0xFF	; 255
    494a:	07 c0       	rjmp	.+14     	; 0x495a <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    494c:	8d 91       	ld	r24, X+
    494e:	9c 91       	ld	r25, X
    4950:	e8 0f       	add	r30, r24
    4952:	f9 1f       	adc	r31, r25
    4954:	80 81       	ld	r24, Z
    4956:	28 2f       	mov	r18, r24
    4958:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    495a:	c9 01       	movw	r24, r18
    495c:	08 95       	ret

0000495e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    495e:	dc 01       	movw	r26, r24
    4960:	1c 96       	adiw	r26, 0x0c	; 12
    4962:	ed 91       	ld	r30, X+
    4964:	fc 91       	ld	r31, X
    4966:	1d 97       	sbiw	r26, 0x0d	; 13
    4968:	e0 5c       	subi	r30, 0xC0	; 192
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	20 81       	ld	r18, Z
    496e:	31 81       	ldd	r19, Z+1	; 0x01
    4970:	e0 54       	subi	r30, 0x40	; 64
    4972:	f0 40       	sbci	r31, 0x00	; 0
    4974:	df 01       	movw	r26, r30
    4976:	ae 5b       	subi	r26, 0xBE	; 190
    4978:	bf 4f       	sbci	r27, 0xFF	; 255
    497a:	8d 91       	ld	r24, X+
    497c:	9c 91       	ld	r25, X
    497e:	11 97       	sbiw	r26, 0x01	; 1
    4980:	28 17       	cp	r18, r24
    4982:	39 07       	cpc	r19, r25
    4984:	19 f4       	brne	.+6      	; 0x498c <_ZN14HardwareSerial4readEv+0x2e>
    4986:	2f ef       	ldi	r18, 0xFF	; 255
    4988:	3f ef       	ldi	r19, 0xFF	; 255
    498a:	10 c0       	rjmp	.+32     	; 0x49ac <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    498c:	8d 91       	ld	r24, X+
    498e:	9c 91       	ld	r25, X
    4990:	11 97       	sbiw	r26, 0x01	; 1
    4992:	e8 0f       	add	r30, r24
    4994:	f9 1f       	adc	r31, r25
    4996:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4998:	8d 91       	ld	r24, X+
    499a:	9c 91       	ld	r25, X
    499c:	11 97       	sbiw	r26, 0x01	; 1
    499e:	01 96       	adiw	r24, 0x01	; 1
    49a0:	8f 73       	andi	r24, 0x3F	; 63
    49a2:	90 70       	andi	r25, 0x00	; 0
    49a4:	11 96       	adiw	r26, 0x01	; 1
    49a6:	9c 93       	st	X, r25
    49a8:	8e 93       	st	-X, r24
    return c;
    49aa:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    49ac:	c9 01       	movw	r24, r18
    49ae:	08 95       	ret

000049b0 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    49b0:	fc 01       	movw	r30, r24
    49b2:	86 85       	ldd	r24, Z+14	; 0x0e
    49b4:	97 85       	ldd	r25, Z+15	; 0x0f
    49b6:	dc 01       	movw	r26, r24
    49b8:	a0 5c       	subi	r26, 0xC0	; 192
    49ba:	bf 4f       	sbci	r27, 0xFF	; 255
    49bc:	fc 01       	movw	r30, r24
    49be:	ee 5b       	subi	r30, 0xBE	; 190
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	2d 91       	ld	r18, X+
    49c4:	3c 91       	ld	r19, X
    49c6:	11 97       	sbiw	r26, 0x01	; 1
    49c8:	80 81       	ld	r24, Z
    49ca:	91 81       	ldd	r25, Z+1	; 0x01
    49cc:	28 17       	cp	r18, r24
    49ce:	39 07       	cpc	r19, r25
    49d0:	c1 f7       	brne	.-16     	; 0x49c2 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    49d2:	08 95       	ret

000049d4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    49d4:	cf 93       	push	r28
    49d6:	df 93       	push	r29
    49d8:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    49da:	ee 85       	ldd	r30, Y+14	; 0x0e
    49dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    49de:	e0 5c       	subi	r30, 0xC0	; 192
    49e0:	ff 4f       	sbci	r31, 0xFF	; 255
    49e2:	20 81       	ld	r18, Z
    49e4:	31 81       	ldd	r19, Z+1	; 0x01
    49e6:	e0 54       	subi	r30, 0x40	; 64
    49e8:	f0 40       	sbci	r31, 0x00	; 0
    49ea:	2f 5f       	subi	r18, 0xFF	; 255
    49ec:	3f 4f       	sbci	r19, 0xFF	; 255
    49ee:	2f 73       	andi	r18, 0x3F	; 63
    49f0:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    49f2:	df 01       	movw	r26, r30
    49f4:	ae 5b       	subi	r26, 0xBE	; 190
    49f6:	bf 4f       	sbci	r27, 0xFF	; 255
    49f8:	8d 91       	ld	r24, X+
    49fa:	9c 91       	ld	r25, X
    49fc:	11 97       	sbiw	r26, 0x01	; 1
    49fe:	28 17       	cp	r18, r24
    4a00:	39 07       	cpc	r19, r25
    4a02:	d1 f3       	breq	.-12     	; 0x49f8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    4a04:	e0 5c       	subi	r30, 0xC0	; 192
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	80 81       	ld	r24, Z
    4a0a:	91 81       	ldd	r25, Z+1	; 0x01
    4a0c:	e0 54       	subi	r30, 0x40	; 64
    4a0e:	f0 40       	sbci	r31, 0x00	; 0
    4a10:	e8 0f       	add	r30, r24
    4a12:	f9 1f       	adc	r31, r25
    4a14:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    4a16:	ee 85       	ldd	r30, Y+14	; 0x0e
    4a18:	ff 85       	ldd	r31, Y+15	; 0x0f
    4a1a:	e0 5c       	subi	r30, 0xC0	; 192
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	31 83       	std	Z+1, r19	; 0x01
    4a20:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    4a22:	ee 89       	ldd	r30, Y+22	; 0x16
    4a24:	ff 89       	ldd	r31, Y+23	; 0x17
    4a26:	20 81       	ld	r18, Z
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <_ZN14HardwareSerial5writeEh+0x60>
    4a30:	88 0f       	add	r24, r24
    4a32:	99 1f       	adc	r25, r25
    4a34:	0a 94       	dec	r0
    4a36:	e2 f7       	brpl	.-8      	; 0x4a30 <_ZN14HardwareSerial5writeEh+0x5c>
    4a38:	28 2b       	or	r18, r24
    4a3a:	20 83       	st	Z, r18
  
  return 1;
}
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	df 91       	pop	r29
    4a42:	cf 91       	pop	r28
    4a44:	08 95       	ret

00004a46 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4a46:	10 92 45 03 	sts	0x0345, r1
    4a4a:	10 92 44 03 	sts	0x0344, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4a4e:	88 ee       	ldi	r24, 0xE8	; 232
    4a50:	93 e0       	ldi	r25, 0x03	; 3
    4a52:	a0 e0       	ldi	r26, 0x00	; 0
    4a54:	b0 e0       	ldi	r27, 0x00	; 0
    4a56:	80 93 46 03 	sts	0x0346, r24
    4a5a:	90 93 47 03 	sts	0x0347, r25
    4a5e:	a0 93 48 03 	sts	0x0348, r26
    4a62:	b0 93 49 03 	sts	0x0349, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4a66:	88 e3       	ldi	r24, 0x38	; 56
    4a68:	92 e0       	ldi	r25, 0x02	; 2
    4a6a:	90 93 43 03 	sts	0x0343, r25
    4a6e:	80 93 42 03 	sts	0x0342, r24
{
  _rx_buffer = rx_buffer;
    4a72:	8a eb       	ldi	r24, 0xBA	; 186
    4a74:	92 e0       	ldi	r25, 0x02	; 2
    4a76:	90 93 4f 03 	sts	0x034F, r25
    4a7a:	80 93 4e 03 	sts	0x034E, r24
  _tx_buffer = tx_buffer;
    4a7e:	8e ef       	ldi	r24, 0xFE	; 254
    4a80:	92 e0       	ldi	r25, 0x02	; 2
    4a82:	90 93 51 03 	sts	0x0351, r25
    4a86:	80 93 50 03 	sts	0x0350, r24
  _ubrrh = ubrrh;
    4a8a:	85 ec       	ldi	r24, 0xC5	; 197
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	90 93 53 03 	sts	0x0353, r25
    4a92:	80 93 52 03 	sts	0x0352, r24
  _ubrrl = ubrrl;
    4a96:	84 ec       	ldi	r24, 0xC4	; 196
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	90 93 55 03 	sts	0x0355, r25
    4a9e:	80 93 54 03 	sts	0x0354, r24
  _ucsra = ucsra;
    4aa2:	80 ec       	ldi	r24, 0xC0	; 192
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	90 93 57 03 	sts	0x0357, r25
    4aaa:	80 93 56 03 	sts	0x0356, r24
  _ucsrb = ucsrb;
    4aae:	81 ec       	ldi	r24, 0xC1	; 193
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	90 93 59 03 	sts	0x0359, r25
    4ab6:	80 93 58 03 	sts	0x0358, r24
  _udr = udr;
    4aba:	86 ec       	ldi	r24, 0xC6	; 198
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	90 93 5b 03 	sts	0x035B, r25
    4ac2:	80 93 5a 03 	sts	0x035A, r24
  _rxen = rxen;
    4ac6:	84 e0       	ldi	r24, 0x04	; 4
    4ac8:	80 93 5c 03 	sts	0x035C, r24
  _txen = txen;
    4acc:	83 e0       	ldi	r24, 0x03	; 3
    4ace:	80 93 5d 03 	sts	0x035D, r24
  _rxcie = rxcie;
    4ad2:	87 e0       	ldi	r24, 0x07	; 7
    4ad4:	80 93 5e 03 	sts	0x035E, r24
  _udrie = udrie;
    4ad8:	85 e0       	ldi	r24, 0x05	; 5
    4ada:	80 93 5f 03 	sts	0x035F, r24
  _u2x = u2x;
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	80 93 60 03 	sts	0x0360, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4ae4:	08 95       	ret

00004ae6 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    4ae6:	cf 92       	push	r12
    4ae8:	df 92       	push	r13
    4aea:	ef 92       	push	r14
    4aec:	ff 92       	push	r15
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	7c 01       	movw	r14, r24
    4af8:	6b 01       	movw	r12, r22
    4afa:	8a 01       	movw	r16, r20
    4afc:	c0 e0       	ldi	r28, 0x00	; 0
    4afe:	d0 e0       	ldi	r29, 0x00	; 0
    4b00:	0f c0       	rjmp	.+30     	; 0x4b20 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    4b02:	d6 01       	movw	r26, r12
    4b04:	6d 91       	ld	r22, X+
    4b06:	6d 01       	movw	r12, r26
    4b08:	d7 01       	movw	r26, r14
    4b0a:	ed 91       	ld	r30, X+
    4b0c:	fc 91       	ld	r31, X
    4b0e:	01 90       	ld	r0, Z+
    4b10:	f0 81       	ld	r31, Z
    4b12:	e0 2d       	mov	r30, r0
    4b14:	c7 01       	movw	r24, r14
    4b16:	09 95       	icall
    4b18:	c8 0f       	add	r28, r24
    4b1a:	d9 1f       	adc	r29, r25
    4b1c:	01 50       	subi	r16, 0x01	; 1
    4b1e:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4b20:	01 15       	cp	r16, r1
    4b22:	11 05       	cpc	r17, r1
    4b24:	71 f7       	brne	.-36     	; 0x4b02 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4b26:	ce 01       	movw	r24, r28
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	1f 91       	pop	r17
    4b2e:	0f 91       	pop	r16
    4b30:	ff 90       	pop	r15
    4b32:	ef 90       	pop	r14
    4b34:	df 90       	pop	r13
    4b36:	cf 90       	pop	r12
    4b38:	08 95       	ret

00004b3a <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    4b3a:	dc 01       	movw	r26, r24
{
  return write(c);
    4b3c:	ed 91       	ld	r30, X+
    4b3e:	fc 91       	ld	r31, X
    4b40:	01 90       	ld	r0, Z+
    4b42:	f0 81       	ld	r31, Z
    4b44:	e0 2d       	mov	r30, r0
    4b46:	09 95       	icall
}
    4b48:	08 95       	ret

00004b4a <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    4b4a:	ef 92       	push	r14
    4b4c:	ff 92       	push	r15
    4b4e:	0f 93       	push	r16
    4b50:	1f 93       	push	r17
    4b52:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4b54:	dc 01       	movw	r26, r24
    4b56:	ed 91       	ld	r30, X+
    4b58:	fc 91       	ld	r31, X
    4b5a:	01 90       	ld	r0, Z+
    4b5c:	f0 81       	ld	r31, Z
    4b5e:	e0 2d       	mov	r30, r0
    4b60:	6d e0       	ldi	r22, 0x0D	; 13
    4b62:	09 95       	icall
    4b64:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4b66:	d8 01       	movw	r26, r16
    4b68:	ed 91       	ld	r30, X+
    4b6a:	fc 91       	ld	r31, X
    4b6c:	01 90       	ld	r0, Z+
    4b6e:	f0 81       	ld	r31, Z
    4b70:	e0 2d       	mov	r30, r0
    4b72:	c8 01       	movw	r24, r16
    4b74:	6a e0       	ldi	r22, 0x0A	; 10
    4b76:	09 95       	icall
    4b78:	9c 01       	movw	r18, r24
    4b7a:	2e 0d       	add	r18, r14
    4b7c:	3f 1d       	adc	r19, r15
    4b7e:	c9 01       	movw	r24, r18
    4b80:	1f 91       	pop	r17
    4b82:	0f 91       	pop	r16
    4b84:	ff 90       	pop	r15
    4b86:	ef 90       	pop	r14
    4b88:	08 95       	ret

00004b8a <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    4b8a:	ef 92       	push	r14
    4b8c:	ff 92       	push	r15
    4b8e:	0f 93       	push	r16
    4b90:	1f 93       	push	r17
    4b92:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4b94:	dc 01       	movw	r26, r24
    4b96:	ed 91       	ld	r30, X+
    4b98:	fc 91       	ld	r31, X
    4b9a:	01 90       	ld	r0, Z+
    4b9c:	f0 81       	ld	r31, Z
    4b9e:	e0 2d       	mov	r30, r0
    4ba0:	09 95       	icall
    4ba2:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
    4ba4:	c7 01       	movw	r24, r14
    4ba6:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN5Print7printlnEv>
    4baa:	08 0f       	add	r16, r24
    4bac:	19 1f       	adc	r17, r25
  return n;
}
    4bae:	c8 01       	movw	r24, r16
    4bb0:	1f 91       	pop	r17
    4bb2:	0f 91       	pop	r16
    4bb4:	ff 90       	pop	r15
    4bb6:	ef 90       	pop	r14
    4bb8:	08 95       	ret

00004bba <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    4bba:	cf 93       	push	r28
    4bbc:	df 93       	push	r29
    4bbe:	db 01       	movw	r26, r22
    4bc0:	0d 90       	ld	r0, X+
    4bc2:	00 20       	and	r0, r0
    4bc4:	e9 f7       	brne	.-6      	; 0x4bc0 <_ZN5Print5writeEPKc+0x6>
    4bc6:	11 97       	sbiw	r26, 0x01	; 1
    4bc8:	a6 1b       	sub	r26, r22
    4bca:	b7 0b       	sbc	r27, r23
    4bcc:	ec 01       	movw	r28, r24
    4bce:	e8 81       	ld	r30, Y
    4bd0:	f9 81       	ldd	r31, Y+1	; 0x01
    4bd2:	02 80       	ldd	r0, Z+2	; 0x02
    4bd4:	f3 81       	ldd	r31, Z+3	; 0x03
    4bd6:	e0 2d       	mov	r30, r0
    4bd8:	ad 01       	movw	r20, r26
    4bda:	09 95       	icall
    4bdc:	df 91       	pop	r29
    4bde:	cf 91       	pop	r28
    4be0:	08 95       	ret

00004be2 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4be2:	4f 92       	push	r4
    4be4:	5f 92       	push	r5
    4be6:	7f 92       	push	r7
    4be8:	8f 92       	push	r8
    4bea:	9f 92       	push	r9
    4bec:	af 92       	push	r10
    4bee:	bf 92       	push	r11
    4bf0:	cf 92       	push	r12
    4bf2:	df 92       	push	r13
    4bf4:	ef 92       	push	r14
    4bf6:	ff 92       	push	r15
    4bf8:	0f 93       	push	r16
    4bfa:	1f 93       	push	r17
    4bfc:	df 93       	push	r29
    4bfe:	cf 93       	push	r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62
    4c04:	a1 97       	sbiw	r28, 0x21	; 33
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	2c 01       	movw	r4, r24
    4c12:	74 2e       	mov	r7, r20
    4c14:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4c16:	22 30       	cpi	r18, 0x02	; 2
    4c18:	08 f4       	brcc	.+2      	; 0x4c1c <_ZN5Print11printNumberEmh+0x3a>
    4c1a:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4c1c:	19 a2       	std	Y+33, r1	; 0x21
    4c1e:	31 e2       	ldi	r19, 0x21	; 33
    4c20:	c3 2e       	mov	r12, r19
    4c22:	d1 2c       	mov	r13, r1
    4c24:	cc 0e       	add	r12, r28
    4c26:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    4c28:	82 2e       	mov	r8, r18
    4c2a:	99 24       	eor	r9, r9
    4c2c:	aa 24       	eor	r10, r10
    4c2e:	bb 24       	eor	r11, r11
    4c30:	67 2d       	mov	r22, r7
    4c32:	75 2f       	mov	r23, r21
    4c34:	a5 01       	movw	r20, r10
    4c36:	94 01       	movw	r18, r8
    4c38:	0e 94 df 2b 	call	0x57be	; 0x57be <__udivmodsi4>
    4c3c:	79 01       	movw	r14, r18
    4c3e:	8a 01       	movw	r16, r20
    char c = m - base * n;
    4c40:	c8 01       	movw	r24, r16
    4c42:	b7 01       	movw	r22, r14
    4c44:	a5 01       	movw	r20, r10
    4c46:	94 01       	movw	r18, r8
    4c48:	0e 94 ad 2b 	call	0x575a	; 0x575a <__mulsi3>
    4c4c:	47 2d       	mov	r20, r7
    4c4e:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4c50:	08 94       	sec
    4c52:	c1 08       	sbc	r12, r1
    4c54:	d1 08       	sbc	r13, r1
    4c56:	4a 30       	cpi	r20, 0x0A	; 10
    4c58:	14 f4       	brge	.+4      	; 0x4c5e <_ZN5Print11printNumberEmh+0x7c>
    4c5a:	40 5d       	subi	r20, 0xD0	; 208
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <_ZN5Print11printNumberEmh+0x7e>
    4c5e:	49 5c       	subi	r20, 0xC9	; 201
    4c60:	f6 01       	movw	r30, r12
    4c62:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4c64:	e1 14       	cp	r14, r1
    4c66:	f1 04       	cpc	r15, r1
    4c68:	01 05       	cpc	r16, r1
    4c6a:	11 05       	cpc	r17, r1
    4c6c:	21 f0       	breq	.+8      	; 0x4c76 <_ZN5Print11printNumberEmh+0x94>
    4c6e:	7e 2c       	mov	r7, r14
    4c70:	5f 2d       	mov	r21, r15
    4c72:	c8 01       	movw	r24, r16
    4c74:	dd cf       	rjmp	.-70     	; 0x4c30 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4c76:	c2 01       	movw	r24, r4
    4c78:	b6 01       	movw	r22, r12
    4c7a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5writeEPKc>
}
    4c7e:	a1 96       	adiw	r28, 0x21	; 33
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	cf 91       	pop	r28
    4c8c:	df 91       	pop	r29
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	ff 90       	pop	r15
    4c94:	ef 90       	pop	r14
    4c96:	df 90       	pop	r13
    4c98:	cf 90       	pop	r12
    4c9a:	bf 90       	pop	r11
    4c9c:	af 90       	pop	r10
    4c9e:	9f 90       	pop	r9
    4ca0:	8f 90       	pop	r8
    4ca2:	7f 90       	pop	r7
    4ca4:	5f 90       	pop	r5
    4ca6:	4f 90       	pop	r4
    4ca8:	08 95       	ret

00004caa <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    4caa:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    4cac:	21 15       	cp	r18, r1
    4cae:	31 05       	cpc	r19, r1
    4cb0:	41 f4       	brne	.+16     	; 0x4cc2 <_ZN5Print5printEmi+0x18>
    4cb2:	ed 91       	ld	r30, X+
    4cb4:	fc 91       	ld	r31, X
    4cb6:	01 90       	ld	r0, Z+
    4cb8:	f0 81       	ld	r31, Z
    4cba:	e0 2d       	mov	r30, r0
    4cbc:	64 2f       	mov	r22, r20
    4cbe:	09 95       	icall
    4cc0:	08 95       	ret
  else return printNumber(n, base);
    4cc2:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN5Print11printNumberEmh>
}
    4cc6:	08 95       	ret

00004cc8 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    4cc8:	cf 92       	push	r12
    4cca:	df 92       	push	r13
    4ccc:	ef 92       	push	r14
    4cce:	ff 92       	push	r15
    4cd0:	0f 93       	push	r16
    4cd2:	1f 93       	push	r17
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	ec 01       	movw	r28, r24
    4cda:	6a 01       	movw	r12, r20
    4cdc:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    4cde:	21 15       	cp	r18, r1
    4ce0:	31 05       	cpc	r19, r1
    4ce2:	41 f4       	brne	.+16     	; 0x4cf4 <_ZN5Print5printEli+0x2c>
    return write(n);
    4ce4:	e8 81       	ld	r30, Y
    4ce6:	f9 81       	ldd	r31, Y+1	; 0x01
    4ce8:	01 90       	ld	r0, Z+
    4cea:	f0 81       	ld	r31, Z
    4cec:	e0 2d       	mov	r30, r0
    4cee:	64 2f       	mov	r22, r20
    4cf0:	09 95       	icall
    4cf2:	1f c0       	rjmp	.+62     	; 0x4d32 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    4cf4:	2a 30       	cpi	r18, 0x0A	; 10
    4cf6:	31 05       	cpc	r19, r1
    4cf8:	d1 f4       	brne	.+52     	; 0x4d2e <_ZN5Print5printEli+0x66>
    if (n < 0) {
    4cfa:	77 ff       	sbrs	r23, 7
    4cfc:	17 c0       	rjmp	.+46     	; 0x4d2c <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4cfe:	e8 81       	ld	r30, Y
    4d00:	f9 81       	ldd	r31, Y+1	; 0x01
    4d02:	01 90       	ld	r0, Z+
    4d04:	f0 81       	ld	r31, Z
    4d06:	e0 2d       	mov	r30, r0
    4d08:	6d e2       	ldi	r22, 0x2D	; 45
    4d0a:	09 95       	icall
    4d0c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    4d0e:	44 27       	eor	r20, r20
    4d10:	55 27       	eor	r21, r21
    4d12:	ba 01       	movw	r22, r20
    4d14:	4c 19       	sub	r20, r12
    4d16:	5d 09       	sbc	r21, r13
    4d18:	6e 09       	sbc	r22, r14
    4d1a:	7f 09       	sbc	r23, r15
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	2a e0       	ldi	r18, 0x0A	; 10
    4d20:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN5Print11printNumberEmh>
    4d24:	98 01       	movw	r18, r16
    4d26:	28 0f       	add	r18, r24
    4d28:	39 1f       	adc	r19, r25
    4d2a:	04 c0       	rjmp	.+8      	; 0x4d34 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    4d2c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    4d2e:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <_ZN5Print11printNumberEmh>
    4d32:	9c 01       	movw	r18, r24
  }
}
    4d34:	c9 01       	movw	r24, r18
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	1f 91       	pop	r17
    4d3c:	0f 91       	pop	r16
    4d3e:	ff 90       	pop	r15
    4d40:	ef 90       	pop	r14
    4d42:	df 90       	pop	r13
    4d44:	cf 90       	pop	r12
    4d46:	08 95       	ret

00004d48 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    4d48:	ef 92       	push	r14
    4d4a:	ff 92       	push	r15
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	7b 01       	movw	r14, r22
    4d52:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
    4d54:	00 27       	eor	r16, r16
    4d56:	f7 fc       	sbrc	r15, 7
    4d58:	00 95       	com	r16
    4d5a:	10 2f       	mov	r17, r16
    4d5c:	b8 01       	movw	r22, r16
    4d5e:	a7 01       	movw	r20, r14
    4d60:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN5Print5printEli>
}
    4d64:	1f 91       	pop	r17
    4d66:	0f 91       	pop	r16
    4d68:	ff 90       	pop	r15
    4d6a:	ef 90       	pop	r14
    4d6c:	08 95       	ret

00004d6e <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4d6e:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5writeEPKc>
}
    4d72:	08 95       	ret

00004d74 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    4d74:	7f 92       	push	r7
    4d76:	8f 92       	push	r8
    4d78:	9f 92       	push	r9
    4d7a:	af 92       	push	r10
    4d7c:	bf 92       	push	r11
    4d7e:	cf 92       	push	r12
    4d80:	df 92       	push	r13
    4d82:	ef 92       	push	r14
    4d84:	ff 92       	push	r15
    4d86:	0f 93       	push	r16
    4d88:	1f 93       	push	r17
    4d8a:	cf 93       	push	r28
    4d8c:	df 93       	push	r29
    4d8e:	4c 01       	movw	r8, r24
    4d90:	7a 01       	movw	r14, r20
    4d92:	8b 01       	movw	r16, r22
    4d94:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    4d96:	cb 01       	movw	r24, r22
    4d98:	ba 01       	movw	r22, r20
    4d9a:	20 e0       	ldi	r18, 0x00	; 0
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	40 e0       	ldi	r20, 0x00	; 0
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	0e 94 f7 29 	call	0x53ee	; 0x53ee <__cmpsf2>
    4da6:	87 fd       	sbrc	r24, 7
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <_ZN5Print10printFloatEdh+0x3c>
    4daa:	c0 e0       	ldi	r28, 0x00	; 0
    4dac:	d0 e0       	ldi	r29, 0x00	; 0
    4dae:	0e c0       	rjmp	.+28     	; 0x4dcc <_ZN5Print10printFloatEdh+0x58>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4db0:	d4 01       	movw	r26, r8
    4db2:	ed 91       	ld	r30, X+
    4db4:	fc 91       	ld	r31, X
    4db6:	01 90       	ld	r0, Z+
    4db8:	f0 81       	ld	r31, Z
    4dba:	e0 2d       	mov	r30, r0
    4dbc:	c4 01       	movw	r24, r8
    4dbe:	6d e2       	ldi	r22, 0x2D	; 45
    4dc0:	09 95       	icall
    4dc2:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    4dc4:	17 fb       	bst	r17, 7
    4dc6:	10 95       	com	r17
    4dc8:	17 f9       	bld	r17, 7
    4dca:	10 95       	com	r17
    4dcc:	20 e0       	ldi	r18, 0x00	; 0
    4dce:	30 e0       	ldi	r19, 0x00	; 0
    4dd0:	40 e0       	ldi	r20, 0x00	; 0
    4dd2:	5f e3       	ldi	r21, 0x3F	; 63
    4dd4:	aa 24       	eor	r10, r10
    4dd6:	0b c0       	rjmp	.+22     	; 0x4dee <_ZN5Print10printFloatEdh+0x7a>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    4dd8:	ca 01       	movw	r24, r20
    4dda:	b9 01       	movw	r22, r18
    4ddc:	20 e0       	ldi	r18, 0x00	; 0
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	40 e2       	ldi	r20, 0x20	; 32
    4de2:	51 e4       	ldi	r21, 0x41	; 65
    4de4:	0e 94 fb 29 	call	0x53f6	; 0x53f6 <__divsf3>
    4de8:	9b 01       	movw	r18, r22
    4dea:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4dec:	a3 94       	inc	r10
    4dee:	a7 14       	cp	r10, r7
    4df0:	98 f3       	brcs	.-26     	; 0x4dd8 <_ZN5Print10printFloatEdh+0x64>
    rounding /= 10.0;
  
  number += rounding;
    4df2:	c8 01       	movw	r24, r16
    4df4:	b7 01       	movw	r22, r14
    4df6:	0e 94 93 29 	call	0x5326	; 0x5326 <__addsf3>
    4dfa:	5b 01       	movw	r10, r22
    4dfc:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4dfe:	0e 94 68 2a 	call	0x54d0	; 0x54d0 <__fixunssfsi>
    4e02:	7b 01       	movw	r14, r22
    4e04:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    4e06:	c4 01       	movw	r24, r8
    4e08:	b8 01       	movw	r22, r16
    4e0a:	a7 01       	movw	r20, r14
    4e0c:	2a e0       	ldi	r18, 0x0A	; 10
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	0e 94 55 26 	call	0x4caa	; 0x4caa <_ZN5Print5printEmi>
    4e14:	c8 0f       	add	r28, r24
    4e16:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4e18:	77 20       	and	r7, r7
    4e1a:	39 f0       	breq	.+14     	; 0x4e2a <_ZN5Print10printFloatEdh+0xb6>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4e1c:	c4 01       	movw	r24, r8
    4e1e:	6b ee       	ldi	r22, 0xEB	; 235
    4e20:	71 e0       	ldi	r23, 0x01	; 1
    4e22:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4e26:	c8 0f       	add	r28, r24
    4e28:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4e2a:	c8 01       	movw	r24, r16
    4e2c:	b7 01       	movw	r22, r14
    4e2e:	0e 94 94 2a 	call	0x5528	; 0x5528 <__floatunsisf>
    4e32:	9b 01       	movw	r18, r22
    4e34:	ac 01       	movw	r20, r24
    4e36:	c6 01       	movw	r24, r12
    4e38:	b5 01       	movw	r22, r10
    4e3a:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    4e3e:	24 c0       	rjmp	.+72     	; 0x4e88 <_ZN5Print10printFloatEdh+0x114>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	40 e2       	ldi	r20, 0x20	; 32
    4e46:	51 e4       	ldi	r21, 0x41	; 65
    4e48:	0e 94 4a 2b 	call	0x5694	; 0x5694 <__mulsf3>
    4e4c:	7b 01       	movw	r14, r22
    4e4e:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    4e50:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <__fixsfsi>
    4e54:	5b 01       	movw	r10, r22
    4e56:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4e58:	cc 24       	eor	r12, r12
    4e5a:	b7 fc       	sbrc	r11, 7
    4e5c:	c0 94       	com	r12
    4e5e:	dc 2c       	mov	r13, r12
    4e60:	c4 01       	movw	r24, r8
    4e62:	b6 01       	movw	r22, r12
    4e64:	a5 01       	movw	r20, r10
    4e66:	2a e0       	ldi	r18, 0x0A	; 10
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    4e6e:	c8 0f       	add	r28, r24
    4e70:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4e72:	c6 01       	movw	r24, r12
    4e74:	b5 01       	movw	r22, r10
    4e76:	0e 94 96 2a 	call	0x552c	; 0x552c <__floatsisf>
    4e7a:	9b 01       	movw	r18, r22
    4e7c:	ac 01       	movw	r20, r24
    4e7e:	c8 01       	movw	r24, r16
    4e80:	b7 01       	movw	r22, r14
    4e82:	0e 94 92 29 	call	0x5324	; 0x5324 <__subsf3>
    4e86:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4e88:	77 20       	and	r7, r7
    4e8a:	d1 f6       	brne	.-76     	; 0x4e40 <_ZN5Print10printFloatEdh+0xcc>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
    4e9e:	bf 90       	pop	r11
    4ea0:	af 90       	pop	r10
    4ea2:	9f 90       	pop	r9
    4ea4:	8f 90       	pop	r8
    4ea6:	7f 90       	pop	r7
    4ea8:	08 95       	ret

00004eaa <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4eaa:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <_ZN5Print10printFloatEdh>
}
    4eae:	08 95       	ret

00004eb0 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    4eb0:	ef 92       	push	r14
    4eb2:	ff 92       	push	r15
    4eb4:	0f 93       	push	r16
    4eb6:	1f 93       	push	r17
    4eb8:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4eba:	0e 94 ba 26 	call	0x4d74	; 0x4d74 <_ZN5Print10printFloatEdh>
    4ebe:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    4ec0:	c7 01       	movw	r24, r14
    4ec2:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN5Print7printlnEv>
    4ec6:	08 0f       	add	r16, r24
    4ec8:	19 1f       	adc	r17, r25
  return n;
}
    4eca:	c8 01       	movw	r24, r16
    4ecc:	1f 91       	pop	r17
    4ece:	0f 91       	pop	r16
    4ed0:	ff 90       	pop	r15
    4ed2:	ef 90       	pop	r14
    4ed4:	08 95       	ret

00004ed6 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    4ed6:	ef 92       	push	r14
    4ed8:	ff 92       	push	r15
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4ee0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <_ZN5Print5writeEPKc>
    4ee4:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4ee6:	c7 01       	movw	r24, r14
    4ee8:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN5Print7printlnEv>
    4eec:	08 0f       	add	r16, r24
    4eee:	19 1f       	adc	r17, r25
  return n;
}
    4ef0:	c8 01       	movw	r24, r16
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	08 95       	ret

00004efc <main>:
#include <Arduino.h>

int main(void)
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
{
	init();
    4f00:	0e 94 4c 28 	call	0x5098	; 0x5098 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4f04:	0e 94 1e 19 	call	0x323c	; 0x323c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4f08:	ca ea       	ldi	r28, 0xAA	; 170
    4f0a:	d3 e2       	ldi	r29, 0x23	; 35
#endif
	
	setup();
    
	for (;;) {
		loop();
    4f0c:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <loop>
		if (serialEventRun) serialEventRun();
    4f10:	20 97       	sbiw	r28, 0x00	; 0
    4f12:	e1 f3       	breq	.-8      	; 0x4f0c <main+0x10>
    4f14:	0e 94 aa 23 	call	0x4754	; 0x4754 <_Z14serialEventRunv>
    4f18:	f9 cf       	rjmp	.-14     	; 0x4f0c <main+0x10>

00004f1a <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    4f1a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <free>
} 
    4f1e:	08 95       	ret

00004f20 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    4f20:	0e 94 2d 01 	call	0x25a	; 0x25a <malloc>
}
    4f24:	08 95       	ret

00004f26 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    4f26:	1f 92       	push	r1
    4f28:	0f 92       	push	r0
    4f2a:	0f b6       	in	r0, 0x3f	; 63
    4f2c:	0f 92       	push	r0
    4f2e:	11 24       	eor	r1, r1
    4f30:	2f 93       	push	r18
    4f32:	3f 93       	push	r19
    4f34:	8f 93       	push	r24
    4f36:	9f 93       	push	r25
    4f38:	af 93       	push	r26
    4f3a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4f3c:	80 91 65 03 	lds	r24, 0x0365
    4f40:	90 91 66 03 	lds	r25, 0x0366
    4f44:	a0 91 67 03 	lds	r26, 0x0367
    4f48:	b0 91 68 03 	lds	r27, 0x0368
	unsigned char f = timer0_fract;
    4f4c:	30 91 69 03 	lds	r19, 0x0369

	m += MILLIS_INC;
    4f50:	01 96       	adiw	r24, 0x01	; 1
    4f52:	a1 1d       	adc	r26, r1
    4f54:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    4f56:	23 2f       	mov	r18, r19
    4f58:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    4f5a:	2d 37       	cpi	r18, 0x7D	; 125
    4f5c:	20 f0       	brcs	.+8      	; 0x4f66 <__vector_16+0x40>
		f -= FRACT_MAX;
    4f5e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    4f60:	01 96       	adiw	r24, 0x01	; 1
    4f62:	a1 1d       	adc	r26, r1
    4f64:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4f66:	20 93 69 03 	sts	0x0369, r18
	timer0_millis = m;
    4f6a:	80 93 65 03 	sts	0x0365, r24
    4f6e:	90 93 66 03 	sts	0x0366, r25
    4f72:	a0 93 67 03 	sts	0x0367, r26
    4f76:	b0 93 68 03 	sts	0x0368, r27
	timer0_overflow_count++;
    4f7a:	80 91 61 03 	lds	r24, 0x0361
    4f7e:	90 91 62 03 	lds	r25, 0x0362
    4f82:	a0 91 63 03 	lds	r26, 0x0363
    4f86:	b0 91 64 03 	lds	r27, 0x0364
    4f8a:	01 96       	adiw	r24, 0x01	; 1
    4f8c:	a1 1d       	adc	r26, r1
    4f8e:	b1 1d       	adc	r27, r1
    4f90:	80 93 61 03 	sts	0x0361, r24
    4f94:	90 93 62 03 	sts	0x0362, r25
    4f98:	a0 93 63 03 	sts	0x0363, r26
    4f9c:	b0 93 64 03 	sts	0x0364, r27
}
    4fa0:	bf 91       	pop	r27
    4fa2:	af 91       	pop	r26
    4fa4:	9f 91       	pop	r25
    4fa6:	8f 91       	pop	r24
    4fa8:	3f 91       	pop	r19
    4faa:	2f 91       	pop	r18
    4fac:	0f 90       	pop	r0
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	0f 90       	pop	r0
    4fb2:	1f 90       	pop	r1
    4fb4:	18 95       	reti

00004fb6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4fb6:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4fb8:	f8 94       	cli
	m = timer0_millis;
    4fba:	20 91 65 03 	lds	r18, 0x0365
    4fbe:	30 91 66 03 	lds	r19, 0x0366
    4fc2:	40 91 67 03 	lds	r20, 0x0367
    4fc6:	50 91 68 03 	lds	r21, 0x0368
	SREG = oldSREG;
    4fca:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    4fcc:	b9 01       	movw	r22, r18
    4fce:	ca 01       	movw	r24, r20
    4fd0:	08 95       	ret

00004fd2 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    4fd2:	9b 01       	movw	r18, r22
    4fd4:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4fd6:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    4fd8:	f8 94       	cli
	m = timer0_overflow_count;
    4fda:	80 91 61 03 	lds	r24, 0x0361
    4fde:	90 91 62 03 	lds	r25, 0x0362
    4fe2:	a0 91 63 03 	lds	r26, 0x0363
    4fe6:	b0 91 64 03 	lds	r27, 0x0364
#if defined(TCNT0)
	t = TCNT0;
    4fea:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4fec:	a8 9b       	sbis	0x15, 0	; 21
    4fee:	05 c0       	rjmp	.+10     	; 0x4ffa <delay+0x28>
    4ff0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ff2:	19 f0       	breq	.+6      	; 0x4ffa <delay+0x28>
		m++;
    4ff4:	01 96       	adiw	r24, 0x01	; 1
    4ff6:	a1 1d       	adc	r26, r1
    4ff8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4ffa:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    4ffc:	ba 2f       	mov	r27, r26
    4ffe:	a9 2f       	mov	r26, r25
    5000:	98 2f       	mov	r25, r24
    5002:	88 27       	eor	r24, r24
    5004:	86 0f       	add	r24, r22
    5006:	91 1d       	adc	r25, r1
    5008:	a1 1d       	adc	r26, r1
    500a:	b1 1d       	adc	r27, r1
    500c:	62 e0       	ldi	r22, 0x02	; 2
    500e:	88 0f       	add	r24, r24
    5010:	99 1f       	adc	r25, r25
    5012:	aa 1f       	adc	r26, r26
    5014:	bb 1f       	adc	r27, r27
    5016:	6a 95       	dec	r22
    5018:	d1 f7       	brne	.-12     	; 0x500e <delay+0x3c>
    501a:	bc 01       	movw	r22, r24
    501c:	2d c0       	rjmp	.+90     	; 0x5078 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    501e:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    5020:	f8 94       	cli
	m = timer0_overflow_count;
    5022:	80 91 61 03 	lds	r24, 0x0361
    5026:	90 91 62 03 	lds	r25, 0x0362
    502a:	a0 91 63 03 	lds	r26, 0x0363
    502e:	b0 91 64 03 	lds	r27, 0x0364
#if defined(TCNT0)
	t = TCNT0;
    5032:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5034:	a8 9b       	sbis	0x15, 0	; 21
    5036:	05 c0       	rjmp	.+10     	; 0x5042 <delay+0x70>
    5038:	ef 3f       	cpi	r30, 0xFF	; 255
    503a:	19 f0       	breq	.+6      	; 0x5042 <delay+0x70>
		m++;
    503c:	01 96       	adiw	r24, 0x01	; 1
    503e:	a1 1d       	adc	r26, r1
    5040:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5042:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5044:	ba 2f       	mov	r27, r26
    5046:	a9 2f       	mov	r26, r25
    5048:	98 2f       	mov	r25, r24
    504a:	88 27       	eor	r24, r24
    504c:	8e 0f       	add	r24, r30
    504e:	91 1d       	adc	r25, r1
    5050:	a1 1d       	adc	r26, r1
    5052:	b1 1d       	adc	r27, r1
    5054:	e2 e0       	ldi	r30, 0x02	; 2
    5056:	88 0f       	add	r24, r24
    5058:	99 1f       	adc	r25, r25
    505a:	aa 1f       	adc	r26, r26
    505c:	bb 1f       	adc	r27, r27
    505e:	ea 95       	dec	r30
    5060:	d1 f7       	brne	.-12     	; 0x5056 <delay+0x84>
    5062:	86 1b       	sub	r24, r22
    5064:	97 0b       	sbc	r25, r23
    5066:	88 5e       	subi	r24, 0xE8	; 232
    5068:	93 40       	sbci	r25, 0x03	; 3
    506a:	c8 f2       	brcs	.-78     	; 0x501e <delay+0x4c>
			ms--;
    506c:	21 50       	subi	r18, 0x01	; 1
    506e:	30 40       	sbci	r19, 0x00	; 0
    5070:	40 40       	sbci	r20, 0x00	; 0
    5072:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    5074:	68 51       	subi	r22, 0x18	; 24
    5076:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    5078:	21 15       	cp	r18, r1
    507a:	31 05       	cpc	r19, r1
    507c:	41 05       	cpc	r20, r1
    507e:	51 05       	cpc	r21, r1
    5080:	71 f6       	brne	.-100    	; 0x501e <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    5082:	08 95       	ret

00005084 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    5084:	01 97       	sbiw	r24, 0x01	; 1
    5086:	39 f0       	breq	.+14     	; 0x5096 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    5088:	88 0f       	add	r24, r24
    508a:	99 1f       	adc	r25, r25
    508c:	88 0f       	add	r24, r24
    508e:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    5090:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    5092:	01 97       	sbiw	r24, 0x01	; 1
    5094:	f1 f7       	brne	.-4      	; 0x5092 <delayMicroseconds+0xe>
    5096:	08 95       	ret

00005098 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5098:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    509a:	84 b5       	in	r24, 0x24	; 36
    509c:	82 60       	ori	r24, 0x02	; 2
    509e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    50a0:	84 b5       	in	r24, 0x24	; 36
    50a2:	81 60       	ori	r24, 0x01	; 1
    50a4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    50a6:	85 b5       	in	r24, 0x25	; 37
    50a8:	82 60       	ori	r24, 0x02	; 2
    50aa:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    50ac:	85 b5       	in	r24, 0x25	; 37
    50ae:	81 60       	ori	r24, 0x01	; 1
    50b0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    50b2:	ee e6       	ldi	r30, 0x6E	; 110
    50b4:	f0 e0       	ldi	r31, 0x00	; 0
    50b6:	80 81       	ld	r24, Z
    50b8:	81 60       	ori	r24, 0x01	; 1
    50ba:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    50bc:	e1 e8       	ldi	r30, 0x81	; 129
    50be:	f0 e0       	ldi	r31, 0x00	; 0
    50c0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    50c2:	80 81       	ld	r24, Z
    50c4:	82 60       	ori	r24, 0x02	; 2
    50c6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    50c8:	80 81       	ld	r24, Z
    50ca:	81 60       	ori	r24, 0x01	; 1
    50cc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    50ce:	e0 e8       	ldi	r30, 0x80	; 128
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	80 81       	ld	r24, Z
    50d4:	81 60       	ori	r24, 0x01	; 1
    50d6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    50d8:	e1 eb       	ldi	r30, 0xB1	; 177
    50da:	f0 e0       	ldi	r31, 0x00	; 0
    50dc:	80 81       	ld	r24, Z
    50de:	84 60       	ori	r24, 0x04	; 4
    50e0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    50e2:	e0 eb       	ldi	r30, 0xB0	; 176
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	80 81       	ld	r24, Z
    50e8:	81 60       	ori	r24, 0x01	; 1
    50ea:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    50ec:	ea e7       	ldi	r30, 0x7A	; 122
    50ee:	f0 e0       	ldi	r31, 0x00	; 0
    50f0:	80 81       	ld	r24, Z
    50f2:	84 60       	ori	r24, 0x04	; 4
    50f4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    50f6:	80 81       	ld	r24, Z
    50f8:	82 60       	ori	r24, 0x02	; 2
    50fa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    50fc:	80 81       	ld	r24, Z
    50fe:	81 60       	ori	r24, 0x01	; 1
    5100:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    5102:	80 81       	ld	r24, Z
    5104:	80 68       	ori	r24, 0x80	; 128
    5106:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    5108:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    510c:	08 95       	ret

0000510e <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    510e:	80 93 f7 01 	sts	0x01F7, r24
}
    5112:	08 95       	ret

00005114 <analogRead>:

int analogRead(uint8_t pin)
{
    5114:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    5116:	8e 30       	cpi	r24, 0x0E	; 14
    5118:	08 f0       	brcs	.+2      	; 0x511c <analogRead+0x8>
    511a:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    511c:	97 70       	andi	r25, 0x07	; 7
    511e:	80 91 f7 01 	lds	r24, 0x01F7
    5122:	82 95       	swap	r24
    5124:	88 0f       	add	r24, r24
    5126:	88 0f       	add	r24, r24
    5128:	80 7c       	andi	r24, 0xC0	; 192
    512a:	89 2b       	or	r24, r25
    512c:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    5130:	80 91 7a 00 	lds	r24, 0x007A
    5134:	80 64       	ori	r24, 0x40	; 64
    5136:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    513a:	80 91 7a 00 	lds	r24, 0x007A
    513e:	86 fd       	sbrc	r24, 6
    5140:	fc cf       	rjmp	.-8      	; 0x513a <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    5142:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    5146:	40 91 79 00 	lds	r20, 0x0079
    514a:	94 2f       	mov	r25, r20
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	30 e0       	ldi	r19, 0x00	; 0
    5150:	28 2b       	or	r18, r24
    5152:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    5154:	c9 01       	movw	r24, r18
    5156:	08 95       	ret

00005158 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    515c:	48 2f       	mov	r20, r24
    515e:	50 e0       	ldi	r21, 0x00	; 0
    5160:	ca 01       	movw	r24, r20
    5162:	86 56       	subi	r24, 0x66	; 102
    5164:	9e 4f       	sbci	r25, 0xFE	; 254
    5166:	fc 01       	movw	r30, r24
    5168:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    516a:	4a 57       	subi	r20, 0x7A	; 122
    516c:	5e 4f       	sbci	r21, 0xFE	; 254
    516e:	fa 01       	movw	r30, r20
    5170:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    5172:	88 23       	and	r24, r24
    5174:	69 f1       	breq	.+90     	; 0x51d0 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    5176:	90 e0       	ldi	r25, 0x00	; 0
    5178:	88 0f       	add	r24, r24
    517a:	99 1f       	adc	r25, r25
    517c:	fc 01       	movw	r30, r24
    517e:	e8 59       	subi	r30, 0x98	; 152
    5180:	fe 4f       	sbci	r31, 0xFE	; 254
    5182:	a5 91       	lpm	r26, Z+
    5184:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    5186:	fc 01       	movw	r30, r24
    5188:	ee 58       	subi	r30, 0x8E	; 142
    518a:	fe 4f       	sbci	r31, 0xFE	; 254
    518c:	c5 91       	lpm	r28, Z+
    518e:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    5190:	66 23       	and	r22, r22
    5192:	51 f4       	brne	.+20     	; 0x51a8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    5194:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5196:	f8 94       	cli
		*reg &= ~bit;
    5198:	8c 91       	ld	r24, X
    519a:	93 2f       	mov	r25, r19
    519c:	90 95       	com	r25
    519e:	89 23       	and	r24, r25
    51a0:	8c 93       	st	X, r24
		*out &= ~bit;
    51a2:	88 81       	ld	r24, Y
    51a4:	89 23       	and	r24, r25
    51a6:	0b c0       	rjmp	.+22     	; 0x51be <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    51a8:	62 30       	cpi	r22, 0x02	; 2
    51aa:	61 f4       	brne	.+24     	; 0x51c4 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    51ac:	2f b7       	in	r18, 0x3f	; 63
                cli();
    51ae:	f8 94       	cli
		*reg &= ~bit;
    51b0:	8c 91       	ld	r24, X
    51b2:	93 2f       	mov	r25, r19
    51b4:	90 95       	com	r25
    51b6:	89 23       	and	r24, r25
    51b8:	8c 93       	st	X, r24
		*out |= bit;
    51ba:	88 81       	ld	r24, Y
    51bc:	83 2b       	or	r24, r19
    51be:	88 83       	st	Y, r24
		SREG = oldSREG;
    51c0:	2f bf       	out	0x3f, r18	; 63
    51c2:	06 c0       	rjmp	.+12     	; 0x51d0 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    51c4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    51c6:	f8 94       	cli
		*reg |= bit;
    51c8:	8c 91       	ld	r24, X
    51ca:	83 2b       	or	r24, r19
    51cc:	8c 93       	st	X, r24
		SREG = oldSREG;
    51ce:	9f bf       	out	0x3f, r25	; 63
	}
}
    51d0:	df 91       	pop	r29
    51d2:	cf 91       	pop	r28
    51d4:	08 95       	ret

000051d6 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    51d6:	48 2f       	mov	r20, r24
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	ca 01       	movw	r24, r20
    51dc:	82 55       	subi	r24, 0x52	; 82
    51de:	9e 4f       	sbci	r25, 0xFE	; 254
    51e0:	fc 01       	movw	r30, r24
    51e2:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    51e4:	ca 01       	movw	r24, r20
    51e6:	86 56       	subi	r24, 0x66	; 102
    51e8:	9e 4f       	sbci	r25, 0xFE	; 254
    51ea:	fc 01       	movw	r30, r24
    51ec:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    51ee:	4a 57       	subi	r20, 0x7A	; 122
    51f0:	5e 4f       	sbci	r21, 0xFE	; 254
    51f2:	fa 01       	movw	r30, r20
    51f4:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    51f6:	33 23       	and	r19, r19
    51f8:	09 f4       	brne	.+2      	; 0x51fc <digitalWrite+0x26>
    51fa:	40 c0       	rjmp	.+128    	; 0x527c <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    51fc:	22 23       	and	r18, r18
    51fe:	51 f1       	breq	.+84     	; 0x5254 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    5200:	23 30       	cpi	r18, 0x03	; 3
    5202:	71 f0       	breq	.+28     	; 0x5220 <digitalWrite+0x4a>
    5204:	24 30       	cpi	r18, 0x04	; 4
    5206:	28 f4       	brcc	.+10     	; 0x5212 <digitalWrite+0x3c>
    5208:	21 30       	cpi	r18, 0x01	; 1
    520a:	a1 f0       	breq	.+40     	; 0x5234 <digitalWrite+0x5e>
    520c:	22 30       	cpi	r18, 0x02	; 2
    520e:	11 f5       	brne	.+68     	; 0x5254 <digitalWrite+0x7e>
    5210:	14 c0       	rjmp	.+40     	; 0x523a <digitalWrite+0x64>
    5212:	26 30       	cpi	r18, 0x06	; 6
    5214:	b1 f0       	breq	.+44     	; 0x5242 <digitalWrite+0x6c>
    5216:	27 30       	cpi	r18, 0x07	; 7
    5218:	c1 f0       	breq	.+48     	; 0x524a <digitalWrite+0x74>
    521a:	24 30       	cpi	r18, 0x04	; 4
    521c:	d9 f4       	brne	.+54     	; 0x5254 <digitalWrite+0x7e>
    521e:	04 c0       	rjmp	.+8      	; 0x5228 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    5220:	80 91 80 00 	lds	r24, 0x0080
    5224:	8f 77       	andi	r24, 0x7F	; 127
    5226:	03 c0       	rjmp	.+6      	; 0x522e <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5228:	80 91 80 00 	lds	r24, 0x0080
    522c:	8f 7d       	andi	r24, 0xDF	; 223
    522e:	80 93 80 00 	sts	0x0080, r24
    5232:	10 c0       	rjmp	.+32     	; 0x5254 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    5234:	84 b5       	in	r24, 0x24	; 36
    5236:	8f 77       	andi	r24, 0x7F	; 127
    5238:	02 c0       	rjmp	.+4      	; 0x523e <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    523a:	84 b5       	in	r24, 0x24	; 36
    523c:	8f 7d       	andi	r24, 0xDF	; 223
    523e:	84 bd       	out	0x24, r24	; 36
    5240:	09 c0       	rjmp	.+18     	; 0x5254 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    5242:	80 91 b0 00 	lds	r24, 0x00B0
    5246:	8f 77       	andi	r24, 0x7F	; 127
    5248:	03 c0       	rjmp	.+6      	; 0x5250 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    524a:	80 91 b0 00 	lds	r24, 0x00B0
    524e:	8f 7d       	andi	r24, 0xDF	; 223
    5250:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    5254:	e3 2f       	mov	r30, r19
    5256:	f0 e0       	ldi	r31, 0x00	; 0
    5258:	ee 0f       	add	r30, r30
    525a:	ff 1f       	adc	r31, r31
    525c:	ee 58       	subi	r30, 0x8E	; 142
    525e:	fe 4f       	sbci	r31, 0xFE	; 254
    5260:	a5 91       	lpm	r26, Z+
    5262:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    5264:	2f b7       	in	r18, 0x3f	; 63
	cli();
    5266:	f8 94       	cli

	if (val == LOW) {
    5268:	66 23       	and	r22, r22
    526a:	21 f4       	brne	.+8      	; 0x5274 <digitalWrite+0x9e>
		*out &= ~bit;
    526c:	8c 91       	ld	r24, X
    526e:	90 95       	com	r25
    5270:	89 23       	and	r24, r25
    5272:	02 c0       	rjmp	.+4      	; 0x5278 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    5274:	8c 91       	ld	r24, X
    5276:	89 2b       	or	r24, r25
    5278:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    527a:	2f bf       	out	0x3f, r18	; 63
    527c:	08 95       	ret

0000527e <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    527e:	68 2f       	mov	r22, r24
    5280:	70 e0       	ldi	r23, 0x00	; 0
    5282:	cb 01       	movw	r24, r22
    5284:	82 55       	subi	r24, 0x52	; 82
    5286:	9e 4f       	sbci	r25, 0xFE	; 254
    5288:	fc 01       	movw	r30, r24
    528a:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    528c:	cb 01       	movw	r24, r22
    528e:	86 56       	subi	r24, 0x66	; 102
    5290:	9e 4f       	sbci	r25, 0xFE	; 254
    5292:	fc 01       	movw	r30, r24
    5294:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    5296:	6a 57       	subi	r22, 0x7A	; 122
    5298:	7e 4f       	sbci	r23, 0xFE	; 254
    529a:	fb 01       	movw	r30, r22
    529c:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    529e:	99 23       	and	r25, r25
    52a0:	19 f4       	brne	.+6      	; 0x52a8 <digitalRead+0x2a>
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	3c c0       	rjmp	.+120    	; 0x5320 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    52a8:	22 23       	and	r18, r18
    52aa:	51 f1       	breq	.+84     	; 0x5300 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    52ac:	23 30       	cpi	r18, 0x03	; 3
    52ae:	71 f0       	breq	.+28     	; 0x52cc <digitalRead+0x4e>
    52b0:	24 30       	cpi	r18, 0x04	; 4
    52b2:	28 f4       	brcc	.+10     	; 0x52be <digitalRead+0x40>
    52b4:	21 30       	cpi	r18, 0x01	; 1
    52b6:	a1 f0       	breq	.+40     	; 0x52e0 <digitalRead+0x62>
    52b8:	22 30       	cpi	r18, 0x02	; 2
    52ba:	11 f5       	brne	.+68     	; 0x5300 <digitalRead+0x82>
    52bc:	14 c0       	rjmp	.+40     	; 0x52e6 <digitalRead+0x68>
    52be:	26 30       	cpi	r18, 0x06	; 6
    52c0:	b1 f0       	breq	.+44     	; 0x52ee <digitalRead+0x70>
    52c2:	27 30       	cpi	r18, 0x07	; 7
    52c4:	c1 f0       	breq	.+48     	; 0x52f6 <digitalRead+0x78>
    52c6:	24 30       	cpi	r18, 0x04	; 4
    52c8:	d9 f4       	brne	.+54     	; 0x5300 <digitalRead+0x82>
    52ca:	04 c0       	rjmp	.+8      	; 0x52d4 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    52cc:	80 91 80 00 	lds	r24, 0x0080
    52d0:	8f 77       	andi	r24, 0x7F	; 127
    52d2:	03 c0       	rjmp	.+6      	; 0x52da <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    52d4:	80 91 80 00 	lds	r24, 0x0080
    52d8:	8f 7d       	andi	r24, 0xDF	; 223
    52da:	80 93 80 00 	sts	0x0080, r24
    52de:	10 c0       	rjmp	.+32     	; 0x5300 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    52e0:	84 b5       	in	r24, 0x24	; 36
    52e2:	8f 77       	andi	r24, 0x7F	; 127
    52e4:	02 c0       	rjmp	.+4      	; 0x52ea <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    52e6:	84 b5       	in	r24, 0x24	; 36
    52e8:	8f 7d       	andi	r24, 0xDF	; 223
    52ea:	84 bd       	out	0x24, r24	; 36
    52ec:	09 c0       	rjmp	.+18     	; 0x5300 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    52ee:	80 91 b0 00 	lds	r24, 0x00B0
    52f2:	8f 77       	andi	r24, 0x7F	; 127
    52f4:	03 c0       	rjmp	.+6      	; 0x52fc <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    52f6:	80 91 b0 00 	lds	r24, 0x00B0
    52fa:	8f 7d       	andi	r24, 0xDF	; 223
    52fc:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    5300:	89 2f       	mov	r24, r25
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	88 0f       	add	r24, r24
    5306:	99 1f       	adc	r25, r25
    5308:	84 58       	subi	r24, 0x84	; 132
    530a:	9e 4f       	sbci	r25, 0xFE	; 254
    530c:	fc 01       	movw	r30, r24
    530e:	a5 91       	lpm	r26, Z+
    5310:	b4 91       	lpm	r27, Z+
    5312:	8c 91       	ld	r24, X
    5314:	20 e0       	ldi	r18, 0x00	; 0
    5316:	30 e0       	ldi	r19, 0x00	; 0
    5318:	84 23       	and	r24, r20
    531a:	11 f0       	breq	.+4      	; 0x5320 <digitalRead+0xa2>
    531c:	21 e0       	ldi	r18, 0x01	; 1
    531e:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    5320:	c9 01       	movw	r24, r18
    5322:	08 95       	ret

00005324 <__subsf3>:
    5324:	50 58       	subi	r21, 0x80	; 128

00005326 <__addsf3>:
    5326:	bb 27       	eor	r27, r27
    5328:	aa 27       	eor	r26, r26
    532a:	0e d0       	rcall	.+28     	; 0x5348 <__addsf3x>
    532c:	75 c1       	rjmp	.+746    	; 0x5618 <__fp_round>
    532e:	66 d1       	rcall	.+716    	; 0x55fc <__fp_pscA>
    5330:	30 f0       	brcs	.+12     	; 0x533e <__addsf3+0x18>
    5332:	6b d1       	rcall	.+726    	; 0x560a <__fp_pscB>
    5334:	20 f0       	brcs	.+8      	; 0x533e <__addsf3+0x18>
    5336:	31 f4       	brne	.+12     	; 0x5344 <__addsf3+0x1e>
    5338:	9f 3f       	cpi	r25, 0xFF	; 255
    533a:	11 f4       	brne	.+4      	; 0x5340 <__addsf3+0x1a>
    533c:	1e f4       	brtc	.+6      	; 0x5344 <__addsf3+0x1e>
    533e:	5b c1       	rjmp	.+694    	; 0x55f6 <__fp_nan>
    5340:	0e f4       	brtc	.+2      	; 0x5344 <__addsf3+0x1e>
    5342:	e0 95       	com	r30
    5344:	e7 fb       	bst	r30, 7
    5346:	51 c1       	rjmp	.+674    	; 0x55ea <__fp_inf>

00005348 <__addsf3x>:
    5348:	e9 2f       	mov	r30, r25
    534a:	77 d1       	rcall	.+750    	; 0x563a <__fp_split3>
    534c:	80 f3       	brcs	.-32     	; 0x532e <__addsf3+0x8>
    534e:	ba 17       	cp	r27, r26
    5350:	62 07       	cpc	r22, r18
    5352:	73 07       	cpc	r23, r19
    5354:	84 07       	cpc	r24, r20
    5356:	95 07       	cpc	r25, r21
    5358:	18 f0       	brcs	.+6      	; 0x5360 <__addsf3x+0x18>
    535a:	71 f4       	brne	.+28     	; 0x5378 <__addsf3x+0x30>
    535c:	9e f5       	brtc	.+102    	; 0x53c4 <__addsf3x+0x7c>
    535e:	8f c1       	rjmp	.+798    	; 0x567e <__fp_zero>
    5360:	0e f4       	brtc	.+2      	; 0x5364 <__addsf3x+0x1c>
    5362:	e0 95       	com	r30
    5364:	0b 2e       	mov	r0, r27
    5366:	ba 2f       	mov	r27, r26
    5368:	a0 2d       	mov	r26, r0
    536a:	0b 01       	movw	r0, r22
    536c:	b9 01       	movw	r22, r18
    536e:	90 01       	movw	r18, r0
    5370:	0c 01       	movw	r0, r24
    5372:	ca 01       	movw	r24, r20
    5374:	a0 01       	movw	r20, r0
    5376:	11 24       	eor	r1, r1
    5378:	ff 27       	eor	r31, r31
    537a:	59 1b       	sub	r21, r25
    537c:	99 f0       	breq	.+38     	; 0x53a4 <__addsf3x+0x5c>
    537e:	59 3f       	cpi	r21, 0xF9	; 249
    5380:	50 f4       	brcc	.+20     	; 0x5396 <__addsf3x+0x4e>
    5382:	50 3e       	cpi	r21, 0xE0	; 224
    5384:	68 f1       	brcs	.+90     	; 0x53e0 <__addsf3x+0x98>
    5386:	1a 16       	cp	r1, r26
    5388:	f0 40       	sbci	r31, 0x00	; 0
    538a:	a2 2f       	mov	r26, r18
    538c:	23 2f       	mov	r18, r19
    538e:	34 2f       	mov	r19, r20
    5390:	44 27       	eor	r20, r20
    5392:	58 5f       	subi	r21, 0xF8	; 248
    5394:	f3 cf       	rjmp	.-26     	; 0x537c <__addsf3x+0x34>
    5396:	46 95       	lsr	r20
    5398:	37 95       	ror	r19
    539a:	27 95       	ror	r18
    539c:	a7 95       	ror	r26
    539e:	f0 40       	sbci	r31, 0x00	; 0
    53a0:	53 95       	inc	r21
    53a2:	c9 f7       	brne	.-14     	; 0x5396 <__addsf3x+0x4e>
    53a4:	7e f4       	brtc	.+30     	; 0x53c4 <__addsf3x+0x7c>
    53a6:	1f 16       	cp	r1, r31
    53a8:	ba 0b       	sbc	r27, r26
    53aa:	62 0b       	sbc	r22, r18
    53ac:	73 0b       	sbc	r23, r19
    53ae:	84 0b       	sbc	r24, r20
    53b0:	ba f0       	brmi	.+46     	; 0x53e0 <__addsf3x+0x98>
    53b2:	91 50       	subi	r25, 0x01	; 1
    53b4:	a1 f0       	breq	.+40     	; 0x53de <__addsf3x+0x96>
    53b6:	ff 0f       	add	r31, r31
    53b8:	bb 1f       	adc	r27, r27
    53ba:	66 1f       	adc	r22, r22
    53bc:	77 1f       	adc	r23, r23
    53be:	88 1f       	adc	r24, r24
    53c0:	c2 f7       	brpl	.-16     	; 0x53b2 <__addsf3x+0x6a>
    53c2:	0e c0       	rjmp	.+28     	; 0x53e0 <__addsf3x+0x98>
    53c4:	ba 0f       	add	r27, r26
    53c6:	62 1f       	adc	r22, r18
    53c8:	73 1f       	adc	r23, r19
    53ca:	84 1f       	adc	r24, r20
    53cc:	48 f4       	brcc	.+18     	; 0x53e0 <__addsf3x+0x98>
    53ce:	87 95       	ror	r24
    53d0:	77 95       	ror	r23
    53d2:	67 95       	ror	r22
    53d4:	b7 95       	ror	r27
    53d6:	f7 95       	ror	r31
    53d8:	9e 3f       	cpi	r25, 0xFE	; 254
    53da:	08 f0       	brcs	.+2      	; 0x53de <__addsf3x+0x96>
    53dc:	b3 cf       	rjmp	.-154    	; 0x5344 <__addsf3+0x1e>
    53de:	93 95       	inc	r25
    53e0:	88 0f       	add	r24, r24
    53e2:	08 f0       	brcs	.+2      	; 0x53e6 <__addsf3x+0x9e>
    53e4:	99 27       	eor	r25, r25
    53e6:	ee 0f       	add	r30, r30
    53e8:	97 95       	ror	r25
    53ea:	87 95       	ror	r24
    53ec:	08 95       	ret

000053ee <__cmpsf2>:
    53ee:	d9 d0       	rcall	.+434    	; 0x55a2 <__fp_cmp>
    53f0:	08 f4       	brcc	.+2      	; 0x53f4 <__cmpsf2+0x6>
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	08 95       	ret

000053f6 <__divsf3>:
    53f6:	0c d0       	rcall	.+24     	; 0x5410 <__divsf3x>
    53f8:	0f c1       	rjmp	.+542    	; 0x5618 <__fp_round>
    53fa:	07 d1       	rcall	.+526    	; 0x560a <__fp_pscB>
    53fc:	40 f0       	brcs	.+16     	; 0x540e <__divsf3+0x18>
    53fe:	fe d0       	rcall	.+508    	; 0x55fc <__fp_pscA>
    5400:	30 f0       	brcs	.+12     	; 0x540e <__divsf3+0x18>
    5402:	21 f4       	brne	.+8      	; 0x540c <__divsf3+0x16>
    5404:	5f 3f       	cpi	r21, 0xFF	; 255
    5406:	19 f0       	breq	.+6      	; 0x540e <__divsf3+0x18>
    5408:	f0 c0       	rjmp	.+480    	; 0x55ea <__fp_inf>
    540a:	51 11       	cpse	r21, r1
    540c:	39 c1       	rjmp	.+626    	; 0x5680 <__fp_szero>
    540e:	f3 c0       	rjmp	.+486    	; 0x55f6 <__fp_nan>

00005410 <__divsf3x>:
    5410:	14 d1       	rcall	.+552    	; 0x563a <__fp_split3>
    5412:	98 f3       	brcs	.-26     	; 0x53fa <__divsf3+0x4>

00005414 <__divsf3_pse>:
    5414:	99 23       	and	r25, r25
    5416:	c9 f3       	breq	.-14     	; 0x540a <__divsf3+0x14>
    5418:	55 23       	and	r21, r21
    541a:	b1 f3       	breq	.-20     	; 0x5408 <__divsf3+0x12>
    541c:	95 1b       	sub	r25, r21
    541e:	55 0b       	sbc	r21, r21
    5420:	bb 27       	eor	r27, r27
    5422:	aa 27       	eor	r26, r26
    5424:	62 17       	cp	r22, r18
    5426:	73 07       	cpc	r23, r19
    5428:	84 07       	cpc	r24, r20
    542a:	38 f0       	brcs	.+14     	; 0x543a <__divsf3_pse+0x26>
    542c:	9f 5f       	subi	r25, 0xFF	; 255
    542e:	5f 4f       	sbci	r21, 0xFF	; 255
    5430:	22 0f       	add	r18, r18
    5432:	33 1f       	adc	r19, r19
    5434:	44 1f       	adc	r20, r20
    5436:	aa 1f       	adc	r26, r26
    5438:	a9 f3       	breq	.-22     	; 0x5424 <__divsf3_pse+0x10>
    543a:	33 d0       	rcall	.+102    	; 0x54a2 <__divsf3_pse+0x8e>
    543c:	0e 2e       	mov	r0, r30
    543e:	3a f0       	brmi	.+14     	; 0x544e <__divsf3_pse+0x3a>
    5440:	e0 e8       	ldi	r30, 0x80	; 128
    5442:	30 d0       	rcall	.+96     	; 0x54a4 <__divsf3_pse+0x90>
    5444:	91 50       	subi	r25, 0x01	; 1
    5446:	50 40       	sbci	r21, 0x00	; 0
    5448:	e6 95       	lsr	r30
    544a:	00 1c       	adc	r0, r0
    544c:	ca f7       	brpl	.-14     	; 0x5440 <__divsf3_pse+0x2c>
    544e:	29 d0       	rcall	.+82     	; 0x54a2 <__divsf3_pse+0x8e>
    5450:	fe 2f       	mov	r31, r30
    5452:	27 d0       	rcall	.+78     	; 0x54a2 <__divsf3_pse+0x8e>
    5454:	66 0f       	add	r22, r22
    5456:	77 1f       	adc	r23, r23
    5458:	88 1f       	adc	r24, r24
    545a:	bb 1f       	adc	r27, r27
    545c:	26 17       	cp	r18, r22
    545e:	37 07       	cpc	r19, r23
    5460:	48 07       	cpc	r20, r24
    5462:	ab 07       	cpc	r26, r27
    5464:	b0 e8       	ldi	r27, 0x80	; 128
    5466:	09 f0       	breq	.+2      	; 0x546a <__divsf3_pse+0x56>
    5468:	bb 0b       	sbc	r27, r27
    546a:	80 2d       	mov	r24, r0
    546c:	bf 01       	movw	r22, r30
    546e:	ff 27       	eor	r31, r31
    5470:	93 58       	subi	r25, 0x83	; 131
    5472:	5f 4f       	sbci	r21, 0xFF	; 255
    5474:	2a f0       	brmi	.+10     	; 0x5480 <__divsf3_pse+0x6c>
    5476:	9e 3f       	cpi	r25, 0xFE	; 254
    5478:	51 05       	cpc	r21, r1
    547a:	68 f0       	brcs	.+26     	; 0x5496 <__divsf3_pse+0x82>
    547c:	b6 c0       	rjmp	.+364    	; 0x55ea <__fp_inf>
    547e:	00 c1       	rjmp	.+512    	; 0x5680 <__fp_szero>
    5480:	5f 3f       	cpi	r21, 0xFF	; 255
    5482:	ec f3       	brlt	.-6      	; 0x547e <__divsf3_pse+0x6a>
    5484:	98 3e       	cpi	r25, 0xE8	; 232
    5486:	dc f3       	brlt	.-10     	; 0x547e <__divsf3_pse+0x6a>
    5488:	86 95       	lsr	r24
    548a:	77 95       	ror	r23
    548c:	67 95       	ror	r22
    548e:	b7 95       	ror	r27
    5490:	f7 95       	ror	r31
    5492:	9f 5f       	subi	r25, 0xFF	; 255
    5494:	c9 f7       	brne	.-14     	; 0x5488 <__divsf3_pse+0x74>
    5496:	88 0f       	add	r24, r24
    5498:	91 1d       	adc	r25, r1
    549a:	96 95       	lsr	r25
    549c:	87 95       	ror	r24
    549e:	97 f9       	bld	r25, 7
    54a0:	08 95       	ret
    54a2:	e1 e0       	ldi	r30, 0x01	; 1
    54a4:	66 0f       	add	r22, r22
    54a6:	77 1f       	adc	r23, r23
    54a8:	88 1f       	adc	r24, r24
    54aa:	bb 1f       	adc	r27, r27
    54ac:	62 17       	cp	r22, r18
    54ae:	73 07       	cpc	r23, r19
    54b0:	84 07       	cpc	r24, r20
    54b2:	ba 07       	cpc	r27, r26
    54b4:	20 f0       	brcs	.+8      	; 0x54be <__divsf3_pse+0xaa>
    54b6:	62 1b       	sub	r22, r18
    54b8:	73 0b       	sbc	r23, r19
    54ba:	84 0b       	sbc	r24, r20
    54bc:	ba 0b       	sbc	r27, r26
    54be:	ee 1f       	adc	r30, r30
    54c0:	88 f7       	brcc	.-30     	; 0x54a4 <__divsf3_pse+0x90>
    54c2:	e0 95       	com	r30
    54c4:	08 95       	ret

000054c6 <__fixsfsi>:
    54c6:	04 d0       	rcall	.+8      	; 0x54d0 <__fixunssfsi>
    54c8:	68 94       	set
    54ca:	b1 11       	cpse	r27, r1
    54cc:	d9 c0       	rjmp	.+434    	; 0x5680 <__fp_szero>
    54ce:	08 95       	ret

000054d0 <__fixunssfsi>:
    54d0:	bc d0       	rcall	.+376    	; 0x564a <__fp_splitA>
    54d2:	88 f0       	brcs	.+34     	; 0x54f6 <__fixunssfsi+0x26>
    54d4:	9f 57       	subi	r25, 0x7F	; 127
    54d6:	90 f0       	brcs	.+36     	; 0x54fc <__fixunssfsi+0x2c>
    54d8:	b9 2f       	mov	r27, r25
    54da:	99 27       	eor	r25, r25
    54dc:	b7 51       	subi	r27, 0x17	; 23
    54de:	a0 f0       	brcs	.+40     	; 0x5508 <__fixunssfsi+0x38>
    54e0:	d1 f0       	breq	.+52     	; 0x5516 <__fixunssfsi+0x46>
    54e2:	66 0f       	add	r22, r22
    54e4:	77 1f       	adc	r23, r23
    54e6:	88 1f       	adc	r24, r24
    54e8:	99 1f       	adc	r25, r25
    54ea:	1a f0       	brmi	.+6      	; 0x54f2 <__fixunssfsi+0x22>
    54ec:	ba 95       	dec	r27
    54ee:	c9 f7       	brne	.-14     	; 0x54e2 <__fixunssfsi+0x12>
    54f0:	12 c0       	rjmp	.+36     	; 0x5516 <__fixunssfsi+0x46>
    54f2:	b1 30       	cpi	r27, 0x01	; 1
    54f4:	81 f0       	breq	.+32     	; 0x5516 <__fixunssfsi+0x46>
    54f6:	c3 d0       	rcall	.+390    	; 0x567e <__fp_zero>
    54f8:	b1 e0       	ldi	r27, 0x01	; 1
    54fa:	08 95       	ret
    54fc:	c0 c0       	rjmp	.+384    	; 0x567e <__fp_zero>
    54fe:	67 2f       	mov	r22, r23
    5500:	78 2f       	mov	r23, r24
    5502:	88 27       	eor	r24, r24
    5504:	b8 5f       	subi	r27, 0xF8	; 248
    5506:	39 f0       	breq	.+14     	; 0x5516 <__fixunssfsi+0x46>
    5508:	b9 3f       	cpi	r27, 0xF9	; 249
    550a:	cc f3       	brlt	.-14     	; 0x54fe <__fixunssfsi+0x2e>
    550c:	86 95       	lsr	r24
    550e:	77 95       	ror	r23
    5510:	67 95       	ror	r22
    5512:	b3 95       	inc	r27
    5514:	d9 f7       	brne	.-10     	; 0x550c <__fixunssfsi+0x3c>
    5516:	3e f4       	brtc	.+14     	; 0x5526 <__fixunssfsi+0x56>
    5518:	90 95       	com	r25
    551a:	80 95       	com	r24
    551c:	70 95       	com	r23
    551e:	61 95       	neg	r22
    5520:	7f 4f       	sbci	r23, 0xFF	; 255
    5522:	8f 4f       	sbci	r24, 0xFF	; 255
    5524:	9f 4f       	sbci	r25, 0xFF	; 255
    5526:	08 95       	ret

00005528 <__floatunsisf>:
    5528:	e8 94       	clt
    552a:	09 c0       	rjmp	.+18     	; 0x553e <__floatsisf+0x12>

0000552c <__floatsisf>:
    552c:	97 fb       	bst	r25, 7
    552e:	3e f4       	brtc	.+14     	; 0x553e <__floatsisf+0x12>
    5530:	90 95       	com	r25
    5532:	80 95       	com	r24
    5534:	70 95       	com	r23
    5536:	61 95       	neg	r22
    5538:	7f 4f       	sbci	r23, 0xFF	; 255
    553a:	8f 4f       	sbci	r24, 0xFF	; 255
    553c:	9f 4f       	sbci	r25, 0xFF	; 255
    553e:	99 23       	and	r25, r25
    5540:	a9 f0       	breq	.+42     	; 0x556c <__floatsisf+0x40>
    5542:	f9 2f       	mov	r31, r25
    5544:	96 e9       	ldi	r25, 0x96	; 150
    5546:	bb 27       	eor	r27, r27
    5548:	93 95       	inc	r25
    554a:	f6 95       	lsr	r31
    554c:	87 95       	ror	r24
    554e:	77 95       	ror	r23
    5550:	67 95       	ror	r22
    5552:	b7 95       	ror	r27
    5554:	f1 11       	cpse	r31, r1
    5556:	f8 cf       	rjmp	.-16     	; 0x5548 <__floatsisf+0x1c>
    5558:	fa f4       	brpl	.+62     	; 0x5598 <__floatsisf+0x6c>
    555a:	bb 0f       	add	r27, r27
    555c:	11 f4       	brne	.+4      	; 0x5562 <__floatsisf+0x36>
    555e:	60 ff       	sbrs	r22, 0
    5560:	1b c0       	rjmp	.+54     	; 0x5598 <__floatsisf+0x6c>
    5562:	6f 5f       	subi	r22, 0xFF	; 255
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	8f 4f       	sbci	r24, 0xFF	; 255
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	16 c0       	rjmp	.+44     	; 0x5598 <__floatsisf+0x6c>
    556c:	88 23       	and	r24, r24
    556e:	11 f0       	breq	.+4      	; 0x5574 <__floatsisf+0x48>
    5570:	96 e9       	ldi	r25, 0x96	; 150
    5572:	11 c0       	rjmp	.+34     	; 0x5596 <__floatsisf+0x6a>
    5574:	77 23       	and	r23, r23
    5576:	21 f0       	breq	.+8      	; 0x5580 <__floatsisf+0x54>
    5578:	9e e8       	ldi	r25, 0x8E	; 142
    557a:	87 2f       	mov	r24, r23
    557c:	76 2f       	mov	r23, r22
    557e:	05 c0       	rjmp	.+10     	; 0x558a <__floatsisf+0x5e>
    5580:	66 23       	and	r22, r22
    5582:	71 f0       	breq	.+28     	; 0x55a0 <__floatsisf+0x74>
    5584:	96 e8       	ldi	r25, 0x86	; 134
    5586:	86 2f       	mov	r24, r22
    5588:	70 e0       	ldi	r23, 0x00	; 0
    558a:	60 e0       	ldi	r22, 0x00	; 0
    558c:	2a f0       	brmi	.+10     	; 0x5598 <__floatsisf+0x6c>
    558e:	9a 95       	dec	r25
    5590:	66 0f       	add	r22, r22
    5592:	77 1f       	adc	r23, r23
    5594:	88 1f       	adc	r24, r24
    5596:	da f7       	brpl	.-10     	; 0x558e <__floatsisf+0x62>
    5598:	88 0f       	add	r24, r24
    559a:	96 95       	lsr	r25
    559c:	87 95       	ror	r24
    559e:	97 f9       	bld	r25, 7
    55a0:	08 95       	ret

000055a2 <__fp_cmp>:
    55a2:	99 0f       	add	r25, r25
    55a4:	00 08       	sbc	r0, r0
    55a6:	55 0f       	add	r21, r21
    55a8:	aa 0b       	sbc	r26, r26
    55aa:	e0 e8       	ldi	r30, 0x80	; 128
    55ac:	fe ef       	ldi	r31, 0xFE	; 254
    55ae:	16 16       	cp	r1, r22
    55b0:	17 06       	cpc	r1, r23
    55b2:	e8 07       	cpc	r30, r24
    55b4:	f9 07       	cpc	r31, r25
    55b6:	c0 f0       	brcs	.+48     	; 0x55e8 <__fp_cmp+0x46>
    55b8:	12 16       	cp	r1, r18
    55ba:	13 06       	cpc	r1, r19
    55bc:	e4 07       	cpc	r30, r20
    55be:	f5 07       	cpc	r31, r21
    55c0:	98 f0       	brcs	.+38     	; 0x55e8 <__fp_cmp+0x46>
    55c2:	62 1b       	sub	r22, r18
    55c4:	73 0b       	sbc	r23, r19
    55c6:	84 0b       	sbc	r24, r20
    55c8:	95 0b       	sbc	r25, r21
    55ca:	39 f4       	brne	.+14     	; 0x55da <__fp_cmp+0x38>
    55cc:	0a 26       	eor	r0, r26
    55ce:	61 f0       	breq	.+24     	; 0x55e8 <__fp_cmp+0x46>
    55d0:	23 2b       	or	r18, r19
    55d2:	24 2b       	or	r18, r20
    55d4:	25 2b       	or	r18, r21
    55d6:	21 f4       	brne	.+8      	; 0x55e0 <__fp_cmp+0x3e>
    55d8:	08 95       	ret
    55da:	0a 26       	eor	r0, r26
    55dc:	09 f4       	brne	.+2      	; 0x55e0 <__fp_cmp+0x3e>
    55de:	a1 40       	sbci	r26, 0x01	; 1
    55e0:	a6 95       	lsr	r26
    55e2:	8f ef       	ldi	r24, 0xFF	; 255
    55e4:	81 1d       	adc	r24, r1
    55e6:	81 1d       	adc	r24, r1
    55e8:	08 95       	ret

000055ea <__fp_inf>:
    55ea:	97 f9       	bld	r25, 7
    55ec:	9f 67       	ori	r25, 0x7F	; 127
    55ee:	80 e8       	ldi	r24, 0x80	; 128
    55f0:	70 e0       	ldi	r23, 0x00	; 0
    55f2:	60 e0       	ldi	r22, 0x00	; 0
    55f4:	08 95       	ret

000055f6 <__fp_nan>:
    55f6:	9f ef       	ldi	r25, 0xFF	; 255
    55f8:	80 ec       	ldi	r24, 0xC0	; 192
    55fa:	08 95       	ret

000055fc <__fp_pscA>:
    55fc:	00 24       	eor	r0, r0
    55fe:	0a 94       	dec	r0
    5600:	16 16       	cp	r1, r22
    5602:	17 06       	cpc	r1, r23
    5604:	18 06       	cpc	r1, r24
    5606:	09 06       	cpc	r0, r25
    5608:	08 95       	ret

0000560a <__fp_pscB>:
    560a:	00 24       	eor	r0, r0
    560c:	0a 94       	dec	r0
    560e:	12 16       	cp	r1, r18
    5610:	13 06       	cpc	r1, r19
    5612:	14 06       	cpc	r1, r20
    5614:	05 06       	cpc	r0, r21
    5616:	08 95       	ret

00005618 <__fp_round>:
    5618:	09 2e       	mov	r0, r25
    561a:	03 94       	inc	r0
    561c:	00 0c       	add	r0, r0
    561e:	11 f4       	brne	.+4      	; 0x5624 <__fp_round+0xc>
    5620:	88 23       	and	r24, r24
    5622:	52 f0       	brmi	.+20     	; 0x5638 <__fp_round+0x20>
    5624:	bb 0f       	add	r27, r27
    5626:	40 f4       	brcc	.+16     	; 0x5638 <__fp_round+0x20>
    5628:	bf 2b       	or	r27, r31
    562a:	11 f4       	brne	.+4      	; 0x5630 <__fp_round+0x18>
    562c:	60 ff       	sbrs	r22, 0
    562e:	04 c0       	rjmp	.+8      	; 0x5638 <__fp_round+0x20>
    5630:	6f 5f       	subi	r22, 0xFF	; 255
    5632:	7f 4f       	sbci	r23, 0xFF	; 255
    5634:	8f 4f       	sbci	r24, 0xFF	; 255
    5636:	9f 4f       	sbci	r25, 0xFF	; 255
    5638:	08 95       	ret

0000563a <__fp_split3>:
    563a:	57 fd       	sbrc	r21, 7
    563c:	90 58       	subi	r25, 0x80	; 128
    563e:	44 0f       	add	r20, r20
    5640:	55 1f       	adc	r21, r21
    5642:	59 f0       	breq	.+22     	; 0x565a <__fp_splitA+0x10>
    5644:	5f 3f       	cpi	r21, 0xFF	; 255
    5646:	71 f0       	breq	.+28     	; 0x5664 <__fp_splitA+0x1a>
    5648:	47 95       	ror	r20

0000564a <__fp_splitA>:
    564a:	88 0f       	add	r24, r24
    564c:	97 fb       	bst	r25, 7
    564e:	99 1f       	adc	r25, r25
    5650:	61 f0       	breq	.+24     	; 0x566a <__fp_splitA+0x20>
    5652:	9f 3f       	cpi	r25, 0xFF	; 255
    5654:	79 f0       	breq	.+30     	; 0x5674 <__fp_splitA+0x2a>
    5656:	87 95       	ror	r24
    5658:	08 95       	ret
    565a:	12 16       	cp	r1, r18
    565c:	13 06       	cpc	r1, r19
    565e:	14 06       	cpc	r1, r20
    5660:	55 1f       	adc	r21, r21
    5662:	f2 cf       	rjmp	.-28     	; 0x5648 <__fp_split3+0xe>
    5664:	46 95       	lsr	r20
    5666:	f1 df       	rcall	.-30     	; 0x564a <__fp_splitA>
    5668:	08 c0       	rjmp	.+16     	; 0x567a <__fp_splitA+0x30>
    566a:	16 16       	cp	r1, r22
    566c:	17 06       	cpc	r1, r23
    566e:	18 06       	cpc	r1, r24
    5670:	99 1f       	adc	r25, r25
    5672:	f1 cf       	rjmp	.-30     	; 0x5656 <__fp_splitA+0xc>
    5674:	86 95       	lsr	r24
    5676:	71 05       	cpc	r23, r1
    5678:	61 05       	cpc	r22, r1
    567a:	08 94       	sec
    567c:	08 95       	ret

0000567e <__fp_zero>:
    567e:	e8 94       	clt

00005680 <__fp_szero>:
    5680:	bb 27       	eor	r27, r27
    5682:	66 27       	eor	r22, r22
    5684:	77 27       	eor	r23, r23
    5686:	cb 01       	movw	r24, r22
    5688:	97 f9       	bld	r25, 7
    568a:	08 95       	ret

0000568c <__gesf2>:
    568c:	8a df       	rcall	.-236    	; 0x55a2 <__fp_cmp>
    568e:	08 f4       	brcc	.+2      	; 0x5692 <__gesf2+0x6>
    5690:	8f ef       	ldi	r24, 0xFF	; 255
    5692:	08 95       	ret

00005694 <__mulsf3>:
    5694:	0b d0       	rcall	.+22     	; 0x56ac <__mulsf3x>
    5696:	c0 cf       	rjmp	.-128    	; 0x5618 <__fp_round>
    5698:	b1 df       	rcall	.-158    	; 0x55fc <__fp_pscA>
    569a:	28 f0       	brcs	.+10     	; 0x56a6 <__mulsf3+0x12>
    569c:	b6 df       	rcall	.-148    	; 0x560a <__fp_pscB>
    569e:	18 f0       	brcs	.+6      	; 0x56a6 <__mulsf3+0x12>
    56a0:	95 23       	and	r25, r21
    56a2:	09 f0       	breq	.+2      	; 0x56a6 <__mulsf3+0x12>
    56a4:	a2 cf       	rjmp	.-188    	; 0x55ea <__fp_inf>
    56a6:	a7 cf       	rjmp	.-178    	; 0x55f6 <__fp_nan>
    56a8:	11 24       	eor	r1, r1
    56aa:	ea cf       	rjmp	.-44     	; 0x5680 <__fp_szero>

000056ac <__mulsf3x>:
    56ac:	c6 df       	rcall	.-116    	; 0x563a <__fp_split3>
    56ae:	a0 f3       	brcs	.-24     	; 0x5698 <__mulsf3+0x4>

000056b0 <__mulsf3_pse>:
    56b0:	95 9f       	mul	r25, r21
    56b2:	d1 f3       	breq	.-12     	; 0x56a8 <__mulsf3+0x14>
    56b4:	95 0f       	add	r25, r21
    56b6:	50 e0       	ldi	r21, 0x00	; 0
    56b8:	55 1f       	adc	r21, r21
    56ba:	62 9f       	mul	r22, r18
    56bc:	f0 01       	movw	r30, r0
    56be:	72 9f       	mul	r23, r18
    56c0:	bb 27       	eor	r27, r27
    56c2:	f0 0d       	add	r31, r0
    56c4:	b1 1d       	adc	r27, r1
    56c6:	63 9f       	mul	r22, r19
    56c8:	aa 27       	eor	r26, r26
    56ca:	f0 0d       	add	r31, r0
    56cc:	b1 1d       	adc	r27, r1
    56ce:	aa 1f       	adc	r26, r26
    56d0:	64 9f       	mul	r22, r20
    56d2:	66 27       	eor	r22, r22
    56d4:	b0 0d       	add	r27, r0
    56d6:	a1 1d       	adc	r26, r1
    56d8:	66 1f       	adc	r22, r22
    56da:	82 9f       	mul	r24, r18
    56dc:	22 27       	eor	r18, r18
    56de:	b0 0d       	add	r27, r0
    56e0:	a1 1d       	adc	r26, r1
    56e2:	62 1f       	adc	r22, r18
    56e4:	73 9f       	mul	r23, r19
    56e6:	b0 0d       	add	r27, r0
    56e8:	a1 1d       	adc	r26, r1
    56ea:	62 1f       	adc	r22, r18
    56ec:	83 9f       	mul	r24, r19
    56ee:	a0 0d       	add	r26, r0
    56f0:	61 1d       	adc	r22, r1
    56f2:	22 1f       	adc	r18, r18
    56f4:	74 9f       	mul	r23, r20
    56f6:	33 27       	eor	r19, r19
    56f8:	a0 0d       	add	r26, r0
    56fa:	61 1d       	adc	r22, r1
    56fc:	23 1f       	adc	r18, r19
    56fe:	84 9f       	mul	r24, r20
    5700:	60 0d       	add	r22, r0
    5702:	21 1d       	adc	r18, r1
    5704:	82 2f       	mov	r24, r18
    5706:	76 2f       	mov	r23, r22
    5708:	6a 2f       	mov	r22, r26
    570a:	11 24       	eor	r1, r1
    570c:	9f 57       	subi	r25, 0x7F	; 127
    570e:	50 40       	sbci	r21, 0x00	; 0
    5710:	8a f0       	brmi	.+34     	; 0x5734 <__mulsf3_pse+0x84>
    5712:	e1 f0       	breq	.+56     	; 0x574c <__mulsf3_pse+0x9c>
    5714:	88 23       	and	r24, r24
    5716:	4a f0       	brmi	.+18     	; 0x572a <__mulsf3_pse+0x7a>
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	bb 1f       	adc	r27, r27
    571e:	66 1f       	adc	r22, r22
    5720:	77 1f       	adc	r23, r23
    5722:	88 1f       	adc	r24, r24
    5724:	91 50       	subi	r25, 0x01	; 1
    5726:	50 40       	sbci	r21, 0x00	; 0
    5728:	a9 f7       	brne	.-22     	; 0x5714 <__mulsf3_pse+0x64>
    572a:	9e 3f       	cpi	r25, 0xFE	; 254
    572c:	51 05       	cpc	r21, r1
    572e:	70 f0       	brcs	.+28     	; 0x574c <__mulsf3_pse+0x9c>
    5730:	5c cf       	rjmp	.-328    	; 0x55ea <__fp_inf>
    5732:	a6 cf       	rjmp	.-180    	; 0x5680 <__fp_szero>
    5734:	5f 3f       	cpi	r21, 0xFF	; 255
    5736:	ec f3       	brlt	.-6      	; 0x5732 <__mulsf3_pse+0x82>
    5738:	98 3e       	cpi	r25, 0xE8	; 232
    573a:	dc f3       	brlt	.-10     	; 0x5732 <__mulsf3_pse+0x82>
    573c:	86 95       	lsr	r24
    573e:	77 95       	ror	r23
    5740:	67 95       	ror	r22
    5742:	b7 95       	ror	r27
    5744:	f7 95       	ror	r31
    5746:	e7 95       	ror	r30
    5748:	9f 5f       	subi	r25, 0xFF	; 255
    574a:	c1 f7       	brne	.-16     	; 0x573c <__mulsf3_pse+0x8c>
    574c:	fe 2b       	or	r31, r30
    574e:	88 0f       	add	r24, r24
    5750:	91 1d       	adc	r25, r1
    5752:	96 95       	lsr	r25
    5754:	87 95       	ror	r24
    5756:	97 f9       	bld	r25, 7
    5758:	08 95       	ret

0000575a <__mulsi3>:
    575a:	62 9f       	mul	r22, r18
    575c:	d0 01       	movw	r26, r0
    575e:	73 9f       	mul	r23, r19
    5760:	f0 01       	movw	r30, r0
    5762:	82 9f       	mul	r24, r18
    5764:	e0 0d       	add	r30, r0
    5766:	f1 1d       	adc	r31, r1
    5768:	64 9f       	mul	r22, r20
    576a:	e0 0d       	add	r30, r0
    576c:	f1 1d       	adc	r31, r1
    576e:	92 9f       	mul	r25, r18
    5770:	f0 0d       	add	r31, r0
    5772:	83 9f       	mul	r24, r19
    5774:	f0 0d       	add	r31, r0
    5776:	74 9f       	mul	r23, r20
    5778:	f0 0d       	add	r31, r0
    577a:	65 9f       	mul	r22, r21
    577c:	f0 0d       	add	r31, r0
    577e:	99 27       	eor	r25, r25
    5780:	72 9f       	mul	r23, r18
    5782:	b0 0d       	add	r27, r0
    5784:	e1 1d       	adc	r30, r1
    5786:	f9 1f       	adc	r31, r25
    5788:	63 9f       	mul	r22, r19
    578a:	b0 0d       	add	r27, r0
    578c:	e1 1d       	adc	r30, r1
    578e:	f9 1f       	adc	r31, r25
    5790:	bd 01       	movw	r22, r26
    5792:	cf 01       	movw	r24, r30
    5794:	11 24       	eor	r1, r1
    5796:	08 95       	ret

00005798 <__divmodhi4>:
    5798:	97 fb       	bst	r25, 7
    579a:	09 2e       	mov	r0, r25
    579c:	07 26       	eor	r0, r23
    579e:	0a d0       	rcall	.+20     	; 0x57b4 <__divmodhi4_neg1>
    57a0:	77 fd       	sbrc	r23, 7
    57a2:	04 d0       	rcall	.+8      	; 0x57ac <__divmodhi4_neg2>
    57a4:	2e d0       	rcall	.+92     	; 0x5802 <__udivmodhi4>
    57a6:	06 d0       	rcall	.+12     	; 0x57b4 <__divmodhi4_neg1>
    57a8:	00 20       	and	r0, r0
    57aa:	1a f4       	brpl	.+6      	; 0x57b2 <__divmodhi4_exit>

000057ac <__divmodhi4_neg2>:
    57ac:	70 95       	com	r23
    57ae:	61 95       	neg	r22
    57b0:	7f 4f       	sbci	r23, 0xFF	; 255

000057b2 <__divmodhi4_exit>:
    57b2:	08 95       	ret

000057b4 <__divmodhi4_neg1>:
    57b4:	f6 f7       	brtc	.-4      	; 0x57b2 <__divmodhi4_exit>
    57b6:	90 95       	com	r25
    57b8:	81 95       	neg	r24
    57ba:	9f 4f       	sbci	r25, 0xFF	; 255
    57bc:	08 95       	ret

000057be <__udivmodsi4>:
    57be:	a1 e2       	ldi	r26, 0x21	; 33
    57c0:	1a 2e       	mov	r1, r26
    57c2:	aa 1b       	sub	r26, r26
    57c4:	bb 1b       	sub	r27, r27
    57c6:	fd 01       	movw	r30, r26
    57c8:	0d c0       	rjmp	.+26     	; 0x57e4 <__udivmodsi4_ep>

000057ca <__udivmodsi4_loop>:
    57ca:	aa 1f       	adc	r26, r26
    57cc:	bb 1f       	adc	r27, r27
    57ce:	ee 1f       	adc	r30, r30
    57d0:	ff 1f       	adc	r31, r31
    57d2:	a2 17       	cp	r26, r18
    57d4:	b3 07       	cpc	r27, r19
    57d6:	e4 07       	cpc	r30, r20
    57d8:	f5 07       	cpc	r31, r21
    57da:	20 f0       	brcs	.+8      	; 0x57e4 <__udivmodsi4_ep>
    57dc:	a2 1b       	sub	r26, r18
    57de:	b3 0b       	sbc	r27, r19
    57e0:	e4 0b       	sbc	r30, r20
    57e2:	f5 0b       	sbc	r31, r21

000057e4 <__udivmodsi4_ep>:
    57e4:	66 1f       	adc	r22, r22
    57e6:	77 1f       	adc	r23, r23
    57e8:	88 1f       	adc	r24, r24
    57ea:	99 1f       	adc	r25, r25
    57ec:	1a 94       	dec	r1
    57ee:	69 f7       	brne	.-38     	; 0x57ca <__udivmodsi4_loop>
    57f0:	60 95       	com	r22
    57f2:	70 95       	com	r23
    57f4:	80 95       	com	r24
    57f6:	90 95       	com	r25
    57f8:	9b 01       	movw	r18, r22
    57fa:	ac 01       	movw	r20, r24
    57fc:	bd 01       	movw	r22, r26
    57fe:	cf 01       	movw	r24, r30
    5800:	08 95       	ret

00005802 <__udivmodhi4>:
    5802:	aa 1b       	sub	r26, r26
    5804:	bb 1b       	sub	r27, r27
    5806:	51 e1       	ldi	r21, 0x11	; 17
    5808:	07 c0       	rjmp	.+14     	; 0x5818 <__udivmodhi4_ep>

0000580a <__udivmodhi4_loop>:
    580a:	aa 1f       	adc	r26, r26
    580c:	bb 1f       	adc	r27, r27
    580e:	a6 17       	cp	r26, r22
    5810:	b7 07       	cpc	r27, r23
    5812:	10 f0       	brcs	.+4      	; 0x5818 <__udivmodhi4_ep>
    5814:	a6 1b       	sub	r26, r22
    5816:	b7 0b       	sbc	r27, r23

00005818 <__udivmodhi4_ep>:
    5818:	88 1f       	adc	r24, r24
    581a:	99 1f       	adc	r25, r25
    581c:	5a 95       	dec	r21
    581e:	a9 f7       	brne	.-22     	; 0x580a <__udivmodhi4_loop>
    5820:	80 95       	com	r24
    5822:	90 95       	com	r25
    5824:	bc 01       	movw	r22, r24
    5826:	cd 01       	movw	r24, r26
    5828:	08 95       	ret

0000582a <__tablejump2__>:
    582a:	ee 0f       	add	r30, r30
    582c:	ff 1f       	adc	r31, r31

0000582e <__tablejump__>:
    582e:	05 90       	lpm	r0, Z+
    5830:	f4 91       	lpm	r31, Z+
    5832:	e0 2d       	mov	r30, r0
    5834:	09 94       	ijmp

00005836 <isspace>:
    5836:	91 11       	cpse	r25, r1
    5838:	06 c0       	rjmp	.+12     	; 0x5846 <__ctype_isfalse>
    583a:	80 32       	cpi	r24, 0x20	; 32
    583c:	19 f0       	breq	.+6      	; 0x5844 <isspace+0xe>
    583e:	89 50       	subi	r24, 0x09	; 9
    5840:	85 50       	subi	r24, 0x05	; 5
    5842:	d0 f7       	brcc	.-12     	; 0x5838 <isspace+0x2>
    5844:	08 95       	ret

00005846 <__ctype_isfalse>:
    5846:	99 27       	eor	r25, r25
    5848:	88 27       	eor	r24, r24

0000584a <__ctype_istrue>:
    584a:	08 95       	ret

0000584c <__prologue_saves__>:
    584c:	2f 92       	push	r2
    584e:	3f 92       	push	r3
    5850:	4f 92       	push	r4
    5852:	5f 92       	push	r5
    5854:	6f 92       	push	r6
    5856:	7f 92       	push	r7
    5858:	8f 92       	push	r8
    585a:	9f 92       	push	r9
    585c:	af 92       	push	r10
    585e:	bf 92       	push	r11
    5860:	cf 92       	push	r12
    5862:	df 92       	push	r13
    5864:	ef 92       	push	r14
    5866:	ff 92       	push	r15
    5868:	0f 93       	push	r16
    586a:	1f 93       	push	r17
    586c:	cf 93       	push	r28
    586e:	df 93       	push	r29
    5870:	cd b7       	in	r28, 0x3d	; 61
    5872:	de b7       	in	r29, 0x3e	; 62
    5874:	ca 1b       	sub	r28, r26
    5876:	db 0b       	sbc	r29, r27
    5878:	0f b6       	in	r0, 0x3f	; 63
    587a:	f8 94       	cli
    587c:	de bf       	out	0x3e, r29	; 62
    587e:	0f be       	out	0x3f, r0	; 63
    5880:	cd bf       	out	0x3d, r28	; 61
    5882:	09 94       	ijmp

00005884 <__epilogue_restores__>:
    5884:	2a 88       	ldd	r2, Y+18	; 0x12
    5886:	39 88       	ldd	r3, Y+17	; 0x11
    5888:	48 88       	ldd	r4, Y+16	; 0x10
    588a:	5f 84       	ldd	r5, Y+15	; 0x0f
    588c:	6e 84       	ldd	r6, Y+14	; 0x0e
    588e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5890:	8c 84       	ldd	r8, Y+12	; 0x0c
    5892:	9b 84       	ldd	r9, Y+11	; 0x0b
    5894:	aa 84       	ldd	r10, Y+10	; 0x0a
    5896:	b9 84       	ldd	r11, Y+9	; 0x09
    5898:	c8 84       	ldd	r12, Y+8	; 0x08
    589a:	df 80       	ldd	r13, Y+7	; 0x07
    589c:	ee 80       	ldd	r14, Y+6	; 0x06
    589e:	fd 80       	ldd	r15, Y+5	; 0x05
    58a0:	0c 81       	ldd	r16, Y+4	; 0x04
    58a2:	1b 81       	ldd	r17, Y+3	; 0x03
    58a4:	aa 81       	ldd	r26, Y+2	; 0x02
    58a6:	b9 81       	ldd	r27, Y+1	; 0x01
    58a8:	ce 0f       	add	r28, r30
    58aa:	d1 1d       	adc	r29, r1
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
    58b6:	ed 01       	movw	r28, r26
    58b8:	08 95       	ret

000058ba <__do_global_dtors>:
    58ba:	12 e0       	ldi	r17, 0x02	; 2
    58bc:	c4 e0       	ldi	r28, 0x04	; 4
    58be:	d2 e0       	ldi	r29, 0x02	; 2
    58c0:	04 c0       	rjmp	.+8      	; 0x58ca <.do_global_dtors_start>

000058c2 <.do_global_dtors_loop>:
    58c2:	fe 01       	movw	r30, r28
    58c4:	0e 94 17 2c 	call	0x582e	; 0x582e <__tablejump__>
    58c8:	22 96       	adiw	r28, 0x02	; 2

000058ca <.do_global_dtors_start>:
    58ca:	c6 30       	cpi	r28, 0x06	; 6
    58cc:	d1 07       	cpc	r29, r17
    58ce:	c9 f7       	brne	.-14     	; 0x58c2 <.do_global_dtors_loop>
    58d0:	f8 94       	cli

000058d2 <__stop_program>:
    58d2:	ff cf       	rjmp	.-2      	; 0x58d2 <__stop_program>
